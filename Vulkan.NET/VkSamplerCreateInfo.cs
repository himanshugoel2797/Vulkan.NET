//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class VkSamplerCreateInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VkSamplerCreateInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VkSamplerCreateInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VkSamplerCreateInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vulkanPINVOKE.delete_VkSamplerCreateInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public VkStructureType sType {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_sType_set(swigCPtr, (int)value);
    } 
    get {
      VkStructureType ret = (VkStructureType)vulkanPINVOKE.VkSamplerCreateInfo_sType_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void pNext {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_pNext_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkSamplerCreateInfo_pNext_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t flags {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_flags_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkSamplerCreateInfo_flags_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VkFilter magFilter {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_magFilter_set(swigCPtr, (int)value);
    } 
    get {
      VkFilter ret = (VkFilter)vulkanPINVOKE.VkSamplerCreateInfo_magFilter_get(swigCPtr);
      return ret;
    } 
  }

  public VkFilter minFilter {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_minFilter_set(swigCPtr, (int)value);
    } 
    get {
      VkFilter ret = (VkFilter)vulkanPINVOKE.VkSamplerCreateInfo_minFilter_get(swigCPtr);
      return ret;
    } 
  }

  public VkSamplerMipmapMode mipmapMode {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_mipmapMode_set(swigCPtr, (int)value);
    } 
    get {
      VkSamplerMipmapMode ret = (VkSamplerMipmapMode)vulkanPINVOKE.VkSamplerCreateInfo_mipmapMode_get(swigCPtr);
      return ret;
    } 
  }

  public VkSamplerAddressMode addressModeU {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_addressModeU_set(swigCPtr, (int)value);
    } 
    get {
      VkSamplerAddressMode ret = (VkSamplerAddressMode)vulkanPINVOKE.VkSamplerCreateInfo_addressModeU_get(swigCPtr);
      return ret;
    } 
  }

  public VkSamplerAddressMode addressModeV {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_addressModeV_set(swigCPtr, (int)value);
    } 
    get {
      VkSamplerAddressMode ret = (VkSamplerAddressMode)vulkanPINVOKE.VkSamplerCreateInfo_addressModeV_get(swigCPtr);
      return ret;
    } 
  }

  public VkSamplerAddressMode addressModeW {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_addressModeW_set(swigCPtr, (int)value);
    } 
    get {
      VkSamplerAddressMode ret = (VkSamplerAddressMode)vulkanPINVOKE.VkSamplerCreateInfo_addressModeW_get(swigCPtr);
      return ret;
    } 
  }

  public float mipLodBias {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_mipLodBias_set(swigCPtr, value);
    } 
    get {
      float ret = vulkanPINVOKE.VkSamplerCreateInfo_mipLodBias_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t anisotropyEnable {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_anisotropyEnable_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkSamplerCreateInfo_anisotropyEnable_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float maxAnisotropy {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_maxAnisotropy_set(swigCPtr, value);
    } 
    get {
      float ret = vulkanPINVOKE.VkSamplerCreateInfo_maxAnisotropy_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t compareEnable {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_compareEnable_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkSamplerCreateInfo_compareEnable_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VkCompareOp compareOp {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_compareOp_set(swigCPtr, (int)value);
    } 
    get {
      VkCompareOp ret = (VkCompareOp)vulkanPINVOKE.VkSamplerCreateInfo_compareOp_get(swigCPtr);
      return ret;
    } 
  }

  public float minLod {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_minLod_set(swigCPtr, value);
    } 
    get {
      float ret = vulkanPINVOKE.VkSamplerCreateInfo_minLod_get(swigCPtr);
      return ret;
    } 
  }

  public float maxLod {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_maxLod_set(swigCPtr, value);
    } 
    get {
      float ret = vulkanPINVOKE.VkSamplerCreateInfo_maxLod_get(swigCPtr);
      return ret;
    } 
  }

  public VkBorderColor borderColor {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_borderColor_set(swigCPtr, (int)value);
    } 
    get {
      VkBorderColor ret = (VkBorderColor)vulkanPINVOKE.VkSamplerCreateInfo_borderColor_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t unnormalizedCoordinates {
    set {
      vulkanPINVOKE.VkSamplerCreateInfo_unnormalizedCoordinates_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkSamplerCreateInfo_unnormalizedCoordinates_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VkSamplerCreateInfo() : this(vulkanPINVOKE.new_VkSamplerCreateInfo(), true) {
  }

}
