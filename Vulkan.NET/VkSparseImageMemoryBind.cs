//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class VkSparseImageMemoryBind : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VkSparseImageMemoryBind(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VkSparseImageMemoryBind obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VkSparseImageMemoryBind() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vulkanPINVOKE.delete_VkSparseImageMemoryBind(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public VkImageSubresource subresource {
    set {
      vulkanPINVOKE.VkSparseImageMemoryBind_subresource_set(swigCPtr, VkImageSubresource.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkSparseImageMemoryBind_subresource_get(swigCPtr);
      VkImageSubresource ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkImageSubresource(cPtr, false);
      return ret;
    } 
  }

  public VkOffset3D offset {
    set {
      vulkanPINVOKE.VkSparseImageMemoryBind_offset_set(swigCPtr, VkOffset3D.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkSparseImageMemoryBind_offset_get(swigCPtr);
      VkOffset3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkOffset3D(cPtr, false);
      return ret;
    } 
  }

  public VkExtent3D extent {
    set {
      vulkanPINVOKE.VkSparseImageMemoryBind_extent_set(swigCPtr, VkExtent3D.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkSparseImageMemoryBind_extent_get(swigCPtr);
      VkExtent3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkExtent3D(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint64_t memory {
    set {
      vulkanPINVOKE.VkSparseImageMemoryBind_memory_set(swigCPtr, SWIGTYPE_p_uint64_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(vulkanPINVOKE.VkSparseImageMemoryBind_memory_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint64_t memoryOffset {
    set {
      vulkanPINVOKE.VkSparseImageMemoryBind_memoryOffset_set(swigCPtr, SWIGTYPE_p_uint64_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(vulkanPINVOKE.VkSparseImageMemoryBind_memoryOffset_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t flags {
    set {
      vulkanPINVOKE.VkSparseImageMemoryBind_flags_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkSparseImageMemoryBind_flags_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VkSparseImageMemoryBind() : this(vulkanPINVOKE.new_VkSparseImageMemoryBind(), true) {
  }

}
