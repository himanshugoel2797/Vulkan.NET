//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class vulkan {
  public static VkResult vkCreateInstance(VkInstanceCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_p_VkInstance_T pInstance) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateInstance(VkInstanceCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_p_VkInstance_T.getCPtr(pInstance));
    return ret;
  }

  public static void vkDestroyInstance(SWIGTYPE_p_VkInstance_T instance, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyInstance(SWIGTYPE_p_VkInstance_T.getCPtr(instance), VkAllocationCallbacks.getCPtr(pAllocator));
  }

  public static VkResult vkEnumeratePhysicalDevices(SWIGTYPE_p_VkInstance_T instance, SWIGTYPE_p_uint32_t pPhysicalDeviceCount, SWIGTYPE_p_p_VkPhysicalDevice_T pPhysicalDevices) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkEnumeratePhysicalDevices(SWIGTYPE_p_VkInstance_T.getCPtr(instance), SWIGTYPE_p_uint32_t.getCPtr(pPhysicalDeviceCount), SWIGTYPE_p_p_VkPhysicalDevice_T.getCPtr(pPhysicalDevices));
    return ret;
  }

  public static void vkGetPhysicalDeviceFeatures(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, VkPhysicalDeviceFeatures pFeatures) {
    vulkanPINVOKE.vkGetPhysicalDeviceFeatures(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), VkPhysicalDeviceFeatures.getCPtr(pFeatures));
  }

  public static void vkGetPhysicalDeviceFormatProperties(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, VkFormat format, VkFormatProperties pFormatProperties) {
    vulkanPINVOKE.vkGetPhysicalDeviceFormatProperties(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), (int)format, VkFormatProperties.getCPtr(pFormatProperties));
  }

  public static VkResult vkGetPhysicalDeviceImageFormatProperties(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, SWIGTYPE_p_uint32_t usage, SWIGTYPE_p_uint32_t flags, VkImageFormatProperties pImageFormatProperties) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetPhysicalDeviceImageFormatProperties(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), (int)format, (int)type, (int)tiling, SWIGTYPE_p_uint32_t.getCPtr(usage), SWIGTYPE_p_uint32_t.getCPtr(flags), VkImageFormatProperties.getCPtr(pImageFormatProperties));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void vkGetPhysicalDeviceProperties(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, VkPhysicalDeviceProperties pProperties) {
    vulkanPINVOKE.vkGetPhysicalDeviceProperties(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), VkPhysicalDeviceProperties.getCPtr(pProperties));
  }

  public static void vkGetPhysicalDeviceQueueFamilyProperties(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint32_t pQueueFamilyPropertyCount, VkQueueFamilyProperties pQueueFamilyProperties) {
    vulkanPINVOKE.vkGetPhysicalDeviceQueueFamilyProperties(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint32_t.getCPtr(pQueueFamilyPropertyCount), VkQueueFamilyProperties.getCPtr(pQueueFamilyProperties));
  }

  public static void vkGetPhysicalDeviceMemoryProperties(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, VkPhysicalDeviceMemoryProperties pMemoryProperties) {
    vulkanPINVOKE.vkGetPhysicalDeviceMemoryProperties(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), VkPhysicalDeviceMemoryProperties.getCPtr(pMemoryProperties));
  }

  public static SWIGTYPE_p_f_void__void vkGetInstanceProcAddr(SWIGTYPE_p_VkInstance_T instance, string pName) {
    global::System.IntPtr cPtr = vulkanPINVOKE.vkGetInstanceProcAddr(SWIGTYPE_p_VkInstance_T.getCPtr(instance), pName);
    SWIGTYPE_p_f_void__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_void__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_void__void vkGetDeviceProcAddr(SWIGTYPE_p_VkDevice_T device, string pName) {
    global::System.IntPtr cPtr = vulkanPINVOKE.vkGetDeviceProcAddr(SWIGTYPE_p_VkDevice_T.getCPtr(device), pName);
    SWIGTYPE_p_f_void__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_void__void(cPtr, false);
    return ret;
  }

  public static VkResult vkCreateDevice(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, VkDeviceCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_p_VkDevice_T pDevice) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateDevice(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), VkDeviceCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_p_VkDevice_T.getCPtr(pDevice));
    return ret;
  }

  public static void vkDestroyDevice(SWIGTYPE_p_VkDevice_T device, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyDevice(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkAllocationCallbacks.getCPtr(pAllocator));
  }

  public static VkResult vkEnumerateInstanceExtensionProperties(string pLayerName, SWIGTYPE_p_uint32_t pPropertyCount, VkExtensionProperties pProperties) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkEnumerateInstanceExtensionProperties(pLayerName, SWIGTYPE_p_uint32_t.getCPtr(pPropertyCount), VkExtensionProperties.getCPtr(pProperties));
    return ret;
  }

  public static VkResult vkEnumerateDeviceExtensionProperties(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, string pLayerName, SWIGTYPE_p_uint32_t pPropertyCount, VkExtensionProperties pProperties) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkEnumerateDeviceExtensionProperties(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), pLayerName, SWIGTYPE_p_uint32_t.getCPtr(pPropertyCount), VkExtensionProperties.getCPtr(pProperties));
    return ret;
  }

  public static VkResult vkEnumerateInstanceLayerProperties(SWIGTYPE_p_uint32_t pPropertyCount, VkLayerProperties pProperties) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkEnumerateInstanceLayerProperties(SWIGTYPE_p_uint32_t.getCPtr(pPropertyCount), VkLayerProperties.getCPtr(pProperties));
    return ret;
  }

  public static VkResult vkEnumerateDeviceLayerProperties(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint32_t pPropertyCount, VkLayerProperties pProperties) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkEnumerateDeviceLayerProperties(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint32_t.getCPtr(pPropertyCount), VkLayerProperties.getCPtr(pProperties));
    return ret;
  }

  public static void vkGetDeviceQueue(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint32_t queueFamilyIndex, SWIGTYPE_p_uint32_t queueIndex, SWIGTYPE_p_p_VkQueue_T pQueue) {
    vulkanPINVOKE.vkGetDeviceQueue(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint32_t.getCPtr(queueFamilyIndex), SWIGTYPE_p_uint32_t.getCPtr(queueIndex), SWIGTYPE_p_p_VkQueue_T.getCPtr(pQueue));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkQueueSubmit(SWIGTYPE_p_VkQueue_T queue, SWIGTYPE_p_uint32_t submitCount, VkSubmitInfo pSubmits, SWIGTYPE_p_uint64_t fence) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkQueueSubmit(SWIGTYPE_p_VkQueue_T.getCPtr(queue), SWIGTYPE_p_uint32_t.getCPtr(submitCount), VkSubmitInfo.getCPtr(pSubmits), SWIGTYPE_p_uint64_t.getCPtr(fence));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkQueueWaitIdle(SWIGTYPE_p_VkQueue_T queue) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkQueueWaitIdle(SWIGTYPE_p_VkQueue_T.getCPtr(queue));
    return ret;
  }

  public static VkResult vkDeviceWaitIdle(SWIGTYPE_p_VkDevice_T device) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkDeviceWaitIdle(SWIGTYPE_p_VkDevice_T.getCPtr(device));
    return ret;
  }

  public static VkResult vkAllocateMemory(SWIGTYPE_p_VkDevice_T device, VkMemoryAllocateInfo pAllocateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pMemory) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkAllocateMemory(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkMemoryAllocateInfo.getCPtr(pAllocateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pMemory));
    return ret;
  }

  public static void vkFreeMemory(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t memory, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkFreeMemory(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(memory), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkMapMemory(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t memory, SWIGTYPE_p_uint64_t offset, SWIGTYPE_p_uint64_t size, SWIGTYPE_p_uint32_t flags, SWIGTYPE_p_p_void ppData) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkMapMemory(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(memory), SWIGTYPE_p_uint64_t.getCPtr(offset), SWIGTYPE_p_uint64_t.getCPtr(size), SWIGTYPE_p_uint32_t.getCPtr(flags), SWIGTYPE_p_p_void.getCPtr(ppData));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void vkUnmapMemory(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t memory) {
    vulkanPINVOKE.vkUnmapMemory(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(memory));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkFlushMappedMemoryRanges(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint32_t memoryRangeCount, VkMappedMemoryRange pMemoryRanges) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkFlushMappedMemoryRanges(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint32_t.getCPtr(memoryRangeCount), VkMappedMemoryRange.getCPtr(pMemoryRanges));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkInvalidateMappedMemoryRanges(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint32_t memoryRangeCount, VkMappedMemoryRange pMemoryRanges) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkInvalidateMappedMemoryRanges(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint32_t.getCPtr(memoryRangeCount), VkMappedMemoryRange.getCPtr(pMemoryRanges));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void vkGetDeviceMemoryCommitment(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t memory, SWIGTYPE_p_uint64_t pCommittedMemoryInBytes) {
    vulkanPINVOKE.vkGetDeviceMemoryCommitment(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(memory), SWIGTYPE_p_uint64_t.getCPtr(pCommittedMemoryInBytes));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkBindBufferMemory(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t buffer, SWIGTYPE_p_uint64_t memory, SWIGTYPE_p_uint64_t memoryOffset) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkBindBufferMemory(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(buffer), SWIGTYPE_p_uint64_t.getCPtr(memory), SWIGTYPE_p_uint64_t.getCPtr(memoryOffset));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkBindImageMemory(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t image, SWIGTYPE_p_uint64_t memory, SWIGTYPE_p_uint64_t memoryOffset) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkBindImageMemory(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(image), SWIGTYPE_p_uint64_t.getCPtr(memory), SWIGTYPE_p_uint64_t.getCPtr(memoryOffset));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void vkGetBufferMemoryRequirements(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t buffer, VkMemoryRequirements pMemoryRequirements) {
    vulkanPINVOKE.vkGetBufferMemoryRequirements(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(buffer), VkMemoryRequirements.getCPtr(pMemoryRequirements));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkGetImageMemoryRequirements(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t image, VkMemoryRequirements pMemoryRequirements) {
    vulkanPINVOKE.vkGetImageMemoryRequirements(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(image), VkMemoryRequirements.getCPtr(pMemoryRequirements));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkGetImageSparseMemoryRequirements(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t image, SWIGTYPE_p_uint32_t pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements pSparseMemoryRequirements) {
    vulkanPINVOKE.vkGetImageSparseMemoryRequirements(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(image), SWIGTYPE_p_uint32_t.getCPtr(pSparseMemoryRequirementCount), VkSparseImageMemoryRequirements.getCPtr(pSparseMemoryRequirements));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkGetPhysicalDeviceSparseImageFormatProperties(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, SWIGTYPE_p_uint32_t usage, VkImageTiling tiling, SWIGTYPE_p_uint32_t pPropertyCount, VkSparseImageFormatProperties pProperties) {
    vulkanPINVOKE.vkGetPhysicalDeviceSparseImageFormatProperties(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), (int)format, (int)type, (int)samples, SWIGTYPE_p_uint32_t.getCPtr(usage), (int)tiling, SWIGTYPE_p_uint32_t.getCPtr(pPropertyCount), VkSparseImageFormatProperties.getCPtr(pProperties));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkQueueBindSparse(SWIGTYPE_p_VkQueue_T queue, SWIGTYPE_p_uint32_t bindInfoCount, VkBindSparseInfo pBindInfo, SWIGTYPE_p_uint64_t fence) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkQueueBindSparse(SWIGTYPE_p_VkQueue_T.getCPtr(queue), SWIGTYPE_p_uint32_t.getCPtr(bindInfoCount), VkBindSparseInfo.getCPtr(pBindInfo), SWIGTYPE_p_uint64_t.getCPtr(fence));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkCreateFence(SWIGTYPE_p_VkDevice_T device, VkFenceCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pFence) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateFence(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkFenceCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pFence));
    return ret;
  }

  public static void vkDestroyFence(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t fence, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyFence(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(fence), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkResetFences(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint32_t fenceCount, SWIGTYPE_p_uint64_t pFences) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkResetFences(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint32_t.getCPtr(fenceCount), SWIGTYPE_p_uint64_t.getCPtr(pFences));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkGetFenceStatus(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t fence) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetFenceStatus(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(fence));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkWaitForFences(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint32_t fenceCount, SWIGTYPE_p_uint64_t pFences, SWIGTYPE_p_uint32_t waitAll, SWIGTYPE_p_uint64_t timeout) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkWaitForFences(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint32_t.getCPtr(fenceCount), SWIGTYPE_p_uint64_t.getCPtr(pFences), SWIGTYPE_p_uint32_t.getCPtr(waitAll), SWIGTYPE_p_uint64_t.getCPtr(timeout));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkCreateSemaphore(SWIGTYPE_p_VkDevice_T device, VkSemaphoreCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pSemaphore) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateSemaphore(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkSemaphoreCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pSemaphore));
    return ret;
  }

  public static void vkDestroySemaphore(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t semaphore, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroySemaphore(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(semaphore), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreateEvent(SWIGTYPE_p_VkDevice_T device, VkEventCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pEvent) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateEvent(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkEventCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pEvent));
    return ret;
  }

  public static void vkDestroyEvent(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t arg1, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyEvent(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(arg1), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkGetEventStatus(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t arg1) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetEventStatus(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(arg1));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkSetEvent(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t arg1) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkSetEvent(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(arg1));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkResetEvent(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t arg1) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkResetEvent(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(arg1));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkCreateQueryPool(SWIGTYPE_p_VkDevice_T device, VkQueryPoolCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pQueryPool) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateQueryPool(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkQueryPoolCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pQueryPool));
    return ret;
  }

  public static void vkDestroyQueryPool(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t queryPool, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyQueryPool(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(queryPool), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkGetQueryPoolResults(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t queryPool, SWIGTYPE_p_uint32_t firstQuery, SWIGTYPE_p_uint32_t queryCount, uint dataSize, SWIGTYPE_p_void pData, SWIGTYPE_p_uint64_t stride, SWIGTYPE_p_uint32_t flags) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetQueryPoolResults(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(queryPool), SWIGTYPE_p_uint32_t.getCPtr(firstQuery), SWIGTYPE_p_uint32_t.getCPtr(queryCount), dataSize, SWIGTYPE_p_void.getCPtr(pData), SWIGTYPE_p_uint64_t.getCPtr(stride), SWIGTYPE_p_uint32_t.getCPtr(flags));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkCreateBuffer(SWIGTYPE_p_VkDevice_T device, VkBufferCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pBuffer) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateBuffer(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkBufferCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pBuffer));
    return ret;
  }

  public static void vkDestroyBuffer(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t buffer, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyBuffer(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(buffer), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreateBufferView(SWIGTYPE_p_VkDevice_T device, VkBufferViewCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pView) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateBufferView(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkBufferViewCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pView));
    return ret;
  }

  public static void vkDestroyBufferView(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t bufferView, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyBufferView(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(bufferView), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreateImage(SWIGTYPE_p_VkDevice_T device, VkImageCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pImage) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateImage(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkImageCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pImage));
    return ret;
  }

  public static void vkDestroyImage(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t image, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyImage(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(image), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkGetImageSubresourceLayout(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t image, VkImageSubresource pSubresource, VkSubresourceLayout pLayout) {
    vulkanPINVOKE.vkGetImageSubresourceLayout(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(image), VkImageSubresource.getCPtr(pSubresource), VkSubresourceLayout.getCPtr(pLayout));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreateImageView(SWIGTYPE_p_VkDevice_T device, VkImageViewCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pView) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateImageView(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkImageViewCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pView));
    return ret;
  }

  public static void vkDestroyImageView(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t imageView, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyImageView(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(imageView), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreateShaderModule(SWIGTYPE_p_VkDevice_T device, VkShaderModuleCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pShaderModule) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateShaderModule(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkShaderModuleCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pShaderModule));
    return ret;
  }

  public static void vkDestroyShaderModule(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t shaderModule, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyShaderModule(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(shaderModule), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreatePipelineCache(SWIGTYPE_p_VkDevice_T device, VkPipelineCacheCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pPipelineCache) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreatePipelineCache(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkPipelineCacheCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pPipelineCache));
    return ret;
  }

  public static void vkDestroyPipelineCache(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t pipelineCache, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyPipelineCache(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(pipelineCache), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkGetPipelineCacheData(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t pipelineCache, SWIGTYPE_p_size_t pDataSize, SWIGTYPE_p_void pData) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetPipelineCacheData(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(pipelineCache), SWIGTYPE_p_size_t.getCPtr(pDataSize), SWIGTYPE_p_void.getCPtr(pData));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkMergePipelineCaches(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t dstCache, SWIGTYPE_p_uint32_t srcCacheCount, SWIGTYPE_p_uint64_t pSrcCaches) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkMergePipelineCaches(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(dstCache), SWIGTYPE_p_uint32_t.getCPtr(srcCacheCount), SWIGTYPE_p_uint64_t.getCPtr(pSrcCaches));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkCreateGraphicsPipelines(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t pipelineCache, SWIGTYPE_p_uint32_t createInfoCount, VkGraphicsPipelineCreateInfo pCreateInfos, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pPipelines) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateGraphicsPipelines(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(pipelineCache), SWIGTYPE_p_uint32_t.getCPtr(createInfoCount), VkGraphicsPipelineCreateInfo.getCPtr(pCreateInfos), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pPipelines));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkCreateComputePipelines(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t pipelineCache, SWIGTYPE_p_uint32_t createInfoCount, VkComputePipelineCreateInfo pCreateInfos, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pPipelines) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateComputePipelines(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(pipelineCache), SWIGTYPE_p_uint32_t.getCPtr(createInfoCount), VkComputePipelineCreateInfo.getCPtr(pCreateInfos), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pPipelines));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void vkDestroyPipeline(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t pipeline, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyPipeline(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(pipeline), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreatePipelineLayout(SWIGTYPE_p_VkDevice_T device, VkPipelineLayoutCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pPipelineLayout) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreatePipelineLayout(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkPipelineLayoutCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pPipelineLayout));
    return ret;
  }

  public static void vkDestroyPipelineLayout(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t pipelineLayout, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyPipelineLayout(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(pipelineLayout), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreateSampler(SWIGTYPE_p_VkDevice_T device, VkSamplerCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pSampler) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateSampler(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkSamplerCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pSampler));
    return ret;
  }

  public static void vkDestroySampler(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t sampler, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroySampler(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(sampler), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreateDescriptorSetLayout(SWIGTYPE_p_VkDevice_T device, VkDescriptorSetLayoutCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pSetLayout) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateDescriptorSetLayout(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkDescriptorSetLayoutCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pSetLayout));
    return ret;
  }

  public static void vkDestroyDescriptorSetLayout(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t descriptorSetLayout, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyDescriptorSetLayout(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(descriptorSetLayout), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreateDescriptorPool(SWIGTYPE_p_VkDevice_T device, VkDescriptorPoolCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pDescriptorPool) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateDescriptorPool(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkDescriptorPoolCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pDescriptorPool));
    return ret;
  }

  public static void vkDestroyDescriptorPool(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t descriptorPool, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyDescriptorPool(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(descriptorPool), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkResetDescriptorPool(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t descriptorPool, SWIGTYPE_p_uint32_t flags) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkResetDescriptorPool(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(descriptorPool), SWIGTYPE_p_uint32_t.getCPtr(flags));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkAllocateDescriptorSets(SWIGTYPE_p_VkDevice_T device, VkDescriptorSetAllocateInfo pAllocateInfo, SWIGTYPE_p_uint64_t pDescriptorSets) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkAllocateDescriptorSets(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkDescriptorSetAllocateInfo.getCPtr(pAllocateInfo), SWIGTYPE_p_uint64_t.getCPtr(pDescriptorSets));
    return ret;
  }

  public static VkResult vkFreeDescriptorSets(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t descriptorPool, SWIGTYPE_p_uint32_t descriptorSetCount, SWIGTYPE_p_uint64_t pDescriptorSets) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkFreeDescriptorSets(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(descriptorPool), SWIGTYPE_p_uint32_t.getCPtr(descriptorSetCount), SWIGTYPE_p_uint64_t.getCPtr(pDescriptorSets));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void vkUpdateDescriptorSets(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint32_t descriptorWriteCount, VkWriteDescriptorSet pDescriptorWrites, SWIGTYPE_p_uint32_t descriptorCopyCount, VkCopyDescriptorSet pDescriptorCopies) {
    vulkanPINVOKE.vkUpdateDescriptorSets(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint32_t.getCPtr(descriptorWriteCount), VkWriteDescriptorSet.getCPtr(pDescriptorWrites), SWIGTYPE_p_uint32_t.getCPtr(descriptorCopyCount), VkCopyDescriptorSet.getCPtr(pDescriptorCopies));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreateFramebuffer(SWIGTYPE_p_VkDevice_T device, VkFramebufferCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pFramebuffer) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateFramebuffer(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkFramebufferCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pFramebuffer));
    return ret;
  }

  public static void vkDestroyFramebuffer(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t framebuffer, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyFramebuffer(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(framebuffer), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreateRenderPass(SWIGTYPE_p_VkDevice_T device, VkRenderPassCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pRenderPass) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateRenderPass(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkRenderPassCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pRenderPass));
    return ret;
  }

  public static void vkDestroyRenderPass(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t renderPass, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyRenderPass(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(renderPass), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkGetRenderAreaGranularity(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t renderPass, VkExtent2D pGranularity) {
    vulkanPINVOKE.vkGetRenderAreaGranularity(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(renderPass), VkExtent2D.getCPtr(pGranularity));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkCreateCommandPool(SWIGTYPE_p_VkDevice_T device, VkCommandPoolCreateInfo pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pCommandPool) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateCommandPool(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkCommandPoolCreateInfo.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pCommandPool));
    return ret;
  }

  public static void vkDestroyCommandPool(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t commandPool, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyCommandPool(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(commandPool), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkResetCommandPool(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t commandPool, SWIGTYPE_p_uint32_t flags) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkResetCommandPool(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(commandPool), SWIGTYPE_p_uint32_t.getCPtr(flags));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkAllocateCommandBuffers(SWIGTYPE_p_VkDevice_T device, VkCommandBufferAllocateInfo pAllocateInfo, SWIGTYPE_p_p_VkCommandBuffer_T pCommandBuffers) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkAllocateCommandBuffers(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkCommandBufferAllocateInfo.getCPtr(pAllocateInfo), SWIGTYPE_p_p_VkCommandBuffer_T.getCPtr(pCommandBuffers));
    return ret;
  }

  public static void vkFreeCommandBuffers(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t commandPool, SWIGTYPE_p_uint32_t commandBufferCount, SWIGTYPE_p_p_VkCommandBuffer_T pCommandBuffers) {
    vulkanPINVOKE.vkFreeCommandBuffers(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(commandPool), SWIGTYPE_p_uint32_t.getCPtr(commandBufferCount), SWIGTYPE_p_p_VkCommandBuffer_T.getCPtr(pCommandBuffers));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkBeginCommandBuffer(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, VkCommandBufferBeginInfo pBeginInfo) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkBeginCommandBuffer(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), VkCommandBufferBeginInfo.getCPtr(pBeginInfo));
    return ret;
  }

  public static VkResult vkEndCommandBuffer(SWIGTYPE_p_VkCommandBuffer_T commandBuffer) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkEndCommandBuffer(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer));
    return ret;
  }

  public static VkResult vkResetCommandBuffer(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t flags) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkResetCommandBuffer(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(flags));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void vkCmdBindPipeline(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, VkPipelineBindPoint pipelineBindPoint, SWIGTYPE_p_uint64_t pipeline) {
    vulkanPINVOKE.vkCmdBindPipeline(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), (int)pipelineBindPoint, SWIGTYPE_p_uint64_t.getCPtr(pipeline));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdSetViewport(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t firstViewport, SWIGTYPE_p_uint32_t viewportCount, VkViewport pViewports) {
    vulkanPINVOKE.vkCmdSetViewport(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(firstViewport), SWIGTYPE_p_uint32_t.getCPtr(viewportCount), VkViewport.getCPtr(pViewports));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdSetScissor(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t firstScissor, SWIGTYPE_p_uint32_t scissorCount, VkRect2D pScissors) {
    vulkanPINVOKE.vkCmdSetScissor(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(firstScissor), SWIGTYPE_p_uint32_t.getCPtr(scissorCount), VkRect2D.getCPtr(pScissors));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdSetLineWidth(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, float lineWidth) {
    vulkanPINVOKE.vkCmdSetLineWidth(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), lineWidth);
  }

  public static void vkCmdSetDepthBias(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) {
    vulkanPINVOKE.vkCmdSetDepthBias(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
  }

  public static void vkCmdSetBlendConstants(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_float blendConstants) {
    vulkanPINVOKE.vkCmdSetBlendConstants(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_float.getCPtr(blendConstants));
  }

  public static void vkCmdSetDepthBounds(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, float minDepthBounds, float maxDepthBounds) {
    vulkanPINVOKE.vkCmdSetDepthBounds(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), minDepthBounds, maxDepthBounds);
  }

  public static void vkCmdSetStencilCompareMask(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t faceMask, SWIGTYPE_p_uint32_t compareMask) {
    vulkanPINVOKE.vkCmdSetStencilCompareMask(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(faceMask), SWIGTYPE_p_uint32_t.getCPtr(compareMask));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdSetStencilWriteMask(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t faceMask, SWIGTYPE_p_uint32_t writeMask) {
    vulkanPINVOKE.vkCmdSetStencilWriteMask(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(faceMask), SWIGTYPE_p_uint32_t.getCPtr(writeMask));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdSetStencilReference(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t faceMask, SWIGTYPE_p_uint32_t reference) {
    vulkanPINVOKE.vkCmdSetStencilReference(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(faceMask), SWIGTYPE_p_uint32_t.getCPtr(reference));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdBindDescriptorSets(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, VkPipelineBindPoint pipelineBindPoint, SWIGTYPE_p_uint64_t layout, SWIGTYPE_p_uint32_t firstSet, SWIGTYPE_p_uint32_t descriptorSetCount, SWIGTYPE_p_uint64_t pDescriptorSets, SWIGTYPE_p_uint32_t dynamicOffsetCount, SWIGTYPE_p_uint32_t pDynamicOffsets) {
    vulkanPINVOKE.vkCmdBindDescriptorSets(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), (int)pipelineBindPoint, SWIGTYPE_p_uint64_t.getCPtr(layout), SWIGTYPE_p_uint32_t.getCPtr(firstSet), SWIGTYPE_p_uint32_t.getCPtr(descriptorSetCount), SWIGTYPE_p_uint64_t.getCPtr(pDescriptorSets), SWIGTYPE_p_uint32_t.getCPtr(dynamicOffsetCount), SWIGTYPE_p_uint32_t.getCPtr(pDynamicOffsets));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdBindIndexBuffer(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t buffer, SWIGTYPE_p_uint64_t offset, VkIndexType indexType) {
    vulkanPINVOKE.vkCmdBindIndexBuffer(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(buffer), SWIGTYPE_p_uint64_t.getCPtr(offset), (int)indexType);
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdBindVertexBuffers(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t firstBinding, SWIGTYPE_p_uint32_t bindingCount, SWIGTYPE_p_uint64_t pBuffers, SWIGTYPE_p_uint64_t pOffsets) {
    vulkanPINVOKE.vkCmdBindVertexBuffers(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(firstBinding), SWIGTYPE_p_uint32_t.getCPtr(bindingCount), SWIGTYPE_p_uint64_t.getCPtr(pBuffers), SWIGTYPE_p_uint64_t.getCPtr(pOffsets));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdDraw(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t vertexCount, SWIGTYPE_p_uint32_t instanceCount, SWIGTYPE_p_uint32_t firstVertex, SWIGTYPE_p_uint32_t firstInstance) {
    vulkanPINVOKE.vkCmdDraw(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(vertexCount), SWIGTYPE_p_uint32_t.getCPtr(instanceCount), SWIGTYPE_p_uint32_t.getCPtr(firstVertex), SWIGTYPE_p_uint32_t.getCPtr(firstInstance));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdDrawIndexed(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t indexCount, SWIGTYPE_p_uint32_t instanceCount, SWIGTYPE_p_uint32_t firstIndex, SWIGTYPE_p_int32_t vertexOffset, SWIGTYPE_p_uint32_t firstInstance) {
    vulkanPINVOKE.vkCmdDrawIndexed(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(indexCount), SWIGTYPE_p_uint32_t.getCPtr(instanceCount), SWIGTYPE_p_uint32_t.getCPtr(firstIndex), SWIGTYPE_p_int32_t.getCPtr(vertexOffset), SWIGTYPE_p_uint32_t.getCPtr(firstInstance));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdDrawIndirect(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t buffer, SWIGTYPE_p_uint64_t offset, SWIGTYPE_p_uint32_t drawCount, SWIGTYPE_p_uint32_t stride) {
    vulkanPINVOKE.vkCmdDrawIndirect(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(buffer), SWIGTYPE_p_uint64_t.getCPtr(offset), SWIGTYPE_p_uint32_t.getCPtr(drawCount), SWIGTYPE_p_uint32_t.getCPtr(stride));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdDrawIndexedIndirect(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t buffer, SWIGTYPE_p_uint64_t offset, SWIGTYPE_p_uint32_t drawCount, SWIGTYPE_p_uint32_t stride) {
    vulkanPINVOKE.vkCmdDrawIndexedIndirect(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(buffer), SWIGTYPE_p_uint64_t.getCPtr(offset), SWIGTYPE_p_uint32_t.getCPtr(drawCount), SWIGTYPE_p_uint32_t.getCPtr(stride));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdDispatch(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t x, SWIGTYPE_p_uint32_t y, SWIGTYPE_p_uint32_t z) {
    vulkanPINVOKE.vkCmdDispatch(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(x), SWIGTYPE_p_uint32_t.getCPtr(y), SWIGTYPE_p_uint32_t.getCPtr(z));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdDispatchIndirect(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t buffer, SWIGTYPE_p_uint64_t offset) {
    vulkanPINVOKE.vkCmdDispatchIndirect(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(buffer), SWIGTYPE_p_uint64_t.getCPtr(offset));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdCopyBuffer(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t srcBuffer, SWIGTYPE_p_uint64_t dstBuffer, SWIGTYPE_p_uint32_t regionCount, VkBufferCopy pRegions) {
    vulkanPINVOKE.vkCmdCopyBuffer(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(srcBuffer), SWIGTYPE_p_uint64_t.getCPtr(dstBuffer), SWIGTYPE_p_uint32_t.getCPtr(regionCount), VkBufferCopy.getCPtr(pRegions));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdCopyImage(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t srcImage, VkImageLayout srcImageLayout, SWIGTYPE_p_uint64_t dstImage, VkImageLayout dstImageLayout, SWIGTYPE_p_uint32_t regionCount, VkImageCopy pRegions) {
    vulkanPINVOKE.vkCmdCopyImage(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(srcImage), (int)srcImageLayout, SWIGTYPE_p_uint64_t.getCPtr(dstImage), (int)dstImageLayout, SWIGTYPE_p_uint32_t.getCPtr(regionCount), VkImageCopy.getCPtr(pRegions));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdBlitImage(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t srcImage, VkImageLayout srcImageLayout, SWIGTYPE_p_uint64_t dstImage, VkImageLayout dstImageLayout, SWIGTYPE_p_uint32_t regionCount, VkImageBlit pRegions, VkFilter filter) {
    vulkanPINVOKE.vkCmdBlitImage(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(srcImage), (int)srcImageLayout, SWIGTYPE_p_uint64_t.getCPtr(dstImage), (int)dstImageLayout, SWIGTYPE_p_uint32_t.getCPtr(regionCount), VkImageBlit.getCPtr(pRegions), (int)filter);
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdCopyBufferToImage(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t srcBuffer, SWIGTYPE_p_uint64_t dstImage, VkImageLayout dstImageLayout, SWIGTYPE_p_uint32_t regionCount, VkBufferImageCopy pRegions) {
    vulkanPINVOKE.vkCmdCopyBufferToImage(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(srcBuffer), SWIGTYPE_p_uint64_t.getCPtr(dstImage), (int)dstImageLayout, SWIGTYPE_p_uint32_t.getCPtr(regionCount), VkBufferImageCopy.getCPtr(pRegions));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdCopyImageToBuffer(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t srcImage, VkImageLayout srcImageLayout, SWIGTYPE_p_uint64_t dstBuffer, SWIGTYPE_p_uint32_t regionCount, VkBufferImageCopy pRegions) {
    vulkanPINVOKE.vkCmdCopyImageToBuffer(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(srcImage), (int)srcImageLayout, SWIGTYPE_p_uint64_t.getCPtr(dstBuffer), SWIGTYPE_p_uint32_t.getCPtr(regionCount), VkBufferImageCopy.getCPtr(pRegions));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdUpdateBuffer(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t dstBuffer, SWIGTYPE_p_uint64_t dstOffset, SWIGTYPE_p_uint64_t dataSize, SWIGTYPE_p_uint32_t pData) {
    vulkanPINVOKE.vkCmdUpdateBuffer(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(dstBuffer), SWIGTYPE_p_uint64_t.getCPtr(dstOffset), SWIGTYPE_p_uint64_t.getCPtr(dataSize), SWIGTYPE_p_uint32_t.getCPtr(pData));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdFillBuffer(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t dstBuffer, SWIGTYPE_p_uint64_t dstOffset, SWIGTYPE_p_uint64_t size, SWIGTYPE_p_uint32_t data) {
    vulkanPINVOKE.vkCmdFillBuffer(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(dstBuffer), SWIGTYPE_p_uint64_t.getCPtr(dstOffset), SWIGTYPE_p_uint64_t.getCPtr(size), SWIGTYPE_p_uint32_t.getCPtr(data));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdClearColorImage(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t image, VkImageLayout imageLayout, VkClearColorValue pColor, SWIGTYPE_p_uint32_t rangeCount, VkImageSubresourceRange pRanges) {
    vulkanPINVOKE.vkCmdClearColorImage(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(image), (int)imageLayout, VkClearColorValue.getCPtr(pColor), SWIGTYPE_p_uint32_t.getCPtr(rangeCount), VkImageSubresourceRange.getCPtr(pRanges));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdClearDepthStencilImage(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t image, VkImageLayout imageLayout, VkClearDepthStencilValue pDepthStencil, SWIGTYPE_p_uint32_t rangeCount, VkImageSubresourceRange pRanges) {
    vulkanPINVOKE.vkCmdClearDepthStencilImage(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(image), (int)imageLayout, VkClearDepthStencilValue.getCPtr(pDepthStencil), SWIGTYPE_p_uint32_t.getCPtr(rangeCount), VkImageSubresourceRange.getCPtr(pRanges));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdClearAttachments(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t attachmentCount, VkClearAttachment pAttachments, SWIGTYPE_p_uint32_t rectCount, VkClearRect pRects) {
    vulkanPINVOKE.vkCmdClearAttachments(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(attachmentCount), VkClearAttachment.getCPtr(pAttachments), SWIGTYPE_p_uint32_t.getCPtr(rectCount), VkClearRect.getCPtr(pRects));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdResolveImage(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t srcImage, VkImageLayout srcImageLayout, SWIGTYPE_p_uint64_t dstImage, VkImageLayout dstImageLayout, SWIGTYPE_p_uint32_t regionCount, VkImageResolve pRegions) {
    vulkanPINVOKE.vkCmdResolveImage(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(srcImage), (int)srcImageLayout, SWIGTYPE_p_uint64_t.getCPtr(dstImage), (int)dstImageLayout, SWIGTYPE_p_uint32_t.getCPtr(regionCount), VkImageResolve.getCPtr(pRegions));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdSetEvent(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t arg1, SWIGTYPE_p_uint32_t stageMask) {
    vulkanPINVOKE.vkCmdSetEvent(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(arg1), SWIGTYPE_p_uint32_t.getCPtr(stageMask));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdResetEvent(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t arg1, SWIGTYPE_p_uint32_t stageMask) {
    vulkanPINVOKE.vkCmdResetEvent(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(arg1), SWIGTYPE_p_uint32_t.getCPtr(stageMask));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdWaitEvents(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t eventCount, SWIGTYPE_p_uint64_t pEvents, SWIGTYPE_p_uint32_t srcStageMask, SWIGTYPE_p_uint32_t dstStageMask, SWIGTYPE_p_uint32_t memoryBarrierCount, VkMemoryBarrier pMemoryBarriers, SWIGTYPE_p_uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier pBufferMemoryBarriers, SWIGTYPE_p_uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier pImageMemoryBarriers) {
    vulkanPINVOKE.vkCmdWaitEvents(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(eventCount), SWIGTYPE_p_uint64_t.getCPtr(pEvents), SWIGTYPE_p_uint32_t.getCPtr(srcStageMask), SWIGTYPE_p_uint32_t.getCPtr(dstStageMask), SWIGTYPE_p_uint32_t.getCPtr(memoryBarrierCount), VkMemoryBarrier.getCPtr(pMemoryBarriers), SWIGTYPE_p_uint32_t.getCPtr(bufferMemoryBarrierCount), VkBufferMemoryBarrier.getCPtr(pBufferMemoryBarriers), SWIGTYPE_p_uint32_t.getCPtr(imageMemoryBarrierCount), VkImageMemoryBarrier.getCPtr(pImageMemoryBarriers));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdPipelineBarrier(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t srcStageMask, SWIGTYPE_p_uint32_t dstStageMask, SWIGTYPE_p_uint32_t dependencyFlags, SWIGTYPE_p_uint32_t memoryBarrierCount, VkMemoryBarrier pMemoryBarriers, SWIGTYPE_p_uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier pBufferMemoryBarriers, SWIGTYPE_p_uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier pImageMemoryBarriers) {
    vulkanPINVOKE.vkCmdPipelineBarrier(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(srcStageMask), SWIGTYPE_p_uint32_t.getCPtr(dstStageMask), SWIGTYPE_p_uint32_t.getCPtr(dependencyFlags), SWIGTYPE_p_uint32_t.getCPtr(memoryBarrierCount), VkMemoryBarrier.getCPtr(pMemoryBarriers), SWIGTYPE_p_uint32_t.getCPtr(bufferMemoryBarrierCount), VkBufferMemoryBarrier.getCPtr(pBufferMemoryBarriers), SWIGTYPE_p_uint32_t.getCPtr(imageMemoryBarrierCount), VkImageMemoryBarrier.getCPtr(pImageMemoryBarriers));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdBeginQuery(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t queryPool, SWIGTYPE_p_uint32_t query, SWIGTYPE_p_uint32_t flags) {
    vulkanPINVOKE.vkCmdBeginQuery(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(queryPool), SWIGTYPE_p_uint32_t.getCPtr(query), SWIGTYPE_p_uint32_t.getCPtr(flags));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdEndQuery(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t queryPool, SWIGTYPE_p_uint32_t query) {
    vulkanPINVOKE.vkCmdEndQuery(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(queryPool), SWIGTYPE_p_uint32_t.getCPtr(query));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdResetQueryPool(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t queryPool, SWIGTYPE_p_uint32_t firstQuery, SWIGTYPE_p_uint32_t queryCount) {
    vulkanPINVOKE.vkCmdResetQueryPool(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(queryPool), SWIGTYPE_p_uint32_t.getCPtr(firstQuery), SWIGTYPE_p_uint32_t.getCPtr(queryCount));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdWriteTimestamp(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, VkPipelineStageFlagBits pipelineStage, SWIGTYPE_p_uint64_t queryPool, SWIGTYPE_p_uint32_t query) {
    vulkanPINVOKE.vkCmdWriteTimestamp(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), (int)pipelineStage, SWIGTYPE_p_uint64_t.getCPtr(queryPool), SWIGTYPE_p_uint32_t.getCPtr(query));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdCopyQueryPoolResults(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t queryPool, SWIGTYPE_p_uint32_t firstQuery, SWIGTYPE_p_uint32_t queryCount, SWIGTYPE_p_uint64_t dstBuffer, SWIGTYPE_p_uint64_t dstOffset, SWIGTYPE_p_uint64_t stride, SWIGTYPE_p_uint32_t flags) {
    vulkanPINVOKE.vkCmdCopyQueryPoolResults(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(queryPool), SWIGTYPE_p_uint32_t.getCPtr(firstQuery), SWIGTYPE_p_uint32_t.getCPtr(queryCount), SWIGTYPE_p_uint64_t.getCPtr(dstBuffer), SWIGTYPE_p_uint64_t.getCPtr(dstOffset), SWIGTYPE_p_uint64_t.getCPtr(stride), SWIGTYPE_p_uint32_t.getCPtr(flags));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdPushConstants(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint64_t layout, SWIGTYPE_p_uint32_t stageFlags, SWIGTYPE_p_uint32_t offset, SWIGTYPE_p_uint32_t size, SWIGTYPE_p_void pValues) {
    vulkanPINVOKE.vkCmdPushConstants(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint64_t.getCPtr(layout), SWIGTYPE_p_uint32_t.getCPtr(stageFlags), SWIGTYPE_p_uint32_t.getCPtr(offset), SWIGTYPE_p_uint32_t.getCPtr(size), SWIGTYPE_p_void.getCPtr(pValues));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkCmdBeginRenderPass(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, VkRenderPassBeginInfo pRenderPassBegin, VkSubpassContents contents) {
    vulkanPINVOKE.vkCmdBeginRenderPass(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), VkRenderPassBeginInfo.getCPtr(pRenderPassBegin), (int)contents);
  }

  public static void vkCmdNextSubpass(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, VkSubpassContents contents) {
    vulkanPINVOKE.vkCmdNextSubpass(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), (int)contents);
  }

  public static void vkCmdEndRenderPass(SWIGTYPE_p_VkCommandBuffer_T commandBuffer) {
    vulkanPINVOKE.vkCmdEndRenderPass(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer));
  }

  public static void vkCmdExecuteCommands(SWIGTYPE_p_VkCommandBuffer_T commandBuffer, SWIGTYPE_p_uint32_t commandBufferCount, SWIGTYPE_p_p_VkCommandBuffer_T pCommandBuffers) {
    vulkanPINVOKE.vkCmdExecuteCommands(SWIGTYPE_p_VkCommandBuffer_T.getCPtr(commandBuffer), SWIGTYPE_p_uint32_t.getCPtr(commandBufferCount), SWIGTYPE_p_p_VkCommandBuffer_T.getCPtr(pCommandBuffers));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkDestroySurfaceKHR(SWIGTYPE_p_VkInstance_T instance, SWIGTYPE_p_uint64_t surface, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroySurfaceKHR(SWIGTYPE_p_VkInstance_T.getCPtr(instance), SWIGTYPE_p_uint64_t.getCPtr(surface), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkGetPhysicalDeviceSurfaceSupportKHR(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint32_t queueFamilyIndex, SWIGTYPE_p_uint64_t surface, SWIGTYPE_p_uint32_t pSupported) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetPhysicalDeviceSurfaceSupportKHR(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint32_t.getCPtr(queueFamilyIndex), SWIGTYPE_p_uint64_t.getCPtr(surface), SWIGTYPE_p_uint32_t.getCPtr(pSupported));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint64_t surface, VkSurfaceCapabilitiesKHR pSurfaceCapabilities) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint64_t.getCPtr(surface), VkSurfaceCapabilitiesKHR.getCPtr(pSurfaceCapabilities));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint64_t surface, SWIGTYPE_p_uint32_t pSurfaceFormatCount, VkSurfaceFormatKHR pSurfaceFormats) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetPhysicalDeviceSurfaceFormatsKHR(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint64_t.getCPtr(surface), SWIGTYPE_p_uint32_t.getCPtr(pSurfaceFormatCount), VkSurfaceFormatKHR.getCPtr(pSurfaceFormats));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint64_t surface, SWIGTYPE_p_uint32_t pPresentModeCount, SWIGTYPE_p_VkPresentModeKHR pPresentModes) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetPhysicalDeviceSurfacePresentModesKHR(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint64_t.getCPtr(surface), SWIGTYPE_p_uint32_t.getCPtr(pPresentModeCount), SWIGTYPE_p_VkPresentModeKHR.getCPtr(pPresentModes));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkCreateSwapchainKHR(SWIGTYPE_p_VkDevice_T device, VkSwapchainCreateInfoKHR pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pSwapchain) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateSwapchainKHR(SWIGTYPE_p_VkDevice_T.getCPtr(device), VkSwapchainCreateInfoKHR.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pSwapchain));
    return ret;
  }

  public static void vkDestroySwapchainKHR(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t swapchain, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroySwapchainKHR(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(swapchain), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VkResult vkGetSwapchainImagesKHR(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t swapchain, SWIGTYPE_p_uint32_t pSwapchainImageCount, SWIGTYPE_p_uint64_t pSwapchainImages) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetSwapchainImagesKHR(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(swapchain), SWIGTYPE_p_uint32_t.getCPtr(pSwapchainImageCount), SWIGTYPE_p_uint64_t.getCPtr(pSwapchainImages));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkAcquireNextImageKHR(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint64_t swapchain, SWIGTYPE_p_uint64_t timeout, SWIGTYPE_p_uint64_t semaphore, SWIGTYPE_p_uint64_t fence, SWIGTYPE_p_uint32_t pImageIndex) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkAcquireNextImageKHR(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint64_t.getCPtr(swapchain), SWIGTYPE_p_uint64_t.getCPtr(timeout), SWIGTYPE_p_uint64_t.getCPtr(semaphore), SWIGTYPE_p_uint64_t.getCPtr(fence), SWIGTYPE_p_uint32_t.getCPtr(pImageIndex));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkQueuePresentKHR(SWIGTYPE_p_VkQueue_T queue, VkPresentInfoKHR pPresentInfo) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkQueuePresentKHR(SWIGTYPE_p_VkQueue_T.getCPtr(queue), VkPresentInfoKHR.getCPtr(pPresentInfo));
    return ret;
  }

  public static VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint32_t pPropertyCount, VkDisplayPropertiesKHR pProperties) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetPhysicalDeviceDisplayPropertiesKHR(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint32_t.getCPtr(pPropertyCount), VkDisplayPropertiesKHR.getCPtr(pProperties));
    return ret;
  }

  public static VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint32_t pPropertyCount, VkDisplayPlanePropertiesKHR pProperties) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetPhysicalDeviceDisplayPlanePropertiesKHR(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint32_t.getCPtr(pPropertyCount), VkDisplayPlanePropertiesKHR.getCPtr(pProperties));
    return ret;
  }

  public static VkResult vkGetDisplayPlaneSupportedDisplaysKHR(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint32_t planeIndex, SWIGTYPE_p_uint32_t pDisplayCount, SWIGTYPE_p_uint64_t pDisplays) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetDisplayPlaneSupportedDisplaysKHR(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint32_t.getCPtr(planeIndex), SWIGTYPE_p_uint32_t.getCPtr(pDisplayCount), SWIGTYPE_p_uint64_t.getCPtr(pDisplays));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkGetDisplayModePropertiesKHR(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint64_t display, SWIGTYPE_p_uint32_t pPropertyCount, VkDisplayModePropertiesKHR pProperties) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetDisplayModePropertiesKHR(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint64_t.getCPtr(display), SWIGTYPE_p_uint32_t.getCPtr(pPropertyCount), VkDisplayModePropertiesKHR.getCPtr(pProperties));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkCreateDisplayModeKHR(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint64_t display, VkDisplayModeCreateInfoKHR pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pMode) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateDisplayModeKHR(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint64_t.getCPtr(display), VkDisplayModeCreateInfoKHR.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pMode));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkGetDisplayPlaneCapabilitiesKHR(SWIGTYPE_p_VkPhysicalDevice_T physicalDevice, SWIGTYPE_p_uint64_t mode, SWIGTYPE_p_uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR pCapabilities) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkGetDisplayPlaneCapabilitiesKHR(SWIGTYPE_p_VkPhysicalDevice_T.getCPtr(physicalDevice), SWIGTYPE_p_uint64_t.getCPtr(mode), SWIGTYPE_p_uint32_t.getCPtr(planeIndex), VkDisplayPlaneCapabilitiesKHR.getCPtr(pCapabilities));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkCreateDisplayPlaneSurfaceKHR(SWIGTYPE_p_VkInstance_T instance, VkDisplaySurfaceCreateInfoKHR pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pSurface) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateDisplayPlaneSurfaceKHR(SWIGTYPE_p_VkInstance_T.getCPtr(instance), VkDisplaySurfaceCreateInfoKHR.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pSurface));
    return ret;
  }

  public static VkResult vkCreateSharedSwapchainsKHR(SWIGTYPE_p_VkDevice_T device, SWIGTYPE_p_uint32_t swapchainCount, VkSwapchainCreateInfoKHR pCreateInfos, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pSwapchains) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateSharedSwapchainsKHR(SWIGTYPE_p_VkDevice_T.getCPtr(device), SWIGTYPE_p_uint32_t.getCPtr(swapchainCount), VkSwapchainCreateInfoKHR.getCPtr(pCreateInfos), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pSwapchains));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VkResult vkCreateDebugReportCallbackEXT(SWIGTYPE_p_VkInstance_T instance, VkDebugReportCallbackCreateInfoEXT pCreateInfo, VkAllocationCallbacks pAllocator, SWIGTYPE_p_uint64_t pCallback) {
    VkResult ret = (VkResult)vulkanPINVOKE.vkCreateDebugReportCallbackEXT(SWIGTYPE_p_VkInstance_T.getCPtr(instance), VkDebugReportCallbackCreateInfoEXT.getCPtr(pCreateInfo), VkAllocationCallbacks.getCPtr(pAllocator), SWIGTYPE_p_uint64_t.getCPtr(pCallback));
    return ret;
  }

  public static void vkDestroyDebugReportCallbackEXT(SWIGTYPE_p_VkInstance_T instance, SWIGTYPE_p_uint64_t callback, VkAllocationCallbacks pAllocator) {
    vulkanPINVOKE.vkDestroyDebugReportCallbackEXT(SWIGTYPE_p_VkInstance_T.getCPtr(instance), SWIGTYPE_p_uint64_t.getCPtr(callback), VkAllocationCallbacks.getCPtr(pAllocator));
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void vkDebugReportMessageEXT(SWIGTYPE_p_VkInstance_T instance, SWIGTYPE_p_uint32_t flags, VkDebugReportObjectTypeEXT objectType, SWIGTYPE_p_uint64_t arg3, uint location, SWIGTYPE_p_int32_t messageCode, string pLayerPrefix, string pMessage) {
    vulkanPINVOKE.vkDebugReportMessageEXT(SWIGTYPE_p_VkInstance_T.getCPtr(instance), SWIGTYPE_p_uint32_t.getCPtr(flags), (int)objectType, SWIGTYPE_p_uint64_t.getCPtr(arg3), location, SWIGTYPE_p_int32_t.getCPtr(messageCode), pLayerPrefix, pMessage);
    if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int __vulkan_h_ = vulkanPINVOKE.__vulkan_h__get();
  public static readonly int VK_VERSION_1_0 = vulkanPINVOKE.VK_VERSION_1_0_get();
  public static readonly int VK_API_VERSION = vulkanPINVOKE.VK_API_VERSION_get();
  public static readonly int VK_NULL_HANDLE = vulkanPINVOKE.VK_NULL_HANDLE_get();
  public static readonly double VK_LOD_CLAMP_NONE = vulkanPINVOKE.VK_LOD_CLAMP_NONE_get();
  public static readonly uint VK_REMAINING_MIP_LEVELS = vulkanPINVOKE.VK_REMAINING_MIP_LEVELS_get();
  public static readonly uint VK_REMAINING_ARRAY_LAYERS = vulkanPINVOKE.VK_REMAINING_ARRAY_LAYERS_get();
  public static readonly ulong VK_WHOLE_SIZE = vulkanPINVOKE.VK_WHOLE_SIZE_get();
  public static readonly uint VK_ATTACHMENT_UNUSED = vulkanPINVOKE.VK_ATTACHMENT_UNUSED_get();
  public static readonly int VK_TRUE = vulkanPINVOKE.VK_TRUE_get();
  public static readonly int VK_FALSE = vulkanPINVOKE.VK_FALSE_get();
  public static readonly uint VK_QUEUE_FAMILY_IGNORED = vulkanPINVOKE.VK_QUEUE_FAMILY_IGNORED_get();
  public static readonly uint VK_SUBPASS_EXTERNAL = vulkanPINVOKE.VK_SUBPASS_EXTERNAL_get();
  public static readonly int VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = vulkanPINVOKE.VK_MAX_PHYSICAL_DEVICE_NAME_SIZE_get();
  public static readonly int VK_UUID_SIZE = vulkanPINVOKE.VK_UUID_SIZE_get();
  public static readonly int VK_MAX_MEMORY_TYPES = vulkanPINVOKE.VK_MAX_MEMORY_TYPES_get();
  public static readonly int VK_MAX_MEMORY_HEAPS = vulkanPINVOKE.VK_MAX_MEMORY_HEAPS_get();
  public static readonly int VK_MAX_EXTENSION_NAME_SIZE = vulkanPINVOKE.VK_MAX_EXTENSION_NAME_SIZE_get();
  public static readonly int VK_MAX_DESCRIPTION_SIZE = vulkanPINVOKE.VK_MAX_DESCRIPTION_SIZE_get();
  public static readonly int VK_KHR_surface = vulkanPINVOKE.VK_KHR_surface_get();
  public static readonly int VK_KHR_SURFACE_SPEC_VERSION = vulkanPINVOKE.VK_KHR_SURFACE_SPEC_VERSION_get();
  public static readonly string VK_KHR_SURFACE_EXTENSION_NAME = vulkanPINVOKE.VK_KHR_SURFACE_EXTENSION_NAME_get();
  public static readonly int VK_KHR_swapchain = vulkanPINVOKE.VK_KHR_swapchain_get();
  public static readonly int VK_KHR_SWAPCHAIN_SPEC_VERSION = vulkanPINVOKE.VK_KHR_SWAPCHAIN_SPEC_VERSION_get();
  public static readonly string VK_KHR_SWAPCHAIN_EXTENSION_NAME = vulkanPINVOKE.VK_KHR_SWAPCHAIN_EXTENSION_NAME_get();
  public static readonly int VK_KHR_display = vulkanPINVOKE.VK_KHR_display_get();
  public static readonly int VK_KHR_DISPLAY_SPEC_VERSION = vulkanPINVOKE.VK_KHR_DISPLAY_SPEC_VERSION_get();
  public static readonly string VK_KHR_DISPLAY_EXTENSION_NAME = vulkanPINVOKE.VK_KHR_DISPLAY_EXTENSION_NAME_get();
  public static readonly int VK_KHR_display_swapchain = vulkanPINVOKE.VK_KHR_display_swapchain_get();
  public static readonly int VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = vulkanPINVOKE.VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION_get();
  public static readonly string VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = vulkanPINVOKE.VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME_get();
  public static readonly int VK_EXT_debug_report = vulkanPINVOKE.VK_EXT_debug_report_get();
  public static readonly int VK_EXT_DEBUG_REPORT_SPEC_VERSION = vulkanPINVOKE.VK_EXT_DEBUG_REPORT_SPEC_VERSION_get();
  public static readonly string VK_EXT_DEBUG_REPORT_EXTENSION_NAME = vulkanPINVOKE.VK_EXT_DEBUG_REPORT_EXTENSION_NAME_get();
}
