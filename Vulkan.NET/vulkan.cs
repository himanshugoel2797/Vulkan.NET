
public enum VkPipelineCacheHeaderVersion {
    
    /// VK_PIPELINE_CACHE_HEADER_VERSION_ONE -> 1
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
    
    /// VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE -> VK_PIPELINE_CACHE_HEADER_VERSION_ONE
    VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_ONE,
    
    /// VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE -> VK_PIPELINE_CACHE_HEADER_VERSION_ONE
    VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_ONE,
    
    /// VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE -> (VK_PIPELINE_CACHE_HEADER_VERSION_ONE-VK_PIPELINE_CACHE_HEADER_VERSION_ONE+1)
    VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE = (VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_ONE 
                - (VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_ONE + 1)),
    
    /// VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM -> 0x7FFFFFFF
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647,
}

public enum VkResult {
    
    /// VK_SUCCESS -> 0
    VK_SUCCESS = 0,
    
    /// VK_NOT_READY -> 1
    VK_NOT_READY = 1,
    
    /// VK_TIMEOUT -> 2
    VK_TIMEOUT = 2,
    
    /// VK_EVENT_SET -> 3
    VK_EVENT_SET = 3,
    
    /// VK_EVENT_RESET -> 4
    VK_EVENT_RESET = 4,
    
    /// VK_INCOMPLETE -> 5
    VK_INCOMPLETE = 5,
    
    /// VK_ERROR_OUT_OF_HOST_MEMORY -> -1
    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
    
    /// VK_ERROR_OUT_OF_DEVICE_MEMORY -> -2
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
    
    /// VK_ERROR_INITIALIZATION_FAILED -> -3
    VK_ERROR_INITIALIZATION_FAILED = -3,
    
    /// VK_ERROR_DEVICE_LOST -> -4
    VK_ERROR_DEVICE_LOST = -4,
    
    /// VK_ERROR_MEMORY_MAP_FAILED -> -5
    VK_ERROR_MEMORY_MAP_FAILED = -5,
    
    /// VK_ERROR_LAYER_NOT_PRESENT -> -6
    VK_ERROR_LAYER_NOT_PRESENT = -6,
    
    /// VK_ERROR_EXTENSION_NOT_PRESENT -> -7
    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
    
    /// VK_ERROR_FEATURE_NOT_PRESENT -> -8
    VK_ERROR_FEATURE_NOT_PRESENT = -8,
    
    /// VK_ERROR_INCOMPATIBLE_DRIVER -> -9
    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
    
    /// VK_ERROR_TOO_MANY_OBJECTS -> -10
    VK_ERROR_TOO_MANY_OBJECTS = -10,
    
    /// VK_ERROR_FORMAT_NOT_SUPPORTED -> -11
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
    
    /// VK_ERROR_SURFACE_LOST_KHR -> -1000000000
    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
    
    /// VK_ERROR_NATIVE_WINDOW_IN_USE_KHR -> -1000000001
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    
    /// VK_SUBOPTIMAL_KHR -> 1000001003
    VK_SUBOPTIMAL_KHR = 1000001003,
    
    /// VK_ERROR_OUT_OF_DATE_KHR -> -1000001004
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
    
    /// VK_ERROR_INCOMPATIBLE_DISPLAY_KHR -> -1000003001
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    
    /// VK_ERROR_VALIDATION_FAILED_EXT -> -1000011001
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
    
    /// VK_RESULT_BEGIN_RANGE -> VK_ERROR_FORMAT_NOT_SUPPORTED
    VK_RESULT_BEGIN_RANGE = VkResult.VK_ERROR_FORMAT_NOT_SUPPORTED,
    
    /// VK_RESULT_END_RANGE -> VK_INCOMPLETE
    VK_RESULT_END_RANGE = VkResult.VK_INCOMPLETE,
    
    /// VK_RESULT_RANGE_SIZE -> (VK_INCOMPLETE-VK_ERROR_FORMAT_NOT_SUPPORTED+1)
    VK_RESULT_RANGE_SIZE = (VkResult.VK_INCOMPLETE 
                - (VkResult.VK_ERROR_FORMAT_NOT_SUPPORTED + 1)),
    
    /// VK_RESULT_MAX_ENUM -> 0x7FFFFFFF
    VK_RESULT_MAX_ENUM = 2147483647,
}

public enum VkStructureType {
    
    /// VK_STRUCTURE_TYPE_APPLICATION_INFO -> 0
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
    
    /// VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO -> 1
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
    
    /// VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO -> 2
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
    
    /// VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO -> 3
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
    
    /// VK_STRUCTURE_TYPE_SUBMIT_INFO -> 4
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
    
    /// VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO -> 5
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
    
    /// VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE -> 6
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
    
    /// VK_STRUCTURE_TYPE_BIND_SPARSE_INFO -> 7
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
    
    /// VK_STRUCTURE_TYPE_FENCE_CREATE_INFO -> 8
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
    
    /// VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO -> 9
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
    
    /// VK_STRUCTURE_TYPE_EVENT_CREATE_INFO -> 10
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
    
    /// VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO -> 11
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
    
    /// VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO -> 12
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
    
    /// VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO -> 13
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
    
    /// VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO -> 14
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
    
    /// VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO -> 15
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
    
    /// VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO -> 16
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO -> 17
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO -> 18
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO -> 19
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO -> 20
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO -> 21
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO -> 22
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO -> 23
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO -> 24
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO -> 25
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO -> 26
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO -> 27
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    
    /// VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO -> 28
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    
    /// VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO -> 29
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
    
    /// VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO -> 30
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
    
    /// VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO -> 31
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
    
    /// VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO -> 32
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    
    /// VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO -> 33
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
    
    /// VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO -> 34
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    
    /// VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET -> 35
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
    
    /// VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET -> 36
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
    
    /// VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO -> 37
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
    
    /// VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO -> 38
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
    
    /// VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO -> 39
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
    
    /// VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO -> 40
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    
    /// VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO -> 41
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    
    /// VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO -> 42
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
    
    /// VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO -> 43
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
    
    /// VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER -> 44
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
    
    /// VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER -> 45
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
    
    /// VK_STRUCTURE_TYPE_MEMORY_BARRIER -> 46
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
    
    /// VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO -> 47
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
    
    /// VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO -> 48
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
    
    /// VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR -> 1000001000
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    
    /// VK_STRUCTURE_TYPE_PRESENT_INFO_KHR -> 1000001001
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
    
    /// VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR -> 1000002000
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    
    /// VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR -> 1000002001
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    
    /// VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR -> 1000003000
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
    
    /// VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR -> 1000004000
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    
    /// VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR -> 1000005000
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    
    /// VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR -> 1000006000
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    
    /// VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR -> 1000007000
    VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR = 1000007000,
    
    /// VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR -> 1000008000
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    
    /// VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR -> 1000009000
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    
    /// VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT -> 1000011000
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000,
    
    /// VK_STRUCTURE_TYPE_BEGIN_RANGE -> VK_STRUCTURE_TYPE_APPLICATION_INFO
    VK_STRUCTURE_TYPE_BEGIN_RANGE = VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO,
    
    /// VK_STRUCTURE_TYPE_END_RANGE -> VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO
    VK_STRUCTURE_TYPE_END_RANGE = VkStructureType.VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,
    
    /// VK_STRUCTURE_TYPE_RANGE_SIZE -> (VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO-VK_STRUCTURE_TYPE_APPLICATION_INFO+1)
    VK_STRUCTURE_TYPE_RANGE_SIZE = (VkStructureType.VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO 
                - (VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO + 1)),
    
    /// VK_STRUCTURE_TYPE_MAX_ENUM -> 0x7FFFFFFF
    VK_STRUCTURE_TYPE_MAX_ENUM = 2147483647,
}

public enum VkSystemAllocationScope {
    
    /// VK_SYSTEM_ALLOCATION_SCOPE_COMMAND -> 0
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
    
    /// VK_SYSTEM_ALLOCATION_SCOPE_OBJECT -> 1
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
    
    /// VK_SYSTEM_ALLOCATION_SCOPE_CACHE -> 2
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
    
    /// VK_SYSTEM_ALLOCATION_SCOPE_DEVICE -> 3
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
    
    /// VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE -> 4
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
    
    /// VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE -> VK_SYSTEM_ALLOCATION_SCOPE_COMMAND
    VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_COMMAND,
    
    /// VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE -> VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE
    VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE,
    
    /// VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE -> (VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE-VK_SYSTEM_ALLOCATION_SCOPE_COMMAND+1)
    VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE = (VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE 
                - (VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_COMMAND + 1)),
    
    /// VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM -> 0x7FFFFFFF
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647,
}

public enum VkInternalAllocationType {
    
    /// VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE -> 0
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
    
    /// VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE -> VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE
    VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,
    
    /// VK_INTERNAL_ALLOCATION_TYPE_END_RANGE -> VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE
    VK_INTERNAL_ALLOCATION_TYPE_END_RANGE = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,
    
    /// VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE -> (VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE-VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE+1)
    VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE = (VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE 
                - (VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE + 1)),
    
    /// VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM -> 0x7FFFFFFF
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647,
}

public enum VkFormat {
    
    /// VK_FORMAT_UNDEFINED -> 0
    VK_FORMAT_UNDEFINED = 0,
    
    /// VK_FORMAT_R4G4_UNORM_PACK8 -> 1
    VK_FORMAT_R4G4_UNORM_PACK8 = 1,
    
    /// VK_FORMAT_R4G4B4A4_UNORM_PACK16 -> 2
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
    
    /// VK_FORMAT_B4G4R4A4_UNORM_PACK16 -> 3
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
    
    /// VK_FORMAT_R5G6B5_UNORM_PACK16 -> 4
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
    
    /// VK_FORMAT_B5G6R5_UNORM_PACK16 -> 5
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
    
    /// VK_FORMAT_R5G5B5A1_UNORM_PACK16 -> 6
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
    
    /// VK_FORMAT_B5G5R5A1_UNORM_PACK16 -> 7
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
    
    /// VK_FORMAT_A1R5G5B5_UNORM_PACK16 -> 8
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
    
    /// VK_FORMAT_R8_UNORM -> 9
    VK_FORMAT_R8_UNORM = 9,
    
    /// VK_FORMAT_R8_SNORM -> 10
    VK_FORMAT_R8_SNORM = 10,
    
    /// VK_FORMAT_R8_USCALED -> 11
    VK_FORMAT_R8_USCALED = 11,
    
    /// VK_FORMAT_R8_SSCALED -> 12
    VK_FORMAT_R8_SSCALED = 12,
    
    /// VK_FORMAT_R8_UINT -> 13
    VK_FORMAT_R8_UINT = 13,
    
    /// VK_FORMAT_R8_SINT -> 14
    VK_FORMAT_R8_SINT = 14,
    
    /// VK_FORMAT_R8_SRGB -> 15
    VK_FORMAT_R8_SRGB = 15,
    
    /// VK_FORMAT_R8G8_UNORM -> 16
    VK_FORMAT_R8G8_UNORM = 16,
    
    /// VK_FORMAT_R8G8_SNORM -> 17
    VK_FORMAT_R8G8_SNORM = 17,
    
    /// VK_FORMAT_R8G8_USCALED -> 18
    VK_FORMAT_R8G8_USCALED = 18,
    
    /// VK_FORMAT_R8G8_SSCALED -> 19
    VK_FORMAT_R8G8_SSCALED = 19,
    
    /// VK_FORMAT_R8G8_UINT -> 20
    VK_FORMAT_R8G8_UINT = 20,
    
    /// VK_FORMAT_R8G8_SINT -> 21
    VK_FORMAT_R8G8_SINT = 21,
    
    /// VK_FORMAT_R8G8_SRGB -> 22
    VK_FORMAT_R8G8_SRGB = 22,
    
    /// VK_FORMAT_R8G8B8_UNORM -> 23
    VK_FORMAT_R8G8B8_UNORM = 23,
    
    /// VK_FORMAT_R8G8B8_SNORM -> 24
    VK_FORMAT_R8G8B8_SNORM = 24,
    
    /// VK_FORMAT_R8G8B8_USCALED -> 25
    VK_FORMAT_R8G8B8_USCALED = 25,
    
    /// VK_FORMAT_R8G8B8_SSCALED -> 26
    VK_FORMAT_R8G8B8_SSCALED = 26,
    
    /// VK_FORMAT_R8G8B8_UINT -> 27
    VK_FORMAT_R8G8B8_UINT = 27,
    
    /// VK_FORMAT_R8G8B8_SINT -> 28
    VK_FORMAT_R8G8B8_SINT = 28,
    
    /// VK_FORMAT_R8G8B8_SRGB -> 29
    VK_FORMAT_R8G8B8_SRGB = 29,
    
    /// VK_FORMAT_B8G8R8_UNORM -> 30
    VK_FORMAT_B8G8R8_UNORM = 30,
    
    /// VK_FORMAT_B8G8R8_SNORM -> 31
    VK_FORMAT_B8G8R8_SNORM = 31,
    
    /// VK_FORMAT_B8G8R8_USCALED -> 32
    VK_FORMAT_B8G8R8_USCALED = 32,
    
    /// VK_FORMAT_B8G8R8_SSCALED -> 33
    VK_FORMAT_B8G8R8_SSCALED = 33,
    
    /// VK_FORMAT_B8G8R8_UINT -> 34
    VK_FORMAT_B8G8R8_UINT = 34,
    
    /// VK_FORMAT_B8G8R8_SINT -> 35
    VK_FORMAT_B8G8R8_SINT = 35,
    
    /// VK_FORMAT_B8G8R8_SRGB -> 36
    VK_FORMAT_B8G8R8_SRGB = 36,
    
    /// VK_FORMAT_R8G8B8A8_UNORM -> 37
    VK_FORMAT_R8G8B8A8_UNORM = 37,
    
    /// VK_FORMAT_R8G8B8A8_SNORM -> 38
    VK_FORMAT_R8G8B8A8_SNORM = 38,
    
    /// VK_FORMAT_R8G8B8A8_USCALED -> 39
    VK_FORMAT_R8G8B8A8_USCALED = 39,
    
    /// VK_FORMAT_R8G8B8A8_SSCALED -> 40
    VK_FORMAT_R8G8B8A8_SSCALED = 40,
    
    /// VK_FORMAT_R8G8B8A8_UINT -> 41
    VK_FORMAT_R8G8B8A8_UINT = 41,
    
    /// VK_FORMAT_R8G8B8A8_SINT -> 42
    VK_FORMAT_R8G8B8A8_SINT = 42,
    
    /// VK_FORMAT_R8G8B8A8_SRGB -> 43
    VK_FORMAT_R8G8B8A8_SRGB = 43,
    
    /// VK_FORMAT_B8G8R8A8_UNORM -> 44
    VK_FORMAT_B8G8R8A8_UNORM = 44,
    
    /// VK_FORMAT_B8G8R8A8_SNORM -> 45
    VK_FORMAT_B8G8R8A8_SNORM = 45,
    
    /// VK_FORMAT_B8G8R8A8_USCALED -> 46
    VK_FORMAT_B8G8R8A8_USCALED = 46,
    
    /// VK_FORMAT_B8G8R8A8_SSCALED -> 47
    VK_FORMAT_B8G8R8A8_SSCALED = 47,
    
    /// VK_FORMAT_B8G8R8A8_UINT -> 48
    VK_FORMAT_B8G8R8A8_UINT = 48,
    
    /// VK_FORMAT_B8G8R8A8_SINT -> 49
    VK_FORMAT_B8G8R8A8_SINT = 49,
    
    /// VK_FORMAT_B8G8R8A8_SRGB -> 50
    VK_FORMAT_B8G8R8A8_SRGB = 50,
    
    /// VK_FORMAT_A8B8G8R8_UNORM_PACK32 -> 51
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
    
    /// VK_FORMAT_A8B8G8R8_SNORM_PACK32 -> 52
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
    
    /// VK_FORMAT_A8B8G8R8_USCALED_PACK32 -> 53
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
    
    /// VK_FORMAT_A8B8G8R8_SSCALED_PACK32 -> 54
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
    
    /// VK_FORMAT_A8B8G8R8_UINT_PACK32 -> 55
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
    
    /// VK_FORMAT_A8B8G8R8_SINT_PACK32 -> 56
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
    
    /// VK_FORMAT_A8B8G8R8_SRGB_PACK32 -> 57
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
    
    /// VK_FORMAT_A2R10G10B10_UNORM_PACK32 -> 58
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
    
    /// VK_FORMAT_A2R10G10B10_SNORM_PACK32 -> 59
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
    
    /// VK_FORMAT_A2R10G10B10_USCALED_PACK32 -> 60
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
    
    /// VK_FORMAT_A2R10G10B10_SSCALED_PACK32 -> 61
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
    
    /// VK_FORMAT_A2R10G10B10_UINT_PACK32 -> 62
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
    
    /// VK_FORMAT_A2R10G10B10_SINT_PACK32 -> 63
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
    
    /// VK_FORMAT_A2B10G10R10_UNORM_PACK32 -> 64
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
    
    /// VK_FORMAT_A2B10G10R10_SNORM_PACK32 -> 65
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
    
    /// VK_FORMAT_A2B10G10R10_USCALED_PACK32 -> 66
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
    
    /// VK_FORMAT_A2B10G10R10_SSCALED_PACK32 -> 67
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
    
    /// VK_FORMAT_A2B10G10R10_UINT_PACK32 -> 68
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
    
    /// VK_FORMAT_A2B10G10R10_SINT_PACK32 -> 69
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
    
    /// VK_FORMAT_R16_UNORM -> 70
    VK_FORMAT_R16_UNORM = 70,
    
    /// VK_FORMAT_R16_SNORM -> 71
    VK_FORMAT_R16_SNORM = 71,
    
    /// VK_FORMAT_R16_USCALED -> 72
    VK_FORMAT_R16_USCALED = 72,
    
    /// VK_FORMAT_R16_SSCALED -> 73
    VK_FORMAT_R16_SSCALED = 73,
    
    /// VK_FORMAT_R16_UINT -> 74
    VK_FORMAT_R16_UINT = 74,
    
    /// VK_FORMAT_R16_SINT -> 75
    VK_FORMAT_R16_SINT = 75,
    
    /// VK_FORMAT_R16_SFLOAT -> 76
    VK_FORMAT_R16_SFLOAT = 76,
    
    /// VK_FORMAT_R16G16_UNORM -> 77
    VK_FORMAT_R16G16_UNORM = 77,
    
    /// VK_FORMAT_R16G16_SNORM -> 78
    VK_FORMAT_R16G16_SNORM = 78,
    
    /// VK_FORMAT_R16G16_USCALED -> 79
    VK_FORMAT_R16G16_USCALED = 79,
    
    /// VK_FORMAT_R16G16_SSCALED -> 80
    VK_FORMAT_R16G16_SSCALED = 80,
    
    /// VK_FORMAT_R16G16_UINT -> 81
    VK_FORMAT_R16G16_UINT = 81,
    
    /// VK_FORMAT_R16G16_SINT -> 82
    VK_FORMAT_R16G16_SINT = 82,
    
    /// VK_FORMAT_R16G16_SFLOAT -> 83
    VK_FORMAT_R16G16_SFLOAT = 83,
    
    /// VK_FORMAT_R16G16B16_UNORM -> 84
    VK_FORMAT_R16G16B16_UNORM = 84,
    
    /// VK_FORMAT_R16G16B16_SNORM -> 85
    VK_FORMAT_R16G16B16_SNORM = 85,
    
    /// VK_FORMAT_R16G16B16_USCALED -> 86
    VK_FORMAT_R16G16B16_USCALED = 86,
    
    /// VK_FORMAT_R16G16B16_SSCALED -> 87
    VK_FORMAT_R16G16B16_SSCALED = 87,
    
    /// VK_FORMAT_R16G16B16_UINT -> 88
    VK_FORMAT_R16G16B16_UINT = 88,
    
    /// VK_FORMAT_R16G16B16_SINT -> 89
    VK_FORMAT_R16G16B16_SINT = 89,
    
    /// VK_FORMAT_R16G16B16_SFLOAT -> 90
    VK_FORMAT_R16G16B16_SFLOAT = 90,
    
    /// VK_FORMAT_R16G16B16A16_UNORM -> 91
    VK_FORMAT_R16G16B16A16_UNORM = 91,
    
    /// VK_FORMAT_R16G16B16A16_SNORM -> 92
    VK_FORMAT_R16G16B16A16_SNORM = 92,
    
    /// VK_FORMAT_R16G16B16A16_USCALED -> 93
    VK_FORMAT_R16G16B16A16_USCALED = 93,
    
    /// VK_FORMAT_R16G16B16A16_SSCALED -> 94
    VK_FORMAT_R16G16B16A16_SSCALED = 94,
    
    /// VK_FORMAT_R16G16B16A16_UINT -> 95
    VK_FORMAT_R16G16B16A16_UINT = 95,
    
    /// VK_FORMAT_R16G16B16A16_SINT -> 96
    VK_FORMAT_R16G16B16A16_SINT = 96,
    
    /// VK_FORMAT_R16G16B16A16_SFLOAT -> 97
    VK_FORMAT_R16G16B16A16_SFLOAT = 97,
    
    /// VK_FORMAT_R32_UINT -> 98
    VK_FORMAT_R32_UINT = 98,
    
    /// VK_FORMAT_R32_SINT -> 99
    VK_FORMAT_R32_SINT = 99,
    
    /// VK_FORMAT_R32_SFLOAT -> 100
    VK_FORMAT_R32_SFLOAT = 100,
    
    /// VK_FORMAT_R32G32_UINT -> 101
    VK_FORMAT_R32G32_UINT = 101,
    
    /// VK_FORMAT_R32G32_SINT -> 102
    VK_FORMAT_R32G32_SINT = 102,
    
    /// VK_FORMAT_R32G32_SFLOAT -> 103
    VK_FORMAT_R32G32_SFLOAT = 103,
    
    /// VK_FORMAT_R32G32B32_UINT -> 104
    VK_FORMAT_R32G32B32_UINT = 104,
    
    /// VK_FORMAT_R32G32B32_SINT -> 105
    VK_FORMAT_R32G32B32_SINT = 105,
    
    /// VK_FORMAT_R32G32B32_SFLOAT -> 106
    VK_FORMAT_R32G32B32_SFLOAT = 106,
    
    /// VK_FORMAT_R32G32B32A32_UINT -> 107
    VK_FORMAT_R32G32B32A32_UINT = 107,
    
    /// VK_FORMAT_R32G32B32A32_SINT -> 108
    VK_FORMAT_R32G32B32A32_SINT = 108,
    
    /// VK_FORMAT_R32G32B32A32_SFLOAT -> 109
    VK_FORMAT_R32G32B32A32_SFLOAT = 109,
    
    /// VK_FORMAT_R64_UINT -> 110
    VK_FORMAT_R64_UINT = 110,
    
    /// VK_FORMAT_R64_SINT -> 111
    VK_FORMAT_R64_SINT = 111,
    
    /// VK_FORMAT_R64_SFLOAT -> 112
    VK_FORMAT_R64_SFLOAT = 112,
    
    /// VK_FORMAT_R64G64_UINT -> 113
    VK_FORMAT_R64G64_UINT = 113,
    
    /// VK_FORMAT_R64G64_SINT -> 114
    VK_FORMAT_R64G64_SINT = 114,
    
    /// VK_FORMAT_R64G64_SFLOAT -> 115
    VK_FORMAT_R64G64_SFLOAT = 115,
    
    /// VK_FORMAT_R64G64B64_UINT -> 116
    VK_FORMAT_R64G64B64_UINT = 116,
    
    /// VK_FORMAT_R64G64B64_SINT -> 117
    VK_FORMAT_R64G64B64_SINT = 117,
    
    /// VK_FORMAT_R64G64B64_SFLOAT -> 118
    VK_FORMAT_R64G64B64_SFLOAT = 118,
    
    /// VK_FORMAT_R64G64B64A64_UINT -> 119
    VK_FORMAT_R64G64B64A64_UINT = 119,
    
    /// VK_FORMAT_R64G64B64A64_SINT -> 120
    VK_FORMAT_R64G64B64A64_SINT = 120,
    
    /// VK_FORMAT_R64G64B64A64_SFLOAT -> 121
    VK_FORMAT_R64G64B64A64_SFLOAT = 121,
    
    /// VK_FORMAT_B10G11R11_UFLOAT_PACK32 -> 122
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
    
    /// VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 -> 123
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
    
    /// VK_FORMAT_D16_UNORM -> 124
    VK_FORMAT_D16_UNORM = 124,
    
    /// VK_FORMAT_X8_D24_UNORM_PACK32 -> 125
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
    
    /// VK_FORMAT_D32_SFLOAT -> 126
    VK_FORMAT_D32_SFLOAT = 126,
    
    /// VK_FORMAT_S8_UINT -> 127
    VK_FORMAT_S8_UINT = 127,
    
    /// VK_FORMAT_D16_UNORM_S8_UINT -> 128
    VK_FORMAT_D16_UNORM_S8_UINT = 128,
    
    /// VK_FORMAT_D24_UNORM_S8_UINT -> 129
    VK_FORMAT_D24_UNORM_S8_UINT = 129,
    
    /// VK_FORMAT_D32_SFLOAT_S8_UINT -> 130
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
    
    /// VK_FORMAT_BC1_RGB_UNORM_BLOCK -> 131
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
    
    /// VK_FORMAT_BC1_RGB_SRGB_BLOCK -> 132
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
    
    /// VK_FORMAT_BC1_RGBA_UNORM_BLOCK -> 133
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
    
    /// VK_FORMAT_BC1_RGBA_SRGB_BLOCK -> 134
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
    
    /// VK_FORMAT_BC2_UNORM_BLOCK -> 135
    VK_FORMAT_BC2_UNORM_BLOCK = 135,
    
    /// VK_FORMAT_BC2_SRGB_BLOCK -> 136
    VK_FORMAT_BC2_SRGB_BLOCK = 136,
    
    /// VK_FORMAT_BC3_UNORM_BLOCK -> 137
    VK_FORMAT_BC3_UNORM_BLOCK = 137,
    
    /// VK_FORMAT_BC3_SRGB_BLOCK -> 138
    VK_FORMAT_BC3_SRGB_BLOCK = 138,
    
    /// VK_FORMAT_BC4_UNORM_BLOCK -> 139
    VK_FORMAT_BC4_UNORM_BLOCK = 139,
    
    /// VK_FORMAT_BC4_SNORM_BLOCK -> 140
    VK_FORMAT_BC4_SNORM_BLOCK = 140,
    
    /// VK_FORMAT_BC5_UNORM_BLOCK -> 141
    VK_FORMAT_BC5_UNORM_BLOCK = 141,
    
    /// VK_FORMAT_BC5_SNORM_BLOCK -> 142
    VK_FORMAT_BC5_SNORM_BLOCK = 142,
    
    /// VK_FORMAT_BC6H_UFLOAT_BLOCK -> 143
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
    
    /// VK_FORMAT_BC6H_SFLOAT_BLOCK -> 144
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
    
    /// VK_FORMAT_BC7_UNORM_BLOCK -> 145
    VK_FORMAT_BC7_UNORM_BLOCK = 145,
    
    /// VK_FORMAT_BC7_SRGB_BLOCK -> 146
    VK_FORMAT_BC7_SRGB_BLOCK = 146,
    
    /// VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK -> 147
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
    
    /// VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK -> 148
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
    
    /// VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK -> 149
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    
    /// VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK -> 150
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    
    /// VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK -> 151
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    
    /// VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK -> 152
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    
    /// VK_FORMAT_EAC_R11_UNORM_BLOCK -> 153
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
    
    /// VK_FORMAT_EAC_R11_SNORM_BLOCK -> 154
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
    
    /// VK_FORMAT_EAC_R11G11_UNORM_BLOCK -> 155
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
    
    /// VK_FORMAT_EAC_R11G11_SNORM_BLOCK -> 156
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
    
    /// VK_FORMAT_ASTC_4x4_UNORM_BLOCK -> 157
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
    
    /// VK_FORMAT_ASTC_4x4_SRGB_BLOCK -> 158
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
    
    /// VK_FORMAT_ASTC_5x4_UNORM_BLOCK -> 159
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
    
    /// VK_FORMAT_ASTC_5x4_SRGB_BLOCK -> 160
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
    
    /// VK_FORMAT_ASTC_5x5_UNORM_BLOCK -> 161
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
    
    /// VK_FORMAT_ASTC_5x5_SRGB_BLOCK -> 162
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
    
    /// VK_FORMAT_ASTC_6x5_UNORM_BLOCK -> 163
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
    
    /// VK_FORMAT_ASTC_6x5_SRGB_BLOCK -> 164
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
    
    /// VK_FORMAT_ASTC_6x6_UNORM_BLOCK -> 165
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
    
    /// VK_FORMAT_ASTC_6x6_SRGB_BLOCK -> 166
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
    
    /// VK_FORMAT_ASTC_8x5_UNORM_BLOCK -> 167
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
    
    /// VK_FORMAT_ASTC_8x5_SRGB_BLOCK -> 168
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
    
    /// VK_FORMAT_ASTC_8x6_UNORM_BLOCK -> 169
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
    
    /// VK_FORMAT_ASTC_8x6_SRGB_BLOCK -> 170
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
    
    /// VK_FORMAT_ASTC_8x8_UNORM_BLOCK -> 171
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
    
    /// VK_FORMAT_ASTC_8x8_SRGB_BLOCK -> 172
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
    
    /// VK_FORMAT_ASTC_10x5_UNORM_BLOCK -> 173
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
    
    /// VK_FORMAT_ASTC_10x5_SRGB_BLOCK -> 174
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
    
    /// VK_FORMAT_ASTC_10x6_UNORM_BLOCK -> 175
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
    
    /// VK_FORMAT_ASTC_10x6_SRGB_BLOCK -> 176
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
    
    /// VK_FORMAT_ASTC_10x8_UNORM_BLOCK -> 177
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
    
    /// VK_FORMAT_ASTC_10x8_SRGB_BLOCK -> 178
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
    
    /// VK_FORMAT_ASTC_10x10_UNORM_BLOCK -> 179
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
    
    /// VK_FORMAT_ASTC_10x10_SRGB_BLOCK -> 180
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
    
    /// VK_FORMAT_ASTC_12x10_UNORM_BLOCK -> 181
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
    
    /// VK_FORMAT_ASTC_12x10_SRGB_BLOCK -> 182
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
    
    /// VK_FORMAT_ASTC_12x12_UNORM_BLOCK -> 183
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
    
    /// VK_FORMAT_ASTC_12x12_SRGB_BLOCK -> 184
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
    
    /// VK_FORMAT_BEGIN_RANGE -> VK_FORMAT_UNDEFINED
    VK_FORMAT_BEGIN_RANGE = VkFormat.VK_FORMAT_UNDEFINED,
    
    /// VK_FORMAT_END_RANGE -> VK_FORMAT_ASTC_12x12_SRGB_BLOCK
    VK_FORMAT_END_RANGE = VkFormat.VK_FORMAT_ASTC_12x12_SRGB_BLOCK,
    
    /// VK_FORMAT_RANGE_SIZE -> (VK_FORMAT_ASTC_12x12_SRGB_BLOCK-VK_FORMAT_UNDEFINED+1)
    VK_FORMAT_RANGE_SIZE = (VkFormat.VK_FORMAT_ASTC_12x12_SRGB_BLOCK 
                - (VkFormat.VK_FORMAT_UNDEFINED + 1)),
    
    /// VK_FORMAT_MAX_ENUM -> 0x7FFFFFFF
    VK_FORMAT_MAX_ENUM = 2147483647,
}

public enum VkImageType {
    
    /// VK_IMAGE_TYPE_1D -> 0
    VK_IMAGE_TYPE_1D = 0,
    
    /// VK_IMAGE_TYPE_2D -> 1
    VK_IMAGE_TYPE_2D = 1,
    
    /// VK_IMAGE_TYPE_3D -> 2
    VK_IMAGE_TYPE_3D = 2,
    
    /// VK_IMAGE_TYPE_BEGIN_RANGE -> VK_IMAGE_TYPE_1D
    VK_IMAGE_TYPE_BEGIN_RANGE = VkImageType.VK_IMAGE_TYPE_1D,
    
    /// VK_IMAGE_TYPE_END_RANGE -> VK_IMAGE_TYPE_3D
    VK_IMAGE_TYPE_END_RANGE = VkImageType.VK_IMAGE_TYPE_3D,
    
    /// VK_IMAGE_TYPE_RANGE_SIZE -> (VK_IMAGE_TYPE_3D-VK_IMAGE_TYPE_1D+1)
    VK_IMAGE_TYPE_RANGE_SIZE = (VkImageType.VK_IMAGE_TYPE_3D 
                - (VkImageType.VK_IMAGE_TYPE_1D + 1)),
    
    /// VK_IMAGE_TYPE_MAX_ENUM -> 0x7FFFFFFF
    VK_IMAGE_TYPE_MAX_ENUM = 2147483647,
}

public enum VkImageTiling {
    
    /// VK_IMAGE_TILING_OPTIMAL -> 0
    VK_IMAGE_TILING_OPTIMAL = 0,
    
    /// VK_IMAGE_TILING_LINEAR -> 1
    VK_IMAGE_TILING_LINEAR = 1,
    
    /// VK_IMAGE_TILING_BEGIN_RANGE -> VK_IMAGE_TILING_OPTIMAL
    VK_IMAGE_TILING_BEGIN_RANGE = VkImageTiling.VK_IMAGE_TILING_OPTIMAL,
    
    /// VK_IMAGE_TILING_END_RANGE -> VK_IMAGE_TILING_LINEAR
    VK_IMAGE_TILING_END_RANGE = VkImageTiling.VK_IMAGE_TILING_LINEAR,
    
    /// VK_IMAGE_TILING_RANGE_SIZE -> (VK_IMAGE_TILING_LINEAR-VK_IMAGE_TILING_OPTIMAL+1)
    VK_IMAGE_TILING_RANGE_SIZE = (VkImageTiling.VK_IMAGE_TILING_LINEAR 
                - (VkImageTiling.VK_IMAGE_TILING_OPTIMAL + 1)),
    
    /// VK_IMAGE_TILING_MAX_ENUM -> 0x7FFFFFFF
    VK_IMAGE_TILING_MAX_ENUM = 2147483647,
}

public enum VkPhysicalDeviceType {
    
    /// VK_PHYSICAL_DEVICE_TYPE_OTHER -> 0
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
    
    /// VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU -> 1
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    
    /// VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU -> 2
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
    
    /// VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU -> 3
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
    
    /// VK_PHYSICAL_DEVICE_TYPE_CPU -> 4
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
    
    /// VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE -> VK_PHYSICAL_DEVICE_TYPE_OTHER
    VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_OTHER,
    
    /// VK_PHYSICAL_DEVICE_TYPE_END_RANGE -> VK_PHYSICAL_DEVICE_TYPE_CPU
    VK_PHYSICAL_DEVICE_TYPE_END_RANGE = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_CPU,
    
    /// VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE -> (VK_PHYSICAL_DEVICE_TYPE_CPU-VK_PHYSICAL_DEVICE_TYPE_OTHER+1)
    VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE = (VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_CPU 
                - (VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_OTHER + 1)),
    
    /// VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM -> 0x7FFFFFFF
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647,
}

public enum VkQueryType {
    
    /// VK_QUERY_TYPE_OCCLUSION -> 0
    VK_QUERY_TYPE_OCCLUSION = 0,
    
    /// VK_QUERY_TYPE_PIPELINE_STATISTICS -> 1
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
    
    /// VK_QUERY_TYPE_TIMESTAMP -> 2
    VK_QUERY_TYPE_TIMESTAMP = 2,
    
    /// VK_QUERY_TYPE_BEGIN_RANGE -> VK_QUERY_TYPE_OCCLUSION
    VK_QUERY_TYPE_BEGIN_RANGE = VkQueryType.VK_QUERY_TYPE_OCCLUSION,
    
    /// VK_QUERY_TYPE_END_RANGE -> VK_QUERY_TYPE_TIMESTAMP
    VK_QUERY_TYPE_END_RANGE = VkQueryType.VK_QUERY_TYPE_TIMESTAMP,
    
    /// VK_QUERY_TYPE_RANGE_SIZE -> (VK_QUERY_TYPE_TIMESTAMP-VK_QUERY_TYPE_OCCLUSION+1)
    VK_QUERY_TYPE_RANGE_SIZE = (VkQueryType.VK_QUERY_TYPE_TIMESTAMP 
                - (VkQueryType.VK_QUERY_TYPE_OCCLUSION + 1)),
    
    /// VK_QUERY_TYPE_MAX_ENUM -> 0x7FFFFFFF
    VK_QUERY_TYPE_MAX_ENUM = 2147483647,
}

public enum VkSharingMode {
    
    /// VK_SHARING_MODE_EXCLUSIVE -> 0
    VK_SHARING_MODE_EXCLUSIVE = 0,
    
    /// VK_SHARING_MODE_CONCURRENT -> 1
    VK_SHARING_MODE_CONCURRENT = 1,
    
    /// VK_SHARING_MODE_BEGIN_RANGE -> VK_SHARING_MODE_EXCLUSIVE
    VK_SHARING_MODE_BEGIN_RANGE = VkSharingMode.VK_SHARING_MODE_EXCLUSIVE,
    
    /// VK_SHARING_MODE_END_RANGE -> VK_SHARING_MODE_CONCURRENT
    VK_SHARING_MODE_END_RANGE = VkSharingMode.VK_SHARING_MODE_CONCURRENT,
    
    /// VK_SHARING_MODE_RANGE_SIZE -> (VK_SHARING_MODE_CONCURRENT-VK_SHARING_MODE_EXCLUSIVE+1)
    VK_SHARING_MODE_RANGE_SIZE = (VkSharingMode.VK_SHARING_MODE_CONCURRENT 
                - (VkSharingMode.VK_SHARING_MODE_EXCLUSIVE + 1)),
    
    /// VK_SHARING_MODE_MAX_ENUM -> 0x7FFFFFFF
    VK_SHARING_MODE_MAX_ENUM = 2147483647,
}

public enum VkImageLayout {
    
    /// VK_IMAGE_LAYOUT_UNDEFINED -> 0
    VK_IMAGE_LAYOUT_UNDEFINED = 0,
    
    /// VK_IMAGE_LAYOUT_GENERAL -> 1
    VK_IMAGE_LAYOUT_GENERAL = 1,
    
    /// VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL -> 2
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
    
    /// VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL -> 3
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    
    /// VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL -> 4
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    
    /// VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL -> 5
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
    
    /// VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL -> 6
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
    
    /// VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL -> 7
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
    
    /// VK_IMAGE_LAYOUT_PREINITIALIZED -> 8
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
    
    /// VK_IMAGE_LAYOUT_PRESENT_SRC_KHR -> 1000001002
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
    
    /// VK_IMAGE_LAYOUT_BEGIN_RANGE -> VK_IMAGE_LAYOUT_UNDEFINED
    VK_IMAGE_LAYOUT_BEGIN_RANGE = VkImageLayout.VK_IMAGE_LAYOUT_UNDEFINED,
    
    /// VK_IMAGE_LAYOUT_END_RANGE -> VK_IMAGE_LAYOUT_PREINITIALIZED
    VK_IMAGE_LAYOUT_END_RANGE = VkImageLayout.VK_IMAGE_LAYOUT_PREINITIALIZED,
    
    /// VK_IMAGE_LAYOUT_RANGE_SIZE -> (VK_IMAGE_LAYOUT_PREINITIALIZED-VK_IMAGE_LAYOUT_UNDEFINED+1)
    VK_IMAGE_LAYOUT_RANGE_SIZE = (VkImageLayout.VK_IMAGE_LAYOUT_PREINITIALIZED 
                - (VkImageLayout.VK_IMAGE_LAYOUT_UNDEFINED + 1)),
    
    /// VK_IMAGE_LAYOUT_MAX_ENUM -> 0x7FFFFFFF
    VK_IMAGE_LAYOUT_MAX_ENUM = 2147483647,
}

public enum VkImageViewType {
    
    /// VK_IMAGE_VIEW_TYPE_1D -> 0
    VK_IMAGE_VIEW_TYPE_1D = 0,
    
    /// VK_IMAGE_VIEW_TYPE_2D -> 1
    VK_IMAGE_VIEW_TYPE_2D = 1,
    
    /// VK_IMAGE_VIEW_TYPE_3D -> 2
    VK_IMAGE_VIEW_TYPE_3D = 2,
    
    /// VK_IMAGE_VIEW_TYPE_CUBE -> 3
    VK_IMAGE_VIEW_TYPE_CUBE = 3,
    
    /// VK_IMAGE_VIEW_TYPE_1D_ARRAY -> 4
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
    
    /// VK_IMAGE_VIEW_TYPE_2D_ARRAY -> 5
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
    
    /// VK_IMAGE_VIEW_TYPE_CUBE_ARRAY -> 6
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
    
    /// VK_IMAGE_VIEW_TYPE_BEGIN_RANGE -> VK_IMAGE_VIEW_TYPE_1D
    VK_IMAGE_VIEW_TYPE_BEGIN_RANGE = VkImageViewType.VK_IMAGE_VIEW_TYPE_1D,
    
    /// VK_IMAGE_VIEW_TYPE_END_RANGE -> VK_IMAGE_VIEW_TYPE_CUBE_ARRAY
    VK_IMAGE_VIEW_TYPE_END_RANGE = VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE_ARRAY,
    
    /// VK_IMAGE_VIEW_TYPE_RANGE_SIZE -> (VK_IMAGE_VIEW_TYPE_CUBE_ARRAY-VK_IMAGE_VIEW_TYPE_1D+1)
    VK_IMAGE_VIEW_TYPE_RANGE_SIZE = (VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE_ARRAY 
                - (VkImageViewType.VK_IMAGE_VIEW_TYPE_1D + 1)),
    
    /// VK_IMAGE_VIEW_TYPE_MAX_ENUM -> 0x7FFFFFFF
    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647,
}

public enum VkComponentSwizzle {
    
    /// VK_COMPONENT_SWIZZLE_IDENTITY -> 0
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    
    /// VK_COMPONENT_SWIZZLE_ZERO -> 1
    VK_COMPONENT_SWIZZLE_ZERO = 1,
    
    /// VK_COMPONENT_SWIZZLE_ONE -> 2
    VK_COMPONENT_SWIZZLE_ONE = 2,
    
    /// VK_COMPONENT_SWIZZLE_R -> 3
    VK_COMPONENT_SWIZZLE_R = 3,
    
    /// VK_COMPONENT_SWIZZLE_G -> 4
    VK_COMPONENT_SWIZZLE_G = 4,
    
    /// VK_COMPONENT_SWIZZLE_B -> 5
    VK_COMPONENT_SWIZZLE_B = 5,
    
    /// VK_COMPONENT_SWIZZLE_A -> 6
    VK_COMPONENT_SWIZZLE_A = 6,
    
    /// VK_COMPONENT_SWIZZLE_BEGIN_RANGE -> VK_COMPONENT_SWIZZLE_IDENTITY
    VK_COMPONENT_SWIZZLE_BEGIN_RANGE = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY,
    
    /// VK_COMPONENT_SWIZZLE_END_RANGE -> VK_COMPONENT_SWIZZLE_A
    VK_COMPONENT_SWIZZLE_END_RANGE = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_A,
    
    /// VK_COMPONENT_SWIZZLE_RANGE_SIZE -> (VK_COMPONENT_SWIZZLE_A-VK_COMPONENT_SWIZZLE_IDENTITY+1)
    VK_COMPONENT_SWIZZLE_RANGE_SIZE = (VkComponentSwizzle.VK_COMPONENT_SWIZZLE_A 
                - (VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY + 1)),
    
    /// VK_COMPONENT_SWIZZLE_MAX_ENUM -> 0x7FFFFFFF
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 2147483647,
}

public enum VkVertexInputRate {
    
    /// VK_VERTEX_INPUT_RATE_VERTEX -> 0
    VK_VERTEX_INPUT_RATE_VERTEX = 0,
    
    /// VK_VERTEX_INPUT_RATE_INSTANCE -> 1
    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
    
    /// VK_VERTEX_INPUT_RATE_BEGIN_RANGE -> VK_VERTEX_INPUT_RATE_VERTEX
    VK_VERTEX_INPUT_RATE_BEGIN_RANGE = VkVertexInputRate.VK_VERTEX_INPUT_RATE_VERTEX,
    
    /// VK_VERTEX_INPUT_RATE_END_RANGE -> VK_VERTEX_INPUT_RATE_INSTANCE
    VK_VERTEX_INPUT_RATE_END_RANGE = VkVertexInputRate.VK_VERTEX_INPUT_RATE_INSTANCE,
    
    /// VK_VERTEX_INPUT_RATE_RANGE_SIZE -> (VK_VERTEX_INPUT_RATE_INSTANCE-VK_VERTEX_INPUT_RATE_VERTEX+1)
    VK_VERTEX_INPUT_RATE_RANGE_SIZE = (VkVertexInputRate.VK_VERTEX_INPUT_RATE_INSTANCE 
                - (VkVertexInputRate.VK_VERTEX_INPUT_RATE_VERTEX + 1)),
    
    /// VK_VERTEX_INPUT_RATE_MAX_ENUM -> 0x7FFFFFFF
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 2147483647,
}

public enum VkPrimitiveTopology {
    
    /// VK_PRIMITIVE_TOPOLOGY_POINT_LIST -> 0
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    
    /// VK_PRIMITIVE_TOPOLOGY_LINE_LIST -> 1
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    
    /// VK_PRIMITIVE_TOPOLOGY_LINE_STRIP -> 2
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    
    /// VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST -> 3
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    
    /// VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP -> 4
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    
    /// VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN -> 5
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
    
    /// VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY -> 6
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
    
    /// VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY -> 7
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
    
    /// VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY -> 8
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    
    /// VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY -> 9
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    
    /// VK_PRIMITIVE_TOPOLOGY_PATCH_LIST -> 10
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
    
    /// VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE -> VK_PRIMITIVE_TOPOLOGY_POINT_LIST
    VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
    
    /// VK_PRIMITIVE_TOPOLOGY_END_RANGE -> VK_PRIMITIVE_TOPOLOGY_PATCH_LIST
    VK_PRIMITIVE_TOPOLOGY_END_RANGE = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_PATCH_LIST,
    
    /// VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE -> (VK_PRIMITIVE_TOPOLOGY_PATCH_LIST-VK_PRIMITIVE_TOPOLOGY_POINT_LIST+1)
    VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE = (VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_PATCH_LIST 
                - (VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_POINT_LIST + 1)),
    
    /// VK_PRIMITIVE_TOPOLOGY_MAX_ENUM -> 0x7FFFFFFF
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647,
}

public enum VkPolygonMode {
    
    /// VK_POLYGON_MODE_FILL -> 0
    VK_POLYGON_MODE_FILL = 0,
    
    /// VK_POLYGON_MODE_LINE -> 1
    VK_POLYGON_MODE_LINE = 1,
    
    /// VK_POLYGON_MODE_POINT -> 2
    VK_POLYGON_MODE_POINT = 2,
    
    /// VK_POLYGON_MODE_BEGIN_RANGE -> VK_POLYGON_MODE_FILL
    VK_POLYGON_MODE_BEGIN_RANGE = VkPolygonMode.VK_POLYGON_MODE_FILL,
    
    /// VK_POLYGON_MODE_END_RANGE -> VK_POLYGON_MODE_POINT
    VK_POLYGON_MODE_END_RANGE = VkPolygonMode.VK_POLYGON_MODE_POINT,
    
    /// VK_POLYGON_MODE_RANGE_SIZE -> (VK_POLYGON_MODE_POINT-VK_POLYGON_MODE_FILL+1)
    VK_POLYGON_MODE_RANGE_SIZE = (VkPolygonMode.VK_POLYGON_MODE_POINT 
                - (VkPolygonMode.VK_POLYGON_MODE_FILL + 1)),
    
    /// VK_POLYGON_MODE_MAX_ENUM -> 0x7FFFFFFF
    VK_POLYGON_MODE_MAX_ENUM = 2147483647,
}

public enum VkFrontFace {
    
    /// VK_FRONT_FACE_COUNTER_CLOCKWISE -> 0
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    
    /// VK_FRONT_FACE_CLOCKWISE -> 1
    VK_FRONT_FACE_CLOCKWISE = 1,
    
    /// VK_FRONT_FACE_BEGIN_RANGE -> VK_FRONT_FACE_COUNTER_CLOCKWISE
    VK_FRONT_FACE_BEGIN_RANGE = VkFrontFace.VK_FRONT_FACE_COUNTER_CLOCKWISE,
    
    /// VK_FRONT_FACE_END_RANGE -> VK_FRONT_FACE_CLOCKWISE
    VK_FRONT_FACE_END_RANGE = VkFrontFace.VK_FRONT_FACE_CLOCKWISE,
    
    /// VK_FRONT_FACE_RANGE_SIZE -> (VK_FRONT_FACE_CLOCKWISE-VK_FRONT_FACE_COUNTER_CLOCKWISE+1)
    VK_FRONT_FACE_RANGE_SIZE = (VkFrontFace.VK_FRONT_FACE_CLOCKWISE 
                - (VkFrontFace.VK_FRONT_FACE_COUNTER_CLOCKWISE + 1)),
    
    /// VK_FRONT_FACE_MAX_ENUM -> 0x7FFFFFFF
    VK_FRONT_FACE_MAX_ENUM = 2147483647,
}

public enum VkCompareOp {
    
    /// VK_COMPARE_OP_NEVER -> 0
    VK_COMPARE_OP_NEVER = 0,
    
    /// VK_COMPARE_OP_LESS -> 1
    VK_COMPARE_OP_LESS = 1,
    
    /// VK_COMPARE_OP_EQUAL -> 2
    VK_COMPARE_OP_EQUAL = 2,
    
    /// VK_COMPARE_OP_LESS_OR_EQUAL -> 3
    VK_COMPARE_OP_LESS_OR_EQUAL = 3,
    
    /// VK_COMPARE_OP_GREATER -> 4
    VK_COMPARE_OP_GREATER = 4,
    
    /// VK_COMPARE_OP_NOT_EQUAL -> 5
    VK_COMPARE_OP_NOT_EQUAL = 5,
    
    /// VK_COMPARE_OP_GREATER_OR_EQUAL -> 6
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    
    /// VK_COMPARE_OP_ALWAYS -> 7
    VK_COMPARE_OP_ALWAYS = 7,
    
    /// VK_COMPARE_OP_BEGIN_RANGE -> VK_COMPARE_OP_NEVER
    VK_COMPARE_OP_BEGIN_RANGE = VkCompareOp.VK_COMPARE_OP_NEVER,
    
    /// VK_COMPARE_OP_END_RANGE -> VK_COMPARE_OP_ALWAYS
    VK_COMPARE_OP_END_RANGE = VkCompareOp.VK_COMPARE_OP_ALWAYS,
    
    /// VK_COMPARE_OP_RANGE_SIZE -> (VK_COMPARE_OP_ALWAYS-VK_COMPARE_OP_NEVER+1)
    VK_COMPARE_OP_RANGE_SIZE = (VkCompareOp.VK_COMPARE_OP_ALWAYS 
                - (VkCompareOp.VK_COMPARE_OP_NEVER + 1)),
    
    /// VK_COMPARE_OP_MAX_ENUM -> 0x7FFFFFFF
    VK_COMPARE_OP_MAX_ENUM = 2147483647,
}

public enum VkStencilOp {
    
    /// VK_STENCIL_OP_KEEP -> 0
    VK_STENCIL_OP_KEEP = 0,
    
    /// VK_STENCIL_OP_ZERO -> 1
    VK_STENCIL_OP_ZERO = 1,
    
    /// VK_STENCIL_OP_REPLACE -> 2
    VK_STENCIL_OP_REPLACE = 2,
    
    /// VK_STENCIL_OP_INCREMENT_AND_CLAMP -> 3
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    
    /// VK_STENCIL_OP_DECREMENT_AND_CLAMP -> 4
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    
    /// VK_STENCIL_OP_INVERT -> 5
    VK_STENCIL_OP_INVERT = 5,
    
    /// VK_STENCIL_OP_INCREMENT_AND_WRAP -> 6
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
    
    /// VK_STENCIL_OP_DECREMENT_AND_WRAP -> 7
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
    
    /// VK_STENCIL_OP_BEGIN_RANGE -> VK_STENCIL_OP_KEEP
    VK_STENCIL_OP_BEGIN_RANGE = VkStencilOp.VK_STENCIL_OP_KEEP,
    
    /// VK_STENCIL_OP_END_RANGE -> VK_STENCIL_OP_DECREMENT_AND_WRAP
    VK_STENCIL_OP_END_RANGE = VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_WRAP,
    
    /// VK_STENCIL_OP_RANGE_SIZE -> (VK_STENCIL_OP_DECREMENT_AND_WRAP-VK_STENCIL_OP_KEEP+1)
    VK_STENCIL_OP_RANGE_SIZE = (VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_WRAP 
                - (VkStencilOp.VK_STENCIL_OP_KEEP + 1)),
    
    /// VK_STENCIL_OP_MAX_ENUM -> 0x7FFFFFFF
    VK_STENCIL_OP_MAX_ENUM = 2147483647,
}

public enum VkLogicOp {
    
    /// VK_LOGIC_OP_CLEAR -> 0
    VK_LOGIC_OP_CLEAR = 0,
    
    /// VK_LOGIC_OP_AND -> 1
    VK_LOGIC_OP_AND = 1,
    
    /// VK_LOGIC_OP_AND_REVERSE -> 2
    VK_LOGIC_OP_AND_REVERSE = 2,
    
    /// VK_LOGIC_OP_COPY -> 3
    VK_LOGIC_OP_COPY = 3,
    
    /// VK_LOGIC_OP_AND_INVERTED -> 4
    VK_LOGIC_OP_AND_INVERTED = 4,
    
    /// VK_LOGIC_OP_NO_OP -> 5
    VK_LOGIC_OP_NO_OP = 5,
    
    /// VK_LOGIC_OP_XOR -> 6
    VK_LOGIC_OP_XOR = 6,
    
    /// VK_LOGIC_OP_OR -> 7
    VK_LOGIC_OP_OR = 7,
    
    /// VK_LOGIC_OP_NOR -> 8
    VK_LOGIC_OP_NOR = 8,
    
    /// VK_LOGIC_OP_EQUIVALENT -> 9
    VK_LOGIC_OP_EQUIVALENT = 9,
    
    /// VK_LOGIC_OP_INVERT -> 10
    VK_LOGIC_OP_INVERT = 10,
    
    /// VK_LOGIC_OP_OR_REVERSE -> 11
    VK_LOGIC_OP_OR_REVERSE = 11,
    
    /// VK_LOGIC_OP_COPY_INVERTED -> 12
    VK_LOGIC_OP_COPY_INVERTED = 12,
    
    /// VK_LOGIC_OP_OR_INVERTED -> 13
    VK_LOGIC_OP_OR_INVERTED = 13,
    
    /// VK_LOGIC_OP_NAND -> 14
    VK_LOGIC_OP_NAND = 14,
    
    /// VK_LOGIC_OP_SET -> 15
    VK_LOGIC_OP_SET = 15,
    
    /// VK_LOGIC_OP_BEGIN_RANGE -> VK_LOGIC_OP_CLEAR
    VK_LOGIC_OP_BEGIN_RANGE = VkLogicOp.VK_LOGIC_OP_CLEAR,
    
    /// VK_LOGIC_OP_END_RANGE -> VK_LOGIC_OP_SET
    VK_LOGIC_OP_END_RANGE = VkLogicOp.VK_LOGIC_OP_SET,
    
    /// VK_LOGIC_OP_RANGE_SIZE -> (VK_LOGIC_OP_SET-VK_LOGIC_OP_CLEAR+1)
    VK_LOGIC_OP_RANGE_SIZE = (VkLogicOp.VK_LOGIC_OP_SET 
                - (VkLogicOp.VK_LOGIC_OP_CLEAR + 1)),
    
    /// VK_LOGIC_OP_MAX_ENUM -> 0x7FFFFFFF
    VK_LOGIC_OP_MAX_ENUM = 2147483647,
}

public enum VkBlendFactor {
    
    /// VK_BLEND_FACTOR_ZERO -> 0
    VK_BLEND_FACTOR_ZERO = 0,
    
    /// VK_BLEND_FACTOR_ONE -> 1
    VK_BLEND_FACTOR_ONE = 1,
    
    /// VK_BLEND_FACTOR_SRC_COLOR -> 2
    VK_BLEND_FACTOR_SRC_COLOR = 2,
    
    /// VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR -> 3
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
    
    /// VK_BLEND_FACTOR_DST_COLOR -> 4
    VK_BLEND_FACTOR_DST_COLOR = 4,
    
    /// VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR -> 5
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
    
    /// VK_BLEND_FACTOR_SRC_ALPHA -> 6
    VK_BLEND_FACTOR_SRC_ALPHA = 6,
    
    /// VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA -> 7
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
    
    /// VK_BLEND_FACTOR_DST_ALPHA -> 8
    VK_BLEND_FACTOR_DST_ALPHA = 8,
    
    /// VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA -> 9
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
    
    /// VK_BLEND_FACTOR_CONSTANT_COLOR -> 10
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
    
    /// VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR -> 11
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    
    /// VK_BLEND_FACTOR_CONSTANT_ALPHA -> 12
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
    
    /// VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA -> 13
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    
    /// VK_BLEND_FACTOR_SRC_ALPHA_SATURATE -> 14
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
    
    /// VK_BLEND_FACTOR_SRC1_COLOR -> 15
    VK_BLEND_FACTOR_SRC1_COLOR = 15,
    
    /// VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR -> 16
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
    
    /// VK_BLEND_FACTOR_SRC1_ALPHA -> 17
    VK_BLEND_FACTOR_SRC1_ALPHA = 17,
    
    /// VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA -> 18
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
    
    /// VK_BLEND_FACTOR_BEGIN_RANGE -> VK_BLEND_FACTOR_ZERO
    VK_BLEND_FACTOR_BEGIN_RANGE = VkBlendFactor.VK_BLEND_FACTOR_ZERO,
    
    /// VK_BLEND_FACTOR_END_RANGE -> VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA
    VK_BLEND_FACTOR_END_RANGE = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,
    
    /// VK_BLEND_FACTOR_RANGE_SIZE -> (VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA-VK_BLEND_FACTOR_ZERO+1)
    VK_BLEND_FACTOR_RANGE_SIZE = (VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA 
                - (VkBlendFactor.VK_BLEND_FACTOR_ZERO + 1)),
    
    /// VK_BLEND_FACTOR_MAX_ENUM -> 0x7FFFFFFF
    VK_BLEND_FACTOR_MAX_ENUM = 2147483647,
}

public enum VkBlendOp {
    
    /// VK_BLEND_OP_ADD -> 0
    VK_BLEND_OP_ADD = 0,
    
    /// VK_BLEND_OP_SUBTRACT -> 1
    VK_BLEND_OP_SUBTRACT = 1,
    
    /// VK_BLEND_OP_REVERSE_SUBTRACT -> 2
    VK_BLEND_OP_REVERSE_SUBTRACT = 2,
    
    /// VK_BLEND_OP_MIN -> 3
    VK_BLEND_OP_MIN = 3,
    
    /// VK_BLEND_OP_MAX -> 4
    VK_BLEND_OP_MAX = 4,
    
    /// VK_BLEND_OP_BEGIN_RANGE -> VK_BLEND_OP_ADD
    VK_BLEND_OP_BEGIN_RANGE = VkBlendOp.VK_BLEND_OP_ADD,
    
    /// VK_BLEND_OP_END_RANGE -> VK_BLEND_OP_MAX
    VK_BLEND_OP_END_RANGE = VkBlendOp.VK_BLEND_OP_MAX,
    
    /// VK_BLEND_OP_RANGE_SIZE -> (VK_BLEND_OP_MAX-VK_BLEND_OP_ADD+1)
    VK_BLEND_OP_RANGE_SIZE = (VkBlendOp.VK_BLEND_OP_MAX 
                - (VkBlendOp.VK_BLEND_OP_ADD + 1)),
    
    /// VK_BLEND_OP_MAX_ENUM -> 0x7FFFFFFF
    VK_BLEND_OP_MAX_ENUM = 2147483647,
}

public enum VkDynamicState {
    
    /// VK_DYNAMIC_STATE_VIEWPORT -> 0
    VK_DYNAMIC_STATE_VIEWPORT = 0,
    
    /// VK_DYNAMIC_STATE_SCISSOR -> 1
    VK_DYNAMIC_STATE_SCISSOR = 1,
    
    /// VK_DYNAMIC_STATE_LINE_WIDTH -> 2
    VK_DYNAMIC_STATE_LINE_WIDTH = 2,
    
    /// VK_DYNAMIC_STATE_DEPTH_BIAS -> 3
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
    
    /// VK_DYNAMIC_STATE_BLEND_CONSTANTS -> 4
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
    
    /// VK_DYNAMIC_STATE_DEPTH_BOUNDS -> 5
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
    
    /// VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK -> 6
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
    
    /// VK_DYNAMIC_STATE_STENCIL_WRITE_MASK -> 7
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
    
    /// VK_DYNAMIC_STATE_STENCIL_REFERENCE -> 8
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
    
    /// VK_DYNAMIC_STATE_BEGIN_RANGE -> VK_DYNAMIC_STATE_VIEWPORT
    VK_DYNAMIC_STATE_BEGIN_RANGE = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT,
    
    /// VK_DYNAMIC_STATE_END_RANGE -> VK_DYNAMIC_STATE_STENCIL_REFERENCE
    VK_DYNAMIC_STATE_END_RANGE = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_REFERENCE,
    
    /// VK_DYNAMIC_STATE_RANGE_SIZE -> (VK_DYNAMIC_STATE_STENCIL_REFERENCE-VK_DYNAMIC_STATE_VIEWPORT+1)
    VK_DYNAMIC_STATE_RANGE_SIZE = (VkDynamicState.VK_DYNAMIC_STATE_STENCIL_REFERENCE 
                - (VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT + 1)),
    
    /// VK_DYNAMIC_STATE_MAX_ENUM -> 0x7FFFFFFF
    VK_DYNAMIC_STATE_MAX_ENUM = 2147483647,
}

public enum VkFilter {
    
    /// VK_FILTER_NEAREST -> 0
    VK_FILTER_NEAREST = 0,
    
    /// VK_FILTER_LINEAR -> 1
    VK_FILTER_LINEAR = 1,
    
    /// VK_FILTER_BEGIN_RANGE -> VK_FILTER_NEAREST
    VK_FILTER_BEGIN_RANGE = VkFilter.VK_FILTER_NEAREST,
    
    /// VK_FILTER_END_RANGE -> VK_FILTER_LINEAR
    VK_FILTER_END_RANGE = VkFilter.VK_FILTER_LINEAR,
    
    /// VK_FILTER_RANGE_SIZE -> (VK_FILTER_LINEAR-VK_FILTER_NEAREST+1)
    VK_FILTER_RANGE_SIZE = (VkFilter.VK_FILTER_LINEAR 
                - (VkFilter.VK_FILTER_NEAREST + 1)),
    
    /// VK_FILTER_MAX_ENUM -> 0x7FFFFFFF
    VK_FILTER_MAX_ENUM = 2147483647,
}

public enum VkSamplerMipmapMode {
    
    /// VK_SAMPLER_MIPMAP_MODE_NEAREST -> 0
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
    
    /// VK_SAMPLER_MIPMAP_MODE_LINEAR -> 1
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
    
    /// VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE -> VK_SAMPLER_MIPMAP_MODE_NEAREST
    VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_NEAREST,
    
    /// VK_SAMPLER_MIPMAP_MODE_END_RANGE -> VK_SAMPLER_MIPMAP_MODE_LINEAR
    VK_SAMPLER_MIPMAP_MODE_END_RANGE = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_LINEAR,
    
    /// VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE -> (VK_SAMPLER_MIPMAP_MODE_LINEAR-VK_SAMPLER_MIPMAP_MODE_NEAREST+1)
    VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE = (VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_LINEAR 
                - (VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_NEAREST + 1)),
    
    /// VK_SAMPLER_MIPMAP_MODE_MAX_ENUM -> 0x7FFFFFFF
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647,
}

public enum VkSamplerAddressMode {
    
    /// VK_SAMPLER_ADDRESS_MODE_REPEAT -> 0
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
    
    /// VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT -> 1
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
    
    /// VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE -> 2
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
    
    /// VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER -> 3
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
    
    /// VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE -> 4
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
    
    /// VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE -> VK_SAMPLER_ADDRESS_MODE_REPEAT
    VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_REPEAT,
    
    /// VK_SAMPLER_ADDRESS_MODE_END_RANGE -> VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE
    VK_SAMPLER_ADDRESS_MODE_END_RANGE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
    
    /// VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE -> (VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE-VK_SAMPLER_ADDRESS_MODE_REPEAT+1)
    VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE = (VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE 
                - (VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_REPEAT + 1)),
    
    /// VK_SAMPLER_ADDRESS_MODE_MAX_ENUM -> 0x7FFFFFFF
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647,
}

public enum VkBorderColor {
    
    /// VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK -> 0
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    
    /// VK_BORDER_COLOR_INT_TRANSPARENT_BLACK -> 1
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
    
    /// VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK -> 2
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
    
    /// VK_BORDER_COLOR_INT_OPAQUE_BLACK -> 3
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
    
    /// VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE -> 4
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
    
    /// VK_BORDER_COLOR_INT_OPAQUE_WHITE -> 5
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
    
    /// VK_BORDER_COLOR_BEGIN_RANGE -> VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK
    VK_BORDER_COLOR_BEGIN_RANGE = VkBorderColor.VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,
    
    /// VK_BORDER_COLOR_END_RANGE -> VK_BORDER_COLOR_INT_OPAQUE_WHITE
    VK_BORDER_COLOR_END_RANGE = VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_WHITE,
    
    /// VK_BORDER_COLOR_RANGE_SIZE -> (VK_BORDER_COLOR_INT_OPAQUE_WHITE-VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK+1)
    VK_BORDER_COLOR_RANGE_SIZE = (VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_WHITE 
                - (VkBorderColor.VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK + 1)),
    
    /// VK_BORDER_COLOR_MAX_ENUM -> 0x7FFFFFFF
    VK_BORDER_COLOR_MAX_ENUM = 2147483647,
}

public enum VkDescriptorType {
    
    /// VK_DESCRIPTOR_TYPE_SAMPLER -> 0
    VK_DESCRIPTOR_TYPE_SAMPLER = 0,
    
    /// VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER -> 1
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    
    /// VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE -> 2
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    
    /// VK_DESCRIPTOR_TYPE_STORAGE_IMAGE -> 3
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    
    /// VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER -> 4
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    
    /// VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER -> 5
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    
    /// VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER -> 6
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    
    /// VK_DESCRIPTOR_TYPE_STORAGE_BUFFER -> 7
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    
    /// VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC -> 8
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    
    /// VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC -> 9
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    
    /// VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT -> 10
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
    
    /// VK_DESCRIPTOR_TYPE_BEGIN_RANGE -> VK_DESCRIPTOR_TYPE_SAMPLER
    VK_DESCRIPTOR_TYPE_BEGIN_RANGE = VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLER,
    
    /// VK_DESCRIPTOR_TYPE_END_RANGE -> VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT
    VK_DESCRIPTOR_TYPE_END_RANGE = VkDescriptorType.VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,
    
    /// VK_DESCRIPTOR_TYPE_RANGE_SIZE -> (VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT-VK_DESCRIPTOR_TYPE_SAMPLER+1)
    VK_DESCRIPTOR_TYPE_RANGE_SIZE = (VkDescriptorType.VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT 
                - (VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLER + 1)),
    
    /// VK_DESCRIPTOR_TYPE_MAX_ENUM -> 0x7FFFFFFF
    VK_DESCRIPTOR_TYPE_MAX_ENUM = 2147483647,
}

public enum VkAttachmentLoadOp {
    
    /// VK_ATTACHMENT_LOAD_OP_LOAD -> 0
    VK_ATTACHMENT_LOAD_OP_LOAD = 0,
    
    /// VK_ATTACHMENT_LOAD_OP_CLEAR -> 1
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
    
    /// VK_ATTACHMENT_LOAD_OP_DONT_CARE -> 2
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
    
    /// VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE -> VK_ATTACHMENT_LOAD_OP_LOAD
    VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_LOAD,
    
    /// VK_ATTACHMENT_LOAD_OP_END_RANGE -> VK_ATTACHMENT_LOAD_OP_DONT_CARE
    VK_ATTACHMENT_LOAD_OP_END_RANGE = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_DONT_CARE,
    
    /// VK_ATTACHMENT_LOAD_OP_RANGE_SIZE -> (VK_ATTACHMENT_LOAD_OP_DONT_CARE-VK_ATTACHMENT_LOAD_OP_LOAD+1)
    VK_ATTACHMENT_LOAD_OP_RANGE_SIZE = (VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_DONT_CARE 
                - (VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_LOAD + 1)),
    
    /// VK_ATTACHMENT_LOAD_OP_MAX_ENUM -> 0x7FFFFFFF
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647,
}

public enum VkAttachmentStoreOp {
    
    /// VK_ATTACHMENT_STORE_OP_STORE -> 0
    VK_ATTACHMENT_STORE_OP_STORE = 0,
    
    /// VK_ATTACHMENT_STORE_OP_DONT_CARE -> 1
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
    
    /// VK_ATTACHMENT_STORE_OP_BEGIN_RANGE -> VK_ATTACHMENT_STORE_OP_STORE
    VK_ATTACHMENT_STORE_OP_BEGIN_RANGE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_STORE,
    
    /// VK_ATTACHMENT_STORE_OP_END_RANGE -> VK_ATTACHMENT_STORE_OP_DONT_CARE
    VK_ATTACHMENT_STORE_OP_END_RANGE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_DONT_CARE,
    
    /// VK_ATTACHMENT_STORE_OP_RANGE_SIZE -> (VK_ATTACHMENT_STORE_OP_DONT_CARE-VK_ATTACHMENT_STORE_OP_STORE+1)
    VK_ATTACHMENT_STORE_OP_RANGE_SIZE = (VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_DONT_CARE 
                - (VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_STORE + 1)),
    
    /// VK_ATTACHMENT_STORE_OP_MAX_ENUM -> 0x7FFFFFFF
    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647,
}

public enum VkPipelineBindPoint {
    
    /// VK_PIPELINE_BIND_POINT_GRAPHICS -> 0
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
    
    /// VK_PIPELINE_BIND_POINT_COMPUTE -> 1
    VK_PIPELINE_BIND_POINT_COMPUTE = 1,
    
    /// VK_PIPELINE_BIND_POINT_BEGIN_RANGE -> VK_PIPELINE_BIND_POINT_GRAPHICS
    VK_PIPELINE_BIND_POINT_BEGIN_RANGE = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_GRAPHICS,
    
    /// VK_PIPELINE_BIND_POINT_END_RANGE -> VK_PIPELINE_BIND_POINT_COMPUTE
    VK_PIPELINE_BIND_POINT_END_RANGE = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_COMPUTE,
    
    /// VK_PIPELINE_BIND_POINT_RANGE_SIZE -> (VK_PIPELINE_BIND_POINT_COMPUTE-VK_PIPELINE_BIND_POINT_GRAPHICS+1)
    VK_PIPELINE_BIND_POINT_RANGE_SIZE = (VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_COMPUTE 
                - (VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_GRAPHICS + 1)),
    
    /// VK_PIPELINE_BIND_POINT_MAX_ENUM -> 0x7FFFFFFF
    VK_PIPELINE_BIND_POINT_MAX_ENUM = 2147483647,
}

public enum VkCommandBufferLevel {
    
    /// VK_COMMAND_BUFFER_LEVEL_PRIMARY -> 0
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
    
    /// VK_COMMAND_BUFFER_LEVEL_SECONDARY -> 1
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
    
    /// VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE -> VK_COMMAND_BUFFER_LEVEL_PRIMARY
    VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_PRIMARY,
    
    /// VK_COMMAND_BUFFER_LEVEL_END_RANGE -> VK_COMMAND_BUFFER_LEVEL_SECONDARY
    VK_COMMAND_BUFFER_LEVEL_END_RANGE = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_SECONDARY,
    
    /// VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE -> (VK_COMMAND_BUFFER_LEVEL_SECONDARY-VK_COMMAND_BUFFER_LEVEL_PRIMARY+1)
    VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE = (VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_SECONDARY 
                - (VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_PRIMARY + 1)),
    
    /// VK_COMMAND_BUFFER_LEVEL_MAX_ENUM -> 0x7FFFFFFF
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647,
}

public enum VkIndexType {
    
    /// VK_INDEX_TYPE_UINT16 -> 0
    VK_INDEX_TYPE_UINT16 = 0,
    
    /// VK_INDEX_TYPE_UINT32 -> 1
    VK_INDEX_TYPE_UINT32 = 1,
    
    /// VK_INDEX_TYPE_BEGIN_RANGE -> VK_INDEX_TYPE_UINT16
    VK_INDEX_TYPE_BEGIN_RANGE = VkIndexType.VK_INDEX_TYPE_UINT16,
    
    /// VK_INDEX_TYPE_END_RANGE -> VK_INDEX_TYPE_UINT32
    VK_INDEX_TYPE_END_RANGE = VkIndexType.VK_INDEX_TYPE_UINT32,
    
    /// VK_INDEX_TYPE_RANGE_SIZE -> (VK_INDEX_TYPE_UINT32-VK_INDEX_TYPE_UINT16+1)
    VK_INDEX_TYPE_RANGE_SIZE = (VkIndexType.VK_INDEX_TYPE_UINT32 
                - (VkIndexType.VK_INDEX_TYPE_UINT16 + 1)),
    
    /// VK_INDEX_TYPE_MAX_ENUM -> 0x7FFFFFFF
    VK_INDEX_TYPE_MAX_ENUM = 2147483647,
}

public enum VkSubpassContents {
    
    /// VK_SUBPASS_CONTENTS_INLINE -> 0
    VK_SUBPASS_CONTENTS_INLINE = 0,
    
    /// VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS -> 1
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
    
    /// VK_SUBPASS_CONTENTS_BEGIN_RANGE -> VK_SUBPASS_CONTENTS_INLINE
    VK_SUBPASS_CONTENTS_BEGIN_RANGE = VkSubpassContents.VK_SUBPASS_CONTENTS_INLINE,
    
    /// VK_SUBPASS_CONTENTS_END_RANGE -> VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS
    VK_SUBPASS_CONTENTS_END_RANGE = VkSubpassContents.VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS,
    
    /// VK_SUBPASS_CONTENTS_RANGE_SIZE -> (VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS-VK_SUBPASS_CONTENTS_INLINE+1)
    VK_SUBPASS_CONTENTS_RANGE_SIZE = (VkSubpassContents.VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS 
                - (VkSubpassContents.VK_SUBPASS_CONTENTS_INLINE + 1)),
    
    /// VK_SUBPASS_CONTENTS_MAX_ENUM -> 0x7FFFFFFF
    VK_SUBPASS_CONTENTS_MAX_ENUM = 2147483647,
}

public enum VkFormatFeatureFlagBits {
    
    /// VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT -> 0x00000001
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
    
    /// VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT -> 0x00000002
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
    
    /// VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT -> 0x00000004
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
    
    /// VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT -> 0x00000008
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
    
    /// VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT -> 0x00000010
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
    
    /// VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT -> 0x00000020
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
    
    /// VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT -> 0x00000040
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
    
    /// VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT -> 0x00000080
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
    
    /// VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT -> 0x00000100
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
    
    /// VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT -> 0x00000200
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
    
    /// VK_FORMAT_FEATURE_BLIT_SRC_BIT -> 0x00000400
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
    
    /// VK_FORMAT_FEATURE_BLIT_DST_BIT -> 0x00000800
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
    
    /// VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT -> 0x00001000
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
}

public enum VkImageUsageFlagBits {
    
    /// VK_IMAGE_USAGE_TRANSFER_SRC_BIT -> 0x00000001
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
    
    /// VK_IMAGE_USAGE_TRANSFER_DST_BIT -> 0x00000002
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
    
    /// VK_IMAGE_USAGE_SAMPLED_BIT -> 0x00000004
    VK_IMAGE_USAGE_SAMPLED_BIT = 4,
    
    /// VK_IMAGE_USAGE_STORAGE_BIT -> 0x00000008
    VK_IMAGE_USAGE_STORAGE_BIT = 8,
    
    /// VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT -> 0x00000010
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
    
    /// VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT -> 0x00000020
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
    
    /// VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT -> 0x00000040
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
    
    /// VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT -> 0x00000080
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
}

public enum VkImageCreateFlagBits {
    
    /// VK_IMAGE_CREATE_SPARSE_BINDING_BIT -> 0x00000001
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
    
    /// VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT -> 0x00000002
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
    
    /// VK_IMAGE_CREATE_SPARSE_ALIASED_BIT -> 0x00000004
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
    
    /// VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT -> 0x00000008
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
    
    /// VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT -> 0x00000010
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
}

public enum VkSampleCountFlagBits {
    
    /// VK_SAMPLE_COUNT_1_BIT -> 0x00000001
    VK_SAMPLE_COUNT_1_BIT = 1,
    
    /// VK_SAMPLE_COUNT_2_BIT -> 0x00000002
    VK_SAMPLE_COUNT_2_BIT = 2,
    
    /// VK_SAMPLE_COUNT_4_BIT -> 0x00000004
    VK_SAMPLE_COUNT_4_BIT = 4,
    
    /// VK_SAMPLE_COUNT_8_BIT -> 0x00000008
    VK_SAMPLE_COUNT_8_BIT = 8,
    
    /// VK_SAMPLE_COUNT_16_BIT -> 0x00000010
    VK_SAMPLE_COUNT_16_BIT = 16,
    
    /// VK_SAMPLE_COUNT_32_BIT -> 0x00000020
    VK_SAMPLE_COUNT_32_BIT = 32,
    
    /// VK_SAMPLE_COUNT_64_BIT -> 0x00000040
    VK_SAMPLE_COUNT_64_BIT = 64,
}

public enum VkQueueFlagBits {
    
    /// VK_QUEUE_GRAPHICS_BIT -> 0x00000001
    VK_QUEUE_GRAPHICS_BIT = 1,
    
    /// VK_QUEUE_COMPUTE_BIT -> 0x00000002
    VK_QUEUE_COMPUTE_BIT = 2,
    
    /// VK_QUEUE_TRANSFER_BIT -> 0x00000004
    VK_QUEUE_TRANSFER_BIT = 4,
    
    /// VK_QUEUE_SPARSE_BINDING_BIT -> 0x00000008
    VK_QUEUE_SPARSE_BINDING_BIT = 8,
}

public enum VkMemoryPropertyFlagBits {
    
    /// VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT -> 0x00000001
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
    
    /// VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT -> 0x00000002
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
    
    /// VK_MEMORY_PROPERTY_HOST_COHERENT_BIT -> 0x00000004
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
    
    /// VK_MEMORY_PROPERTY_HOST_CACHED_BIT -> 0x00000008
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
    
    /// VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT -> 0x00000010
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
}

public enum VkMemoryHeapFlagBits {
    
    /// VK_MEMORY_HEAP_DEVICE_LOCAL_BIT -> 0x00000001
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
}

public enum VkPipelineStageFlagBits {
    
    /// VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT -> 0x00000001
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
    
    /// VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT -> 0x00000002
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
    
    /// VK_PIPELINE_STAGE_VERTEX_INPUT_BIT -> 0x00000004
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
    
    /// VK_PIPELINE_STAGE_VERTEX_SHADER_BIT -> 0x00000008
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
    
    /// VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT -> 0x00000010
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
    
    /// VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT -> 0x00000020
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
    
    /// VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT -> 0x00000040
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
    
    /// VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT -> 0x00000080
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
    
    /// VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT -> 0x00000100
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
    
    /// VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT -> 0x00000200
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
    
    /// VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT -> 0x00000400
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
    
    /// VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT -> 0x00000800
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
    
    /// VK_PIPELINE_STAGE_TRANSFER_BIT -> 0x00001000
    VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
    
    /// VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT -> 0x00002000
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
    
    /// VK_PIPELINE_STAGE_HOST_BIT -> 0x00004000
    VK_PIPELINE_STAGE_HOST_BIT = 16384,
    
    /// VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT -> 0x00008000
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
    
    /// VK_PIPELINE_STAGE_ALL_COMMANDS_BIT -> 0x00010000
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
}

public enum VkImageAspectFlagBits {
    
    /// VK_IMAGE_ASPECT_COLOR_BIT -> 0x00000001
    VK_IMAGE_ASPECT_COLOR_BIT = 1,
    
    /// VK_IMAGE_ASPECT_DEPTH_BIT -> 0x00000002
    VK_IMAGE_ASPECT_DEPTH_BIT = 2,
    
    /// VK_IMAGE_ASPECT_STENCIL_BIT -> 0x00000004
    VK_IMAGE_ASPECT_STENCIL_BIT = 4,
    
    /// VK_IMAGE_ASPECT_METADATA_BIT -> 0x00000008
    VK_IMAGE_ASPECT_METADATA_BIT = 8,
}

public enum VkSparseImageFormatFlagBits {
    
    /// VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT -> 0x00000001
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
    
    /// VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT -> 0x00000002
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
    
    /// VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT -> 0x00000004
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
}

public enum VkSparseMemoryBindFlagBits {
    
    /// VK_SPARSE_MEMORY_BIND_METADATA_BIT -> 0x00000001
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
}

public enum VkFenceCreateFlagBits {
    
    /// VK_FENCE_CREATE_SIGNALED_BIT -> 0x00000001
    VK_FENCE_CREATE_SIGNALED_BIT = 1,
}

public enum VkQueryPipelineStatisticFlagBits {
    
    /// VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT -> 0x00000001
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
    
    /// VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT -> 0x00000002
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
    
    /// VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT -> 0x00000004
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
    
    /// VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT -> 0x00000008
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
    
    /// VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT -> 0x00000010
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
    
    /// VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT -> 0x00000020
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
    
    /// VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT -> 0x00000040
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
    
    /// VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT -> 0x00000080
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
    
    /// VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT -> 0x00000100
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
    
    /// VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT -> 0x00000200
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
    
    /// VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT -> 0x00000400
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
}

public enum VkQueryResultFlagBits {
    
    /// VK_QUERY_RESULT_64_BIT -> 0x00000001
    VK_QUERY_RESULT_64_BIT = 1,
    
    /// VK_QUERY_RESULT_WAIT_BIT -> 0x00000002
    VK_QUERY_RESULT_WAIT_BIT = 2,
    
    /// VK_QUERY_RESULT_WITH_AVAILABILITY_BIT -> 0x00000004
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
    
    /// VK_QUERY_RESULT_PARTIAL_BIT -> 0x00000008
    VK_QUERY_RESULT_PARTIAL_BIT = 8,
}

public enum VkBufferCreateFlagBits {
    
    /// VK_BUFFER_CREATE_SPARSE_BINDING_BIT -> 0x00000001
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
    
    /// VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT -> 0x00000002
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
    
    /// VK_BUFFER_CREATE_SPARSE_ALIASED_BIT -> 0x00000004
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
}

public enum VkBufferUsageFlagBits {
    
    /// VK_BUFFER_USAGE_TRANSFER_SRC_BIT -> 0x00000001
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
    
    /// VK_BUFFER_USAGE_TRANSFER_DST_BIT -> 0x00000002
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
    
    /// VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT -> 0x00000004
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
    
    /// VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT -> 0x00000008
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
    
    /// VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT -> 0x00000010
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
    
    /// VK_BUFFER_USAGE_STORAGE_BUFFER_BIT -> 0x00000020
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
    
    /// VK_BUFFER_USAGE_INDEX_BUFFER_BIT -> 0x00000040
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
    
    /// VK_BUFFER_USAGE_VERTEX_BUFFER_BIT -> 0x00000080
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
    
    /// VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT -> 0x00000100
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
}

public enum VkPipelineCreateFlagBits {
    
    /// VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT -> 0x00000001
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
    
    /// VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT -> 0x00000002
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
    
    /// VK_PIPELINE_CREATE_DERIVATIVE_BIT -> 0x00000004
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
}

public enum VkShaderStageFlagBits {
    
    /// VK_SHADER_STAGE_VERTEX_BIT -> 0x00000001
    VK_SHADER_STAGE_VERTEX_BIT = 1,
    
    /// VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT -> 0x00000002
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
    
    /// VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT -> 0x00000004
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
    
    /// VK_SHADER_STAGE_GEOMETRY_BIT -> 0x00000008
    VK_SHADER_STAGE_GEOMETRY_BIT = 8,
    
    /// VK_SHADER_STAGE_FRAGMENT_BIT -> 0x00000010
    VK_SHADER_STAGE_FRAGMENT_BIT = 16,
    
    /// VK_SHADER_STAGE_COMPUTE_BIT -> 0x00000020
    VK_SHADER_STAGE_COMPUTE_BIT = 32,
    
    /// VK_SHADER_STAGE_ALL_GRAPHICS -> 0x1F
    VK_SHADER_STAGE_ALL_GRAPHICS = 31,
    
    /// VK_SHADER_STAGE_ALL -> 0x7FFFFFFF
    VK_SHADER_STAGE_ALL = 2147483647,
}

public enum VkCullModeFlagBits {
    
    /// VK_CULL_MODE_NONE -> 0
    VK_CULL_MODE_NONE = 0,
    
    /// VK_CULL_MODE_FRONT_BIT -> 0x00000001
    VK_CULL_MODE_FRONT_BIT = 1,
    
    /// VK_CULL_MODE_BACK_BIT -> 0x00000002
    VK_CULL_MODE_BACK_BIT = 2,
    
    /// VK_CULL_MODE_FRONT_AND_BACK -> 0x3
    VK_CULL_MODE_FRONT_AND_BACK = 3,
}

public enum VkColorComponentFlagBits {
    
    /// VK_COLOR_COMPONENT_R_BIT -> 0x00000001
    VK_COLOR_COMPONENT_R_BIT = 1,
    
    /// VK_COLOR_COMPONENT_G_BIT -> 0x00000002
    VK_COLOR_COMPONENT_G_BIT = 2,
    
    /// VK_COLOR_COMPONENT_B_BIT -> 0x00000004
    VK_COLOR_COMPONENT_B_BIT = 4,
    
    /// VK_COLOR_COMPONENT_A_BIT -> 0x00000008
    VK_COLOR_COMPONENT_A_BIT = 8,
}

public enum VkDescriptorPoolCreateFlagBits {
    
    /// VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT -> 0x00000001
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
}

public enum VkAttachmentDescriptionFlagBits {
    
    /// VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT -> 0x00000001
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
}

public enum VkAccessFlagBits {
    
    /// VK_ACCESS_INDIRECT_COMMAND_READ_BIT -> 0x00000001
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
    
    /// VK_ACCESS_INDEX_READ_BIT -> 0x00000002
    VK_ACCESS_INDEX_READ_BIT = 2,
    
    /// VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT -> 0x00000004
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
    
    /// VK_ACCESS_UNIFORM_READ_BIT -> 0x00000008
    VK_ACCESS_UNIFORM_READ_BIT = 8,
    
    /// VK_ACCESS_INPUT_ATTACHMENT_READ_BIT -> 0x00000010
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
    
    /// VK_ACCESS_SHADER_READ_BIT -> 0x00000020
    VK_ACCESS_SHADER_READ_BIT = 32,
    
    /// VK_ACCESS_SHADER_WRITE_BIT -> 0x00000040
    VK_ACCESS_SHADER_WRITE_BIT = 64,
    
    /// VK_ACCESS_COLOR_ATTACHMENT_READ_BIT -> 0x00000080
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
    
    /// VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT -> 0x00000100
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
    
    /// VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT -> 0x00000200
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
    
    /// VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT -> 0x00000400
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
    
    /// VK_ACCESS_TRANSFER_READ_BIT -> 0x00000800
    VK_ACCESS_TRANSFER_READ_BIT = 2048,
    
    /// VK_ACCESS_TRANSFER_WRITE_BIT -> 0x00001000
    VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
    
    /// VK_ACCESS_HOST_READ_BIT -> 0x00002000
    VK_ACCESS_HOST_READ_BIT = 8192,
    
    /// VK_ACCESS_HOST_WRITE_BIT -> 0x00004000
    VK_ACCESS_HOST_WRITE_BIT = 16384,
    
    /// VK_ACCESS_MEMORY_READ_BIT -> 0x00008000
    VK_ACCESS_MEMORY_READ_BIT = 32768,
    
    /// VK_ACCESS_MEMORY_WRITE_BIT -> 0x00010000
    VK_ACCESS_MEMORY_WRITE_BIT = 65536,
}

public enum VkDependencyFlagBits {
    
    /// VK_DEPENDENCY_BY_REGION_BIT -> 0x00000001
    VK_DEPENDENCY_BY_REGION_BIT = 1,
}

public enum VkCommandPoolCreateFlagBits {
    
    /// VK_COMMAND_POOL_CREATE_TRANSIENT_BIT -> 0x00000001
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
    
    /// VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT -> 0x00000002
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
}

public enum VkCommandPoolResetFlagBits {
    
    /// VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT -> 0x00000001
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
}

public enum VkCommandBufferUsageFlagBits {
    
    /// VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT -> 0x00000001
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
    
    /// VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT -> 0x00000002
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
    
    /// VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT -> 0x00000004
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
}

public enum VkQueryControlFlagBits {
    
    /// VK_QUERY_CONTROL_PRECISE_BIT -> 0x00000001
    VK_QUERY_CONTROL_PRECISE_BIT = 1,
}

public enum VkCommandBufferResetFlagBits {
    
    /// VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT -> 0x00000001
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
}

public enum VkStencilFaceFlagBits {
    
    /// VK_STENCIL_FACE_FRONT_BIT -> 0x00000001
    VK_STENCIL_FACE_FRONT_BIT = 1,
    
    /// VK_STENCIL_FACE_BACK_BIT -> 0x00000002
    VK_STENCIL_FACE_BACK_BIT = 2,
    
    /// VK_STENCIL_FRONT_AND_BACK -> 0x3
    VK_STENCIL_FRONT_AND_BACK = 3,
}

/// Return Type: void*
///pUserData: void*
///size: size_t->unsigned int
///alignment: size_t->unsigned int
///allocationScope: VkSystemAllocationScope
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate System.IntPtr PFN_vkAllocationFunction(System.IntPtr pUserData, System.IntPtr size, System.IntPtr alignment, VkSystemAllocationScope allocationScope);

/// Return Type: void*
///pUserData: void*
///pOriginal: void*
///size: size_t->unsigned int
///alignment: size_t->unsigned int
///allocationScope: VkSystemAllocationScope
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate System.IntPtr PFN_vkReallocationFunction(System.IntPtr pUserData, System.IntPtr pOriginal, System.IntPtr size, System.IntPtr alignment, VkSystemAllocationScope allocationScope);

/// Return Type: void
///pUserData: void*
///pMemory: void*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkFreeFunction(System.IntPtr pUserData, System.IntPtr pMemory);

/// Return Type: void
///pUserData: void*
///size: size_t->unsigned int
///allocationType: VkInternalAllocationType
///allocationScope: VkSystemAllocationScope
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkInternalAllocationNotification(System.IntPtr pUserData, System.IntPtr size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope);

/// Return Type: void
///pUserData: void*
///size: size_t->unsigned int
///allocationType: VkInternalAllocationType
///allocationScope: VkSystemAllocationScope
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkInternalFreeNotification(System.IntPtr pUserData, System.IntPtr size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope);

/// Return Type: void
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkVoidFunction();

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkApplicationInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// char*
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)]
    public string pApplicationName;
    
    /// uint32_t->unsigned int
    public uint applicationVersion;
    
    /// char*
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)]
    public string pEngineName;
    
    /// uint32_t->unsigned int
    public uint engineVersion;
    
    /// uint32_t->unsigned int
    public uint apiVersion;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkInstanceCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkInstanceCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkApplicationInfo*
    public System.IntPtr pApplicationInfo;
    
    /// uint32_t->unsigned int
    public uint enabledLayerCount;
    
    /// char**
    public System.IntPtr ppEnabledLayerNames;
    
    /// uint32_t->unsigned int
    public uint enabledExtensionCount;
    
    /// char**
    public System.IntPtr ppEnabledExtensionNames;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkAllocationCallbacks {
    
    /// void*
    public System.IntPtr pUserData;
    
    /// PFN_vkAllocationFunction
    public PFN_vkAllocationFunction pfnAllocation;
    
    /// PFN_vkReallocationFunction
    public PFN_vkReallocationFunction pfnReallocation;
    
    /// PFN_vkFreeFunction
    public PFN_vkFreeFunction pfnFree;
    
    /// PFN_vkInternalAllocationNotification
    public PFN_vkInternalAllocationNotification pfnInternalAllocation;
    
    /// PFN_vkInternalFreeNotification
    public PFN_vkInternalFreeNotification pfnInternalFree;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPhysicalDeviceFeatures {
    
    /// VkBool32->uint32_t->unsigned int
    public uint robustBufferAccess;
    
    /// VkBool32->uint32_t->unsigned int
    public uint fullDrawIndexUint32;
    
    /// VkBool32->uint32_t->unsigned int
    public uint imageCubeArray;
    
    /// VkBool32->uint32_t->unsigned int
    public uint independentBlend;
    
    /// VkBool32->uint32_t->unsigned int
    public uint geometryShader;
    
    /// VkBool32->uint32_t->unsigned int
    public uint tessellationShader;
    
    /// VkBool32->uint32_t->unsigned int
    public uint sampleRateShading;
    
    /// VkBool32->uint32_t->unsigned int
    public uint dualSrcBlend;
    
    /// VkBool32->uint32_t->unsigned int
    public uint logicOp;
    
    /// VkBool32->uint32_t->unsigned int
    public uint multiDrawIndirect;
    
    /// VkBool32->uint32_t->unsigned int
    public uint drawIndirectFirstInstance;
    
    /// VkBool32->uint32_t->unsigned int
    public uint depthClamp;
    
    /// VkBool32->uint32_t->unsigned int
    public uint depthBiasClamp;
    
    /// VkBool32->uint32_t->unsigned int
    public uint fillModeNonSolid;
    
    /// VkBool32->uint32_t->unsigned int
    public uint depthBounds;
    
    /// VkBool32->uint32_t->unsigned int
    public uint wideLines;
    
    /// VkBool32->uint32_t->unsigned int
    public uint largePoints;
    
    /// VkBool32->uint32_t->unsigned int
    public uint alphaToOne;
    
    /// VkBool32->uint32_t->unsigned int
    public uint multiViewport;
    
    /// VkBool32->uint32_t->unsigned int
    public uint samplerAnisotropy;
    
    /// VkBool32->uint32_t->unsigned int
    public uint textureCompressionETC2;
    
    /// VkBool32->uint32_t->unsigned int
    public uint textureCompressionASTC_LDR;
    
    /// VkBool32->uint32_t->unsigned int
    public uint textureCompressionBC;
    
    /// VkBool32->uint32_t->unsigned int
    public uint occlusionQueryPrecise;
    
    /// VkBool32->uint32_t->unsigned int
    public uint pipelineStatisticsQuery;
    
    /// VkBool32->uint32_t->unsigned int
    public uint vertexPipelineStoresAndAtomics;
    
    /// VkBool32->uint32_t->unsigned int
    public uint fragmentStoresAndAtomics;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderTessellationAndGeometryPointSize;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderImageGatherExtended;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderStorageImageExtendedFormats;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderStorageImageMultisample;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderStorageImageReadWithoutFormat;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderStorageImageWriteWithoutFormat;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderUniformBufferArrayDynamicIndexing;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderSampledImageArrayDynamicIndexing;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderStorageBufferArrayDynamicIndexing;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderStorageImageArrayDynamicIndexing;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderClipDistance;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderCullDistance;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderFloat64;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderInt64;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderInt16;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderResourceResidency;
    
    /// VkBool32->uint32_t->unsigned int
    public uint shaderResourceMinLod;
    
    /// VkBool32->uint32_t->unsigned int
    public uint sparseBinding;
    
    /// VkBool32->uint32_t->unsigned int
    public uint sparseResidencyBuffer;
    
    /// VkBool32->uint32_t->unsigned int
    public uint sparseResidencyImage2D;
    
    /// VkBool32->uint32_t->unsigned int
    public uint sparseResidencyImage3D;
    
    /// VkBool32->uint32_t->unsigned int
    public uint sparseResidency2Samples;
    
    /// VkBool32->uint32_t->unsigned int
    public uint sparseResidency4Samples;
    
    /// VkBool32->uint32_t->unsigned int
    public uint sparseResidency8Samples;
    
    /// VkBool32->uint32_t->unsigned int
    public uint sparseResidency16Samples;
    
    /// VkBool32->uint32_t->unsigned int
    public uint sparseResidencyAliased;
    
    /// VkBool32->uint32_t->unsigned int
    public uint variableMultisampleRate;
    
    /// VkBool32->uint32_t->unsigned int
    public uint inheritedQueries;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkFormatProperties {
    
    /// VkFormatFeatureFlags->VkFlags->uint32_t->unsigned int
    public uint linearTilingFeatures;
    
    /// VkFormatFeatureFlags->VkFlags->uint32_t->unsigned int
    public uint optimalTilingFeatures;
    
    /// VkFormatFeatureFlags->VkFlags->uint32_t->unsigned int
    public uint bufferFeatures;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkExtent3D {
    
    /// uint32_t->unsigned int
    public uint width;
    
    /// uint32_t->unsigned int
    public uint height;
    
    /// uint32_t->unsigned int
    public uint depth;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkImageFormatProperties {
    
    /// VkExtent3D
    public VkExtent3D maxExtent;
    
    /// uint32_t->unsigned int
    public uint maxMipLevels;
    
    /// uint32_t->unsigned int
    public uint maxArrayLayers;
    
    /// VkSampleCountFlags->VkFlags->uint32_t->unsigned int
    public uint sampleCounts;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint maxResourceSize;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPhysicalDeviceLimits {
    
    /// uint32_t->unsigned int
    public uint maxImageDimension1D;
    
    /// uint32_t->unsigned int
    public uint maxImageDimension2D;
    
    /// uint32_t->unsigned int
    public uint maxImageDimension3D;
    
    /// uint32_t->unsigned int
    public uint maxImageDimensionCube;
    
    /// uint32_t->unsigned int
    public uint maxImageArrayLayers;
    
    /// uint32_t->unsigned int
    public uint maxTexelBufferElements;
    
    /// uint32_t->unsigned int
    public uint maxUniformBufferRange;
    
    /// uint32_t->unsigned int
    public uint maxStorageBufferRange;
    
    /// uint32_t->unsigned int
    public uint maxPushConstantsSize;
    
    /// uint32_t->unsigned int
    public uint maxMemoryAllocationCount;
    
    /// uint32_t->unsigned int
    public uint maxSamplerAllocationCount;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint bufferImageGranularity;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint sparseAddressSpaceSize;
    
    /// uint32_t->unsigned int
    public uint maxBoundDescriptorSets;
    
    /// uint32_t->unsigned int
    public uint maxPerStageDescriptorSamplers;
    
    /// uint32_t->unsigned int
    public uint maxPerStageDescriptorUniformBuffers;
    
    /// uint32_t->unsigned int
    public uint maxPerStageDescriptorStorageBuffers;
    
    /// uint32_t->unsigned int
    public uint maxPerStageDescriptorSampledImages;
    
    /// uint32_t->unsigned int
    public uint maxPerStageDescriptorStorageImages;
    
    /// uint32_t->unsigned int
    public uint maxPerStageDescriptorInputAttachments;
    
    /// uint32_t->unsigned int
    public uint maxPerStageResources;
    
    /// uint32_t->unsigned int
    public uint maxDescriptorSetSamplers;
    
    /// uint32_t->unsigned int
    public uint maxDescriptorSetUniformBuffers;
    
    /// uint32_t->unsigned int
    public uint maxDescriptorSetUniformBuffersDynamic;
    
    /// uint32_t->unsigned int
    public uint maxDescriptorSetStorageBuffers;
    
    /// uint32_t->unsigned int
    public uint maxDescriptorSetStorageBuffersDynamic;
    
    /// uint32_t->unsigned int
    public uint maxDescriptorSetSampledImages;
    
    /// uint32_t->unsigned int
    public uint maxDescriptorSetStorageImages;
    
    /// uint32_t->unsigned int
    public uint maxDescriptorSetInputAttachments;
    
    /// uint32_t->unsigned int
    public uint maxVertexInputAttributes;
    
    /// uint32_t->unsigned int
    public uint maxVertexInputBindings;
    
    /// uint32_t->unsigned int
    public uint maxVertexInputAttributeOffset;
    
    /// uint32_t->unsigned int
    public uint maxVertexInputBindingStride;
    
    /// uint32_t->unsigned int
    public uint maxVertexOutputComponents;
    
    /// uint32_t->unsigned int
    public uint maxTessellationGenerationLevel;
    
    /// uint32_t->unsigned int
    public uint maxTessellationPatchSize;
    
    /// uint32_t->unsigned int
    public uint maxTessellationControlPerVertexInputComponents;
    
    /// uint32_t->unsigned int
    public uint maxTessellationControlPerVertexOutputComponents;
    
    /// uint32_t->unsigned int
    public uint maxTessellationControlPerPatchOutputComponents;
    
    /// uint32_t->unsigned int
    public uint maxTessellationControlTotalOutputComponents;
    
    /// uint32_t->unsigned int
    public uint maxTessellationEvaluationInputComponents;
    
    /// uint32_t->unsigned int
    public uint maxTessellationEvaluationOutputComponents;
    
    /// uint32_t->unsigned int
    public uint maxGeometryShaderInvocations;
    
    /// uint32_t->unsigned int
    public uint maxGeometryInputComponents;
    
    /// uint32_t->unsigned int
    public uint maxGeometryOutputComponents;
    
    /// uint32_t->unsigned int
    public uint maxGeometryOutputVertices;
    
    /// uint32_t->unsigned int
    public uint maxGeometryTotalOutputComponents;
    
    /// uint32_t->unsigned int
    public uint maxFragmentInputComponents;
    
    /// uint32_t->unsigned int
    public uint maxFragmentOutputAttachments;
    
    /// uint32_t->unsigned int
    public uint maxFragmentDualSrcAttachments;
    
    /// uint32_t->unsigned int
    public uint maxFragmentCombinedOutputResources;
    
    /// uint32_t->unsigned int
    public uint maxComputeSharedMemorySize;
    
    /// uint32_t[3]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=3, ArraySubType=System.Runtime.InteropServices.UnmanagedType.U4)]
    public uint[] maxComputeWorkGroupCount;
    
    /// uint32_t->unsigned int
    public uint maxComputeWorkGroupInvocations;
    
    /// uint32_t[3]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=3, ArraySubType=System.Runtime.InteropServices.UnmanagedType.U4)]
    public uint[] maxComputeWorkGroupSize;
    
    /// uint32_t->unsigned int
    public uint subPixelPrecisionBits;
    
    /// uint32_t->unsigned int
    public uint subTexelPrecisionBits;
    
    /// uint32_t->unsigned int
    public uint mipmapPrecisionBits;
    
    /// uint32_t->unsigned int
    public uint maxDrawIndexedIndexValue;
    
    /// uint32_t->unsigned int
    public uint maxDrawIndirectCount;
    
    /// float
    public float maxSamplerLodBias;
    
    /// float
    public float maxSamplerAnisotropy;
    
    /// uint32_t->unsigned int
    public uint maxViewports;
    
    /// uint32_t[2]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=2, ArraySubType=System.Runtime.InteropServices.UnmanagedType.U4)]
    public uint[] maxViewportDimensions;
    
    /// float[2]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=2, ArraySubType=System.Runtime.InteropServices.UnmanagedType.R4)]
    public float[] viewportBoundsRange;
    
    /// uint32_t->unsigned int
    public uint viewportSubPixelBits;
    
    /// size_t->unsigned int
    public uint minMemoryMapAlignment;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint minTexelBufferOffsetAlignment;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint minUniformBufferOffsetAlignment;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint minStorageBufferOffsetAlignment;
    
    /// int32_t->int
    public int minTexelOffset;
    
    /// uint32_t->unsigned int
    public uint maxTexelOffset;
    
    /// int32_t->int
    public int minTexelGatherOffset;
    
    /// uint32_t->unsigned int
    public uint maxTexelGatherOffset;
    
    /// float
    public float minInterpolationOffset;
    
    /// float
    public float maxInterpolationOffset;
    
    /// uint32_t->unsigned int
    public uint subPixelInterpolationOffsetBits;
    
    /// uint32_t->unsigned int
    public uint maxFramebufferWidth;
    
    /// uint32_t->unsigned int
    public uint maxFramebufferHeight;
    
    /// uint32_t->unsigned int
    public uint maxFramebufferLayers;
    
    /// VkSampleCountFlags->VkFlags->uint32_t->unsigned int
    public uint framebufferColorSampleCounts;
    
    /// VkSampleCountFlags->VkFlags->uint32_t->unsigned int
    public uint framebufferDepthSampleCounts;
    
    /// VkSampleCountFlags->VkFlags->uint32_t->unsigned int
    public uint framebufferStencilSampleCounts;
    
    /// VkSampleCountFlags->VkFlags->uint32_t->unsigned int
    public uint framebufferNoAttachmentsSampleCounts;
    
    /// uint32_t->unsigned int
    public uint maxColorAttachments;
    
    /// VkSampleCountFlags->VkFlags->uint32_t->unsigned int
    public uint sampledImageColorSampleCounts;
    
    /// VkSampleCountFlags->VkFlags->uint32_t->unsigned int
    public uint sampledImageIntegerSampleCounts;
    
    /// VkSampleCountFlags->VkFlags->uint32_t->unsigned int
    public uint sampledImageDepthSampleCounts;
    
    /// VkSampleCountFlags->VkFlags->uint32_t->unsigned int
    public uint sampledImageStencilSampleCounts;
    
    /// VkSampleCountFlags->VkFlags->uint32_t->unsigned int
    public uint storageImageSampleCounts;
    
    /// uint32_t->unsigned int
    public uint maxSampleMaskWords;
    
    /// VkBool32->uint32_t->unsigned int
    public uint timestampComputeAndGraphics;
    
    /// float
    public float timestampPeriod;
    
    /// uint32_t->unsigned int
    public uint maxClipDistances;
    
    /// uint32_t->unsigned int
    public uint maxCullDistances;
    
    /// uint32_t->unsigned int
    public uint maxCombinedClipAndCullDistances;
    
    /// uint32_t->unsigned int
    public uint discreteQueuePriorities;
    
    /// float[2]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=2, ArraySubType=System.Runtime.InteropServices.UnmanagedType.R4)]
    public float[] pointSizeRange;
    
    /// float[2]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=2, ArraySubType=System.Runtime.InteropServices.UnmanagedType.R4)]
    public float[] lineWidthRange;
    
    /// float
    public float pointSizeGranularity;
    
    /// float
    public float lineWidthGranularity;
    
    /// VkBool32->uint32_t->unsigned int
    public uint strictLines;
    
    /// VkBool32->uint32_t->unsigned int
    public uint standardSampleLocations;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint optimalBufferCopyOffsetAlignment;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint optimalBufferCopyRowPitchAlignment;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint nonCoherentAtomSize;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPhysicalDeviceSparseProperties {
    
    /// VkBool32->uint32_t->unsigned int
    public uint residencyStandard2DBlockShape;
    
    /// VkBool32->uint32_t->unsigned int
    public uint residencyStandard2DMultisampleBlockShape;
    
    /// VkBool32->uint32_t->unsigned int
    public uint residencyStandard3DBlockShape;
    
    /// VkBool32->uint32_t->unsigned int
    public uint residencyAlignedMipSize;
    
    /// VkBool32->uint32_t->unsigned int
    public uint residencyNonResidentStrict;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, CharSet=System.Runtime.InteropServices.CharSet.Ansi)]
public struct VkPhysicalDeviceProperties {
    
    /// uint32_t->unsigned int
    public uint apiVersion;
    
    /// uint32_t->unsigned int
    public uint driverVersion;
    
    /// uint32_t->unsigned int
    public uint vendorID;
    
    /// uint32_t->unsigned int
    public uint deviceID;
    
    /// VkPhysicalDeviceType
    public VkPhysicalDeviceType deviceType;
    
    /// char[256]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst=256)]
    public string deviceName;
    
    /// uint8_t[16]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst=16)]
    public string pipelineCacheUUID;
    
    /// VkPhysicalDeviceLimits
    public VkPhysicalDeviceLimits limits;
    
    /// VkPhysicalDeviceSparseProperties
    public VkPhysicalDeviceSparseProperties sparseProperties;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkQueueFamilyProperties {
    
    /// VkQueueFlags->VkFlags->uint32_t->unsigned int
    public uint queueFlags;
    
    /// uint32_t->unsigned int
    public uint queueCount;
    
    /// uint32_t->unsigned int
    public uint timestampValidBits;
    
    /// VkExtent3D
    public VkExtent3D minImageTransferGranularity;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkMemoryType {
    
    /// VkMemoryPropertyFlags->VkFlags->uint32_t->unsigned int
    public uint propertyFlags;
    
    /// uint32_t->unsigned int
    public uint heapIndex;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkMemoryHeap {
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint size;
    
    /// VkMemoryHeapFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPhysicalDeviceMemoryProperties {
    
    /// uint32_t->unsigned int
    public uint memoryTypeCount;
    
    /// VkMemoryType[32]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=32, ArraySubType=System.Runtime.InteropServices.UnmanagedType.Struct)]
    public VkMemoryType[] memoryTypes;
    
    /// uint32_t->unsigned int
    public uint memoryHeapCount;
    
    /// VkMemoryHeap[16]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=16, ArraySubType=System.Runtime.InteropServices.UnmanagedType.Struct)]
    public VkMemoryHeap[] memoryHeaps;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDeviceQueueCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDeviceQueueCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint queueFamilyIndex;
    
    /// uint32_t->unsigned int
    public uint queueCount;
    
    /// float*
    public System.IntPtr pQueuePriorities;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDeviceCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDeviceCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint queueCreateInfoCount;
    
    /// VkDeviceQueueCreateInfo*
    public System.IntPtr pQueueCreateInfos;
    
    /// uint32_t->unsigned int
    public uint enabledLayerCount;
    
    /// char**
    public System.IntPtr ppEnabledLayerNames;
    
    /// uint32_t->unsigned int
    public uint enabledExtensionCount;
    
    /// char**
    public System.IntPtr ppEnabledExtensionNames;
    
    /// VkPhysicalDeviceFeatures*
    public System.IntPtr pEnabledFeatures;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, CharSet=System.Runtime.InteropServices.CharSet.Ansi)]
public struct VkExtensionProperties {
    
    /// char[256]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst=256)]
    public string extensionName;
    
    /// uint32_t->unsigned int
    public uint specVersion;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, CharSet=System.Runtime.InteropServices.CharSet.Ansi)]
public struct VkLayerProperties {
    
    /// char[256]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst=256)]
    public string layerName;
    
    /// uint32_t->unsigned int
    public uint specVersion;
    
    /// uint32_t->unsigned int
    public uint implementationVersion;
    
    /// char[256]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst=256)]
    public string description;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSubmitInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// uint32_t->unsigned int
    public uint waitSemaphoreCount;
    
    /// VkSemaphore*
    public System.IntPtr pWaitSemaphores;
    
    /// VkPipelineStageFlags*
    public System.IntPtr pWaitDstStageMask;
    
    /// uint32_t->unsigned int
    public uint commandBufferCount;
    
    /// VkCommandBuffer*
    public System.IntPtr pCommandBuffers;
    
    /// uint32_t->unsigned int
    public uint signalSemaphoreCount;
    
    /// VkSemaphore*
    public System.IntPtr pSignalSemaphores;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkMemoryAllocateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint allocationSize;
    
    /// uint32_t->unsigned int
    public uint memoryTypeIndex;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkMappedMemoryRange {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDeviceMemory->uint64_t->unsigned int
    public uint memory;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint offset;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint size;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkMemoryRequirements {
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint size;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint alignment;
    
    /// uint32_t->unsigned int
    public uint memoryTypeBits;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSparseImageFormatProperties {
    
    /// VkImageAspectFlags->VkFlags->uint32_t->unsigned int
    public uint aspectMask;
    
    /// VkExtent3D
    public VkExtent3D imageGranularity;
    
    /// VkSparseImageFormatFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSparseImageMemoryRequirements {
    
    /// VkSparseImageFormatProperties
    public VkSparseImageFormatProperties formatProperties;
    
    /// uint32_t->unsigned int
    public uint imageMipTailFirstLod;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint imageMipTailSize;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint imageMipTailOffset;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint imageMipTailStride;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSparseMemoryBind {
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint resourceOffset;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint size;
    
    /// VkDeviceMemory->uint64_t->unsigned int
    public uint memory;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint memoryOffset;
    
    /// VkSparseMemoryBindFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSparseBufferMemoryBindInfo {
    
    /// VkBuffer->uint64_t->unsigned int
    public uint buffer;
    
    /// uint32_t->unsigned int
    public uint bindCount;
    
    /// VkSparseMemoryBind*
    public System.IntPtr pBinds;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSparseImageOpaqueMemoryBindInfo {
    
    /// VkImage->uint64_t->unsigned int
    public uint image;
    
    /// uint32_t->unsigned int
    public uint bindCount;
    
    /// VkSparseMemoryBind*
    public System.IntPtr pBinds;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkImageSubresource {
    
    /// VkImageAspectFlags->VkFlags->uint32_t->unsigned int
    public uint aspectMask;
    
    /// uint32_t->unsigned int
    public uint mipLevel;
    
    /// uint32_t->unsigned int
    public uint arrayLayer;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkOffset3D {
    
    /// int32_t->int
    public int x;
    
    /// int32_t->int
    public int y;
    
    /// int32_t->int
    public int z;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSparseImageMemoryBind {
    
    /// VkImageSubresource
    public VkImageSubresource subresource;
    
    /// VkOffset3D
    public VkOffset3D offset;
    
    /// VkExtent3D
    public VkExtent3D extent;
    
    /// VkDeviceMemory->uint64_t->unsigned int
    public uint memory;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint memoryOffset;
    
    /// VkSparseMemoryBindFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSparseImageMemoryBindInfo {
    
    /// VkImage->uint64_t->unsigned int
    public uint image;
    
    /// uint32_t->unsigned int
    public uint bindCount;
    
    /// VkSparseImageMemoryBind*
    public System.IntPtr pBinds;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkBindSparseInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// uint32_t->unsigned int
    public uint waitSemaphoreCount;
    
    /// VkSemaphore*
    public System.IntPtr pWaitSemaphores;
    
    /// uint32_t->unsigned int
    public uint bufferBindCount;
    
    /// VkSparseBufferMemoryBindInfo*
    public System.IntPtr pBufferBinds;
    
    /// uint32_t->unsigned int
    public uint imageOpaqueBindCount;
    
    /// VkSparseImageOpaqueMemoryBindInfo*
    public System.IntPtr pImageOpaqueBinds;
    
    /// uint32_t->unsigned int
    public uint imageBindCount;
    
    /// VkSparseImageMemoryBindInfo*
    public System.IntPtr pImageBinds;
    
    /// uint32_t->unsigned int
    public uint signalSemaphoreCount;
    
    /// VkSemaphore*
    public System.IntPtr pSignalSemaphores;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkFenceCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkFenceCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSemaphoreCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkSemaphoreCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkEventCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkEventCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkQueryPoolCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkQueryPoolCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkQueryType
    public VkQueryType queryType;
    
    /// uint32_t->unsigned int
    public uint queryCount;
    
    /// VkQueryPipelineStatisticFlags->VkFlags->uint32_t->unsigned int
    public uint pipelineStatistics;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkBufferCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkBufferCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint size;
    
    /// VkBufferUsageFlags->VkFlags->uint32_t->unsigned int
    public uint usage;
    
    /// VkSharingMode
    public VkSharingMode sharingMode;
    
    /// uint32_t->unsigned int
    public uint queueFamilyIndexCount;
    
    /// uint32_t*
    public System.IntPtr pQueueFamilyIndices;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkBufferViewCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkBufferViewCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkBuffer->uint64_t->unsigned int
    public uint buffer;
    
    /// VkFormat
    public VkFormat format;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint offset;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint range;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkImageCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkImageCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkImageType
    public VkImageType imageType;
    
    /// VkFormat
    public VkFormat format;
    
    /// VkExtent3D
    public VkExtent3D extent;
    
    /// uint32_t->unsigned int
    public uint mipLevels;
    
    /// uint32_t->unsigned int
    public uint arrayLayers;
    
    /// VkSampleCountFlagBits
    public VkSampleCountFlagBits samples;
    
    /// VkImageTiling
    public VkImageTiling tiling;
    
    /// VkImageUsageFlags->VkFlags->uint32_t->unsigned int
    public uint usage;
    
    /// VkSharingMode
    public VkSharingMode sharingMode;
    
    /// uint32_t->unsigned int
    public uint queueFamilyIndexCount;
    
    /// uint32_t*
    public System.IntPtr pQueueFamilyIndices;
    
    /// VkImageLayout
    public VkImageLayout initialLayout;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSubresourceLayout {
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint offset;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint size;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint rowPitch;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint arrayPitch;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint depthPitch;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkComponentMapping {
    
    /// VkComponentSwizzle
    public VkComponentSwizzle r;
    
    /// VkComponentSwizzle
    public VkComponentSwizzle g;
    
    /// VkComponentSwizzle
    public VkComponentSwizzle b;
    
    /// VkComponentSwizzle
    public VkComponentSwizzle a;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkImageSubresourceRange {
    
    /// VkImageAspectFlags->VkFlags->uint32_t->unsigned int
    public uint aspectMask;
    
    /// uint32_t->unsigned int
    public uint baseMipLevel;
    
    /// uint32_t->unsigned int
    public uint levelCount;
    
    /// uint32_t->unsigned int
    public uint baseArrayLayer;
    
    /// uint32_t->unsigned int
    public uint layerCount;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkImageViewCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkImageViewCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkImage->uint64_t->unsigned int
    public uint image;
    
    /// VkImageViewType
    public VkImageViewType viewType;
    
    /// VkFormat
    public VkFormat format;
    
    /// VkComponentMapping
    public VkComponentMapping components;
    
    /// VkImageSubresourceRange
    public VkImageSubresourceRange subresourceRange;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkShaderModuleCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkShaderModuleCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// size_t->unsigned int
    public uint codeSize;
    
    /// uint32_t*
    public System.IntPtr pCode;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineCacheCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineCacheCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// size_t->unsigned int
    public uint initialDataSize;
    
    /// void*
    public System.IntPtr pInitialData;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSpecializationMapEntry {
    
    /// uint32_t->unsigned int
    public uint constantID;
    
    /// uint32_t->unsigned int
    public uint offset;
    
    /// size_t->unsigned int
    public uint size;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSpecializationInfo {
    
    /// uint32_t->unsigned int
    public uint mapEntryCount;
    
    /// VkSpecializationMapEntry*
    public System.IntPtr pMapEntries;
    
    /// size_t->unsigned int
    public uint dataSize;
    
    /// void*
    public System.IntPtr pData;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineShaderStageCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineShaderStageCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkShaderStageFlagBits
    public VkShaderStageFlagBits stage;
    
    /// VkShaderModule->uint64_t->unsigned int
    public uint module;
    
    /// char*
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)]
    public string pName;
    
    /// VkSpecializationInfo*
    public System.IntPtr pSpecializationInfo;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkVertexInputBindingDescription {
    
    /// uint32_t->unsigned int
    public uint binding;
    
    /// uint32_t->unsigned int
    public uint stride;
    
    /// VkVertexInputRate
    public VkVertexInputRate inputRate;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkVertexInputAttributeDescription {
    
    /// uint32_t->unsigned int
    public uint location;
    
    /// uint32_t->unsigned int
    public uint binding;
    
    /// VkFormat
    public VkFormat format;
    
    /// uint32_t->unsigned int
    public uint offset;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineVertexInputStateCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineVertexInputStateCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint vertexBindingDescriptionCount;
    
    /// VkVertexInputBindingDescription*
    public System.IntPtr pVertexBindingDescriptions;
    
    /// uint32_t->unsigned int
    public uint vertexAttributeDescriptionCount;
    
    /// VkVertexInputAttributeDescription*
    public System.IntPtr pVertexAttributeDescriptions;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineInputAssemblyStateCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineInputAssemblyStateCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkPrimitiveTopology
    public VkPrimitiveTopology topology;
    
    /// VkBool32->uint32_t->unsigned int
    public uint primitiveRestartEnable;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineTessellationStateCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineTessellationStateCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint patchControlPoints;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkViewport {
    
    /// float
    public float x;
    
    /// float
    public float y;
    
    /// float
    public float width;
    
    /// float
    public float height;
    
    /// float
    public float minDepth;
    
    /// float
    public float maxDepth;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkOffset2D {
    
    /// int32_t->int
    public int x;
    
    /// int32_t->int
    public int y;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkExtent2D {
    
    /// uint32_t->unsigned int
    public uint width;
    
    /// uint32_t->unsigned int
    public uint height;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkRect2D {
    
    /// VkOffset2D
    public VkOffset2D offset;
    
    /// VkExtent2D
    public VkExtent2D extent;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineViewportStateCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineViewportStateCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint viewportCount;
    
    /// VkViewport*
    public System.IntPtr pViewports;
    
    /// uint32_t->unsigned int
    public uint scissorCount;
    
    /// VkRect2D*
    public System.IntPtr pScissors;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineRasterizationStateCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineRasterizationStateCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkBool32->uint32_t->unsigned int
    public uint depthClampEnable;
    
    /// VkBool32->uint32_t->unsigned int
    public uint rasterizerDiscardEnable;
    
    /// VkPolygonMode
    public VkPolygonMode polygonMode;
    
    /// VkCullModeFlags->VkFlags->uint32_t->unsigned int
    public uint cullMode;
    
    /// VkFrontFace
    public VkFrontFace frontFace;
    
    /// VkBool32->uint32_t->unsigned int
    public uint depthBiasEnable;
    
    /// float
    public float depthBiasConstantFactor;
    
    /// float
    public float depthBiasClamp;
    
    /// float
    public float depthBiasSlopeFactor;
    
    /// float
    public float lineWidth;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineMultisampleStateCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineMultisampleStateCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkSampleCountFlagBits
    public VkSampleCountFlagBits rasterizationSamples;
    
    /// VkBool32->uint32_t->unsigned int
    public uint sampleShadingEnable;
    
    /// float
    public float minSampleShading;
    
    /// VkSampleMask*
    public System.IntPtr pSampleMask;
    
    /// VkBool32->uint32_t->unsigned int
    public uint alphaToCoverageEnable;
    
    /// VkBool32->uint32_t->unsigned int
    public uint alphaToOneEnable;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkStencilOpState {
    
    /// VkStencilOp
    public VkStencilOp failOp;
    
    /// VkStencilOp
    public VkStencilOp passOp;
    
    /// VkStencilOp
    public VkStencilOp depthFailOp;
    
    /// VkCompareOp
    public VkCompareOp compareOp;
    
    /// uint32_t->unsigned int
    public uint compareMask;
    
    /// uint32_t->unsigned int
    public uint writeMask;
    
    /// uint32_t->unsigned int
    public uint reference;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineDepthStencilStateCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineDepthStencilStateCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkBool32->uint32_t->unsigned int
    public uint depthTestEnable;
    
    /// VkBool32->uint32_t->unsigned int
    public uint depthWriteEnable;
    
    /// VkCompareOp
    public VkCompareOp depthCompareOp;
    
    /// VkBool32->uint32_t->unsigned int
    public uint depthBoundsTestEnable;
    
    /// VkBool32->uint32_t->unsigned int
    public uint stencilTestEnable;
    
    /// VkStencilOpState
    public VkStencilOpState front;
    
    /// VkStencilOpState
    public VkStencilOpState back;
    
    /// float
    public float minDepthBounds;
    
    /// float
    public float maxDepthBounds;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineColorBlendAttachmentState {
    
    /// VkBool32->uint32_t->unsigned int
    public uint blendEnable;
    
    /// VkBlendFactor
    public VkBlendFactor srcColorBlendFactor;
    
    /// VkBlendFactor
    public VkBlendFactor dstColorBlendFactor;
    
    /// VkBlendOp
    public VkBlendOp colorBlendOp;
    
    /// VkBlendFactor
    public VkBlendFactor srcAlphaBlendFactor;
    
    /// VkBlendFactor
    public VkBlendFactor dstAlphaBlendFactor;
    
    /// VkBlendOp
    public VkBlendOp alphaBlendOp;
    
    /// VkColorComponentFlags->VkFlags->uint32_t->unsigned int
    public uint colorWriteMask;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineColorBlendStateCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineColorBlendStateCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkBool32->uint32_t->unsigned int
    public uint logicOpEnable;
    
    /// VkLogicOp
    public VkLogicOp logicOp;
    
    /// uint32_t->unsigned int
    public uint attachmentCount;
    
    /// VkPipelineColorBlendAttachmentState*
    public System.IntPtr pAttachments;
    
    /// float[4]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=4, ArraySubType=System.Runtime.InteropServices.UnmanagedType.R4)]
    public float[] blendConstants;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineDynamicStateCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineDynamicStateCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint dynamicStateCount;
    
    /// VkDynamicState*
    public System.IntPtr pDynamicStates;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkGraphicsPipelineCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint stageCount;
    
    /// VkPipelineShaderStageCreateInfo*
    public System.IntPtr pStages;
    
    /// VkPipelineVertexInputStateCreateInfo*
    public System.IntPtr pVertexInputState;
    
    /// VkPipelineInputAssemblyStateCreateInfo*
    public System.IntPtr pInputAssemblyState;
    
    /// VkPipelineTessellationStateCreateInfo*
    public System.IntPtr pTessellationState;
    
    /// VkPipelineViewportStateCreateInfo*
    public System.IntPtr pViewportState;
    
    /// VkPipelineRasterizationStateCreateInfo*
    public System.IntPtr pRasterizationState;
    
    /// VkPipelineMultisampleStateCreateInfo*
    public System.IntPtr pMultisampleState;
    
    /// VkPipelineDepthStencilStateCreateInfo*
    public System.IntPtr pDepthStencilState;
    
    /// VkPipelineColorBlendStateCreateInfo*
    public System.IntPtr pColorBlendState;
    
    /// VkPipelineDynamicStateCreateInfo*
    public System.IntPtr pDynamicState;
    
    /// VkPipelineLayout->uint64_t->unsigned int
    public uint layout;
    
    /// VkRenderPass->uint64_t->unsigned int
    public uint renderPass;
    
    /// uint32_t->unsigned int
    public uint subpass;
    
    /// VkPipeline->uint64_t->unsigned int
    public uint basePipelineHandle;
    
    /// int32_t->int
    public int basePipelineIndex;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkComputePipelineCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkPipelineShaderStageCreateInfo
    public VkPipelineShaderStageCreateInfo stage;
    
    /// VkPipelineLayout->uint64_t->unsigned int
    public uint layout;
    
    /// VkPipeline->uint64_t->unsigned int
    public uint basePipelineHandle;
    
    /// int32_t->int
    public int basePipelineIndex;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPushConstantRange {
    
    /// VkShaderStageFlags->VkFlags->uint32_t->unsigned int
    public uint stageFlags;
    
    /// uint32_t->unsigned int
    public uint offset;
    
    /// uint32_t->unsigned int
    public uint size;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPipelineLayoutCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkPipelineLayoutCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint setLayoutCount;
    
    /// VkDescriptorSetLayout*
    public System.IntPtr pSetLayouts;
    
    /// uint32_t->unsigned int
    public uint pushConstantRangeCount;
    
    /// VkPushConstantRange*
    public System.IntPtr pPushConstantRanges;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSamplerCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkSamplerCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkFilter
    public VkFilter magFilter;
    
    /// VkFilter
    public VkFilter minFilter;
    
    /// VkSamplerMipmapMode
    public VkSamplerMipmapMode mipmapMode;
    
    /// VkSamplerAddressMode
    public VkSamplerAddressMode addressModeU;
    
    /// VkSamplerAddressMode
    public VkSamplerAddressMode addressModeV;
    
    /// VkSamplerAddressMode
    public VkSamplerAddressMode addressModeW;
    
    /// float
    public float mipLodBias;
    
    /// VkBool32->uint32_t->unsigned int
    public uint anisotropyEnable;
    
    /// float
    public float maxAnisotropy;
    
    /// VkBool32->uint32_t->unsigned int
    public uint compareEnable;
    
    /// VkCompareOp
    public VkCompareOp compareOp;
    
    /// float
    public float minLod;
    
    /// float
    public float maxLod;
    
    /// VkBorderColor
    public VkBorderColor borderColor;
    
    /// VkBool32->uint32_t->unsigned int
    public uint unnormalizedCoordinates;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDescriptorSetLayoutBinding {
    
    /// uint32_t->unsigned int
    public uint binding;
    
    /// VkDescriptorType
    public VkDescriptorType descriptorType;
    
    /// uint32_t->unsigned int
    public uint descriptorCount;
    
    /// VkShaderStageFlags->VkFlags->uint32_t->unsigned int
    public uint stageFlags;
    
    /// VkSampler*
    public System.IntPtr pImmutableSamplers;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDescriptorSetLayoutCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDescriptorSetLayoutCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint bindingCount;
    
    /// VkDescriptorSetLayoutBinding*
    public System.IntPtr pBindings;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDescriptorPoolSize {
    
    /// VkDescriptorType
    public VkDescriptorType type;
    
    /// uint32_t->unsigned int
    public uint descriptorCount;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDescriptorPoolCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDescriptorPoolCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint maxSets;
    
    /// uint32_t->unsigned int
    public uint poolSizeCount;
    
    /// VkDescriptorPoolSize*
    public System.IntPtr pPoolSizes;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDescriptorSetAllocateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDescriptorPool->uint64_t->unsigned int
    public uint descriptorPool;
    
    /// uint32_t->unsigned int
    public uint descriptorSetCount;
    
    /// VkDescriptorSetLayout*
    public System.IntPtr pSetLayouts;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDescriptorImageInfo {
    
    /// VkSampler->uint64_t->unsigned int
    public uint sampler;
    
    /// VkImageView->uint64_t->unsigned int
    public uint imageView;
    
    /// VkImageLayout
    public VkImageLayout imageLayout;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDescriptorBufferInfo {
    
    /// VkBuffer->uint64_t->unsigned int
    public uint buffer;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint offset;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint range;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkWriteDescriptorSet {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDescriptorSet->uint64_t->unsigned int
    public uint dstSet;
    
    /// uint32_t->unsigned int
    public uint dstBinding;
    
    /// uint32_t->unsigned int
    public uint dstArrayElement;
    
    /// uint32_t->unsigned int
    public uint descriptorCount;
    
    /// VkDescriptorType
    public VkDescriptorType descriptorType;
    
    /// VkDescriptorImageInfo*
    public System.IntPtr pImageInfo;
    
    /// VkDescriptorBufferInfo*
    public System.IntPtr pBufferInfo;
    
    /// VkBufferView*
    public System.IntPtr pTexelBufferView;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkCopyDescriptorSet {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDescriptorSet->uint64_t->unsigned int
    public uint srcSet;
    
    /// uint32_t->unsigned int
    public uint srcBinding;
    
    /// uint32_t->unsigned int
    public uint srcArrayElement;
    
    /// VkDescriptorSet->uint64_t->unsigned int
    public uint dstSet;
    
    /// uint32_t->unsigned int
    public uint dstBinding;
    
    /// uint32_t->unsigned int
    public uint dstArrayElement;
    
    /// uint32_t->unsigned int
    public uint descriptorCount;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkFramebufferCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkFramebufferCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkRenderPass->uint64_t->unsigned int
    public uint renderPass;
    
    /// uint32_t->unsigned int
    public uint attachmentCount;
    
    /// VkImageView*
    public System.IntPtr pAttachments;
    
    /// uint32_t->unsigned int
    public uint width;
    
    /// uint32_t->unsigned int
    public uint height;
    
    /// uint32_t->unsigned int
    public uint layers;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkAttachmentDescription {
    
    /// VkAttachmentDescriptionFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkFormat
    public VkFormat format;
    
    /// VkSampleCountFlagBits
    public VkSampleCountFlagBits samples;
    
    /// VkAttachmentLoadOp
    public VkAttachmentLoadOp loadOp;
    
    /// VkAttachmentStoreOp
    public VkAttachmentStoreOp storeOp;
    
    /// VkAttachmentLoadOp
    public VkAttachmentLoadOp stencilLoadOp;
    
    /// VkAttachmentStoreOp
    public VkAttachmentStoreOp stencilStoreOp;
    
    /// VkImageLayout
    public VkImageLayout initialLayout;
    
    /// VkImageLayout
    public VkImageLayout finalLayout;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkAttachmentReference {
    
    /// uint32_t->unsigned int
    public uint attachment;
    
    /// VkImageLayout
    public VkImageLayout layout;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSubpassDescription {
    
    /// VkSubpassDescriptionFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkPipelineBindPoint
    public VkPipelineBindPoint pipelineBindPoint;
    
    /// uint32_t->unsigned int
    public uint inputAttachmentCount;
    
    /// VkAttachmentReference*
    public System.IntPtr pInputAttachments;
    
    /// uint32_t->unsigned int
    public uint colorAttachmentCount;
    
    /// VkAttachmentReference*
    public System.IntPtr pColorAttachments;
    
    /// VkAttachmentReference*
    public System.IntPtr pResolveAttachments;
    
    /// VkAttachmentReference*
    public System.IntPtr pDepthStencilAttachment;
    
    /// uint32_t->unsigned int
    public uint preserveAttachmentCount;
    
    /// uint32_t*
    public System.IntPtr pPreserveAttachments;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSubpassDependency {
    
    /// uint32_t->unsigned int
    public uint srcSubpass;
    
    /// uint32_t->unsigned int
    public uint dstSubpass;
    
    /// VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
    public uint srcStageMask;
    
    /// VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
    public uint dstStageMask;
    
    /// VkAccessFlags->VkFlags->uint32_t->unsigned int
    public uint srcAccessMask;
    
    /// VkAccessFlags->VkFlags->uint32_t->unsigned int
    public uint dstAccessMask;
    
    /// VkDependencyFlags->VkFlags->uint32_t->unsigned int
    public uint dependencyFlags;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkRenderPassCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkRenderPassCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint attachmentCount;
    
    /// VkAttachmentDescription*
    public System.IntPtr pAttachments;
    
    /// uint32_t->unsigned int
    public uint subpassCount;
    
    /// VkSubpassDescription*
    public System.IntPtr pSubpasses;
    
    /// uint32_t->unsigned int
    public uint dependencyCount;
    
    /// VkSubpassDependency*
    public System.IntPtr pDependencies;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkCommandPoolCreateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkCommandPoolCreateFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// uint32_t->unsigned int
    public uint queueFamilyIndex;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkCommandBufferAllocateInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkCommandPool->uint64_t->unsigned int
    public uint commandPool;
    
    /// VkCommandBufferLevel
    public VkCommandBufferLevel level;
    
    /// uint32_t->unsigned int
    public uint commandBufferCount;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkCommandBufferInheritanceInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkRenderPass->uint64_t->unsigned int
    public uint renderPass;
    
    /// uint32_t->unsigned int
    public uint subpass;
    
    /// VkFramebuffer->uint64_t->unsigned int
    public uint framebuffer;
    
    /// VkBool32->uint32_t->unsigned int
    public uint occlusionQueryEnable;
    
    /// VkQueryControlFlags->VkFlags->uint32_t->unsigned int
    public uint queryFlags;
    
    /// VkQueryPipelineStatisticFlags->VkFlags->uint32_t->unsigned int
    public uint pipelineStatistics;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkCommandBufferBeginInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkCommandBufferUsageFlags->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkCommandBufferInheritanceInfo*
    public System.IntPtr pInheritanceInfo;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkBufferCopy {
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint srcOffset;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint dstOffset;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint size;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkImageSubresourceLayers {
    
    /// VkImageAspectFlags->VkFlags->uint32_t->unsigned int
    public uint aspectMask;
    
    /// uint32_t->unsigned int
    public uint mipLevel;
    
    /// uint32_t->unsigned int
    public uint baseArrayLayer;
    
    /// uint32_t->unsigned int
    public uint layerCount;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkImageCopy {
    
    /// VkImageSubresourceLayers
    public VkImageSubresourceLayers srcSubresource;
    
    /// VkOffset3D
    public VkOffset3D srcOffset;
    
    /// VkImageSubresourceLayers
    public VkImageSubresourceLayers dstSubresource;
    
    /// VkOffset3D
    public VkOffset3D dstOffset;
    
    /// VkExtent3D
    public VkExtent3D extent;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkImageBlit {
    
    /// VkImageSubresourceLayers
    public VkImageSubresourceLayers srcSubresource;
    
    /// VkOffset3D[2]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=2, ArraySubType=System.Runtime.InteropServices.UnmanagedType.Struct)]
    public VkOffset3D[] srcOffsets;
    
    /// VkImageSubresourceLayers
    public VkImageSubresourceLayers dstSubresource;
    
    /// VkOffset3D[2]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=2, ArraySubType=System.Runtime.InteropServices.UnmanagedType.Struct)]
    public VkOffset3D[] dstOffsets;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkBufferImageCopy {
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint bufferOffset;
    
    /// uint32_t->unsigned int
    public uint bufferRowLength;
    
    /// uint32_t->unsigned int
    public uint bufferImageHeight;
    
    /// VkImageSubresourceLayers
    public VkImageSubresourceLayers imageSubresource;
    
    /// VkOffset3D
    public VkOffset3D imageOffset;
    
    /// VkExtent3D
    public VkExtent3D imageExtent;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit)]
public struct VkClearColorValue {
    
    /// float[4]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=4, ArraySubType=System.Runtime.InteropServices.UnmanagedType.R4)]
    [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
    public float[] float32;
    
    /// int32_t[4]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=4, ArraySubType=System.Runtime.InteropServices.UnmanagedType.I4)]
    [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
    public int[] int32;
    
    /// uint32_t[4]
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=4, ArraySubType=System.Runtime.InteropServices.UnmanagedType.U4)]
    [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
    public uint[] uint32;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkClearDepthStencilValue {
    
    /// float
    public float depth;
    
    /// uint32_t->unsigned int
    public uint stencil;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit)]
public struct VkClearValue {
    
    /// VkClearColorValue
    [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
    public VkClearColorValue color;
    
    /// VkClearDepthStencilValue
    [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
    public VkClearDepthStencilValue depthStencil;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkClearAttachment {
    
    /// VkImageAspectFlags->VkFlags->uint32_t->unsigned int
    public uint aspectMask;
    
    /// uint32_t->unsigned int
    public uint colorAttachment;
    
    /// VkClearValue
    public VkClearValue clearValue;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkClearRect {
    
    /// VkRect2D
    public VkRect2D rect;
    
    /// uint32_t->unsigned int
    public uint baseArrayLayer;
    
    /// uint32_t->unsigned int
    public uint layerCount;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkImageResolve {
    
    /// VkImageSubresourceLayers
    public VkImageSubresourceLayers srcSubresource;
    
    /// VkOffset3D
    public VkOffset3D srcOffset;
    
    /// VkImageSubresourceLayers
    public VkImageSubresourceLayers dstSubresource;
    
    /// VkOffset3D
    public VkOffset3D dstOffset;
    
    /// VkExtent3D
    public VkExtent3D extent;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkMemoryBarrier {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkAccessFlags->VkFlags->uint32_t->unsigned int
    public uint srcAccessMask;
    
    /// VkAccessFlags->VkFlags->uint32_t->unsigned int
    public uint dstAccessMask;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkBufferMemoryBarrier {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkAccessFlags->VkFlags->uint32_t->unsigned int
    public uint srcAccessMask;
    
    /// VkAccessFlags->VkFlags->uint32_t->unsigned int
    public uint dstAccessMask;
    
    /// uint32_t->unsigned int
    public uint srcQueueFamilyIndex;
    
    /// uint32_t->unsigned int
    public uint dstQueueFamilyIndex;
    
    /// VkBuffer->uint64_t->unsigned int
    public uint buffer;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint offset;
    
    /// VkDeviceSize->uint64_t->unsigned int
    public uint size;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkImageMemoryBarrier {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkAccessFlags->VkFlags->uint32_t->unsigned int
    public uint srcAccessMask;
    
    /// VkAccessFlags->VkFlags->uint32_t->unsigned int
    public uint dstAccessMask;
    
    /// VkImageLayout
    public VkImageLayout oldLayout;
    
    /// VkImageLayout
    public VkImageLayout newLayout;
    
    /// uint32_t->unsigned int
    public uint srcQueueFamilyIndex;
    
    /// uint32_t->unsigned int
    public uint dstQueueFamilyIndex;
    
    /// VkImage->uint64_t->unsigned int
    public uint image;
    
    /// VkImageSubresourceRange
    public VkImageSubresourceRange subresourceRange;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkRenderPassBeginInfo {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkRenderPass->uint64_t->unsigned int
    public uint renderPass;
    
    /// VkFramebuffer->uint64_t->unsigned int
    public uint framebuffer;
    
    /// VkRect2D
    public VkRect2D renderArea;
    
    /// uint32_t->unsigned int
    public uint clearValueCount;
    
    /// VkClearValue*
    public System.IntPtr pClearValues;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDispatchIndirectCommand {
    
    /// uint32_t->unsigned int
    public uint x;
    
    /// uint32_t->unsigned int
    public uint y;
    
    /// uint32_t->unsigned int
    public uint z;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDrawIndexedIndirectCommand {
    
    /// uint32_t->unsigned int
    public uint indexCount;
    
    /// uint32_t->unsigned int
    public uint instanceCount;
    
    /// uint32_t->unsigned int
    public uint firstIndex;
    
    /// int32_t->int
    public int vertexOffset;
    
    /// uint32_t->unsigned int
    public uint firstInstance;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDrawIndirectCommand {
    
    /// uint32_t->unsigned int
    public uint vertexCount;
    
    /// uint32_t->unsigned int
    public uint instanceCount;
    
    /// uint32_t->unsigned int
    public uint firstVertex;
    
    /// uint32_t->unsigned int
    public uint firstInstance;
}

/// Return Type: VkResult
///pCreateInfo: VkInstanceCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pInstance: VkInstance*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateInstance(ref VkInstanceCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref System.IntPtr pInstance);

/// Return Type: void
///instance: VkInstance->VkInstance_T*
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyInstance(System.IntPtr instance, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///instance: VkInstance->VkInstance_T*
///pPhysicalDeviceCount: uint32_t*
///pPhysicalDevices: VkPhysicalDevice*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkEnumeratePhysicalDevices(System.IntPtr instance, ref uint pPhysicalDeviceCount, ref System.IntPtr pPhysicalDevices);

/// Return Type: void
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///pFeatures: VkPhysicalDeviceFeatures*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetPhysicalDeviceFeatures(System.IntPtr physicalDevice, ref VkPhysicalDeviceFeatures pFeatures);

/// Return Type: void
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///format: VkFormat
///pFormatProperties: VkFormatProperties*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetPhysicalDeviceFormatProperties(System.IntPtr physicalDevice, VkFormat format, ref VkFormatProperties pFormatProperties);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///format: VkFormat
///type: VkImageType
///tiling: VkImageTiling
///usage: VkImageUsageFlags->VkFlags->uint32_t->unsigned int
///flags: VkImageCreateFlags->VkFlags->uint32_t->unsigned int
///pImageFormatProperties: VkImageFormatProperties*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetPhysicalDeviceImageFormatProperties(System.IntPtr physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, uint usage, uint flags, ref VkImageFormatProperties pImageFormatProperties);

/// Return Type: void
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///pProperties: VkPhysicalDeviceProperties*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetPhysicalDeviceProperties(System.IntPtr physicalDevice, ref VkPhysicalDeviceProperties pProperties);

/// Return Type: void
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///pQueueFamilyPropertyCount: uint32_t*
///pQueueFamilyProperties: VkQueueFamilyProperties*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetPhysicalDeviceQueueFamilyProperties(System.IntPtr physicalDevice, ref uint pQueueFamilyPropertyCount, ref VkQueueFamilyProperties pQueueFamilyProperties);

/// Return Type: void
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///pMemoryProperties: VkPhysicalDeviceMemoryProperties*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetPhysicalDeviceMemoryProperties(System.IntPtr physicalDevice, ref VkPhysicalDeviceMemoryProperties pMemoryProperties);

/// Return Type: PFN_vkVoidFunction
///instance: VkInstance->VkInstance_T*
///pName: char*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate PFN_vkVoidFunction PFN_vkGetInstanceProcAddr(System.IntPtr instance, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pName);

/// Return Type: PFN_vkVoidFunction
///device: VkDevice->VkDevice_T*
///pName: char*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate PFN_vkVoidFunction PFN_vkGetDeviceProcAddr(System.IntPtr device, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pName);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///pCreateInfo: VkDeviceCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pDevice: VkDevice*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateDevice(System.IntPtr physicalDevice, ref VkDeviceCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref System.IntPtr pDevice);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyDevice(System.IntPtr device, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///pLayerName: char*
///pPropertyCount: uint32_t*
///pProperties: VkExtensionProperties*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkEnumerateInstanceExtensionProperties([System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pLayerName, ref uint pPropertyCount, ref VkExtensionProperties pProperties);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///pLayerName: char*
///pPropertyCount: uint32_t*
///pProperties: VkExtensionProperties*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkEnumerateDeviceExtensionProperties(System.IntPtr physicalDevice, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pLayerName, ref uint pPropertyCount, ref VkExtensionProperties pProperties);

/// Return Type: VkResult
///pPropertyCount: uint32_t*
///pProperties: VkLayerProperties*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkEnumerateInstanceLayerProperties(ref uint pPropertyCount, ref VkLayerProperties pProperties);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///pPropertyCount: uint32_t*
///pProperties: VkLayerProperties*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkEnumerateDeviceLayerProperties(System.IntPtr physicalDevice, ref uint pPropertyCount, ref VkLayerProperties pProperties);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///queueFamilyIndex: uint32_t->unsigned int
///queueIndex: uint32_t->unsigned int
///pQueue: VkQueue*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetDeviceQueue(System.IntPtr device, uint queueFamilyIndex, uint queueIndex, ref System.IntPtr pQueue);

/// Return Type: VkResult
///queue: VkQueue->VkQueue_T*
///submitCount: uint32_t->unsigned int
///pSubmits: VkSubmitInfo*
///fence: VkFence->uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkQueueSubmit(System.IntPtr queue, uint submitCount, ref VkSubmitInfo pSubmits, uint fence);

/// Return Type: VkResult
///queue: VkQueue->VkQueue_T*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkQueueWaitIdle(System.IntPtr queue);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkDeviceWaitIdle(System.IntPtr device);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pAllocateInfo: VkMemoryAllocateInfo*
///pAllocator: VkAllocationCallbacks*
///pMemory: VkDeviceMemory*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkAllocateMemory(System.IntPtr device, ref VkMemoryAllocateInfo pAllocateInfo, ref VkAllocationCallbacks pAllocator, ref uint pMemory);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///memory: VkDeviceMemory->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkFreeMemory(System.IntPtr device, uint memory, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///memory: VkDeviceMemory->uint64_t->unsigned int
///offset: VkDeviceSize->uint64_t->unsigned int
///size: VkDeviceSize->uint64_t->unsigned int
///flags: VkMemoryMapFlags->VkFlags->uint32_t->unsigned int
///ppData: void**
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkMapMemory(System.IntPtr device, uint memory, uint offset, uint size, uint flags, ref System.IntPtr ppData);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///memory: VkDeviceMemory->uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkUnmapMemory(System.IntPtr device, uint memory);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///memoryRangeCount: uint32_t->unsigned int
///pMemoryRanges: VkMappedMemoryRange*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkFlushMappedMemoryRanges(System.IntPtr device, uint memoryRangeCount, ref VkMappedMemoryRange pMemoryRanges);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///memoryRangeCount: uint32_t->unsigned int
///pMemoryRanges: VkMappedMemoryRange*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkInvalidateMappedMemoryRanges(System.IntPtr device, uint memoryRangeCount, ref VkMappedMemoryRange pMemoryRanges);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///memory: VkDeviceMemory->uint64_t->unsigned int
///pCommittedMemoryInBytes: VkDeviceSize*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetDeviceMemoryCommitment(System.IntPtr device, uint memory, ref uint pCommittedMemoryInBytes);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///buffer: VkBuffer->uint64_t->unsigned int
///memory: VkDeviceMemory->uint64_t->unsigned int
///memoryOffset: VkDeviceSize->uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkBindBufferMemory(System.IntPtr device, uint buffer, uint memory, uint memoryOffset);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///image: VkImage->uint64_t->unsigned int
///memory: VkDeviceMemory->uint64_t->unsigned int
///memoryOffset: VkDeviceSize->uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkBindImageMemory(System.IntPtr device, uint image, uint memory, uint memoryOffset);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///buffer: VkBuffer->uint64_t->unsigned int
///pMemoryRequirements: VkMemoryRequirements*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetBufferMemoryRequirements(System.IntPtr device, uint buffer, ref VkMemoryRequirements pMemoryRequirements);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///image: VkImage->uint64_t->unsigned int
///pMemoryRequirements: VkMemoryRequirements*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetImageMemoryRequirements(System.IntPtr device, uint image, ref VkMemoryRequirements pMemoryRequirements);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///image: VkImage->uint64_t->unsigned int
///pSparseMemoryRequirementCount: uint32_t*
///pSparseMemoryRequirements: VkSparseImageMemoryRequirements*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetImageSparseMemoryRequirements(System.IntPtr device, uint image, ref uint pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements pSparseMemoryRequirements);

/// Return Type: void
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///format: VkFormat
///type: VkImageType
///samples: VkSampleCountFlagBits
///usage: VkImageUsageFlags->VkFlags->uint32_t->unsigned int
///tiling: VkImageTiling
///pPropertyCount: uint32_t*
///pProperties: VkSparseImageFormatProperties*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetPhysicalDeviceSparseImageFormatProperties(System.IntPtr physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, uint usage, VkImageTiling tiling, ref uint pPropertyCount, ref VkSparseImageFormatProperties pProperties);

/// Return Type: VkResult
///queue: VkQueue->VkQueue_T*
///bindInfoCount: uint32_t->unsigned int
///pBindInfo: VkBindSparseInfo*
///fence: VkFence->uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkQueueBindSparse(System.IntPtr queue, uint bindInfoCount, ref VkBindSparseInfo pBindInfo, uint fence);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkFenceCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pFence: VkFence*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateFence(System.IntPtr device, ref VkFenceCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pFence);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///fence: VkFence->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyFence(System.IntPtr device, uint fence, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///fenceCount: uint32_t->unsigned int
///pFences: VkFence*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkResetFences(System.IntPtr device, uint fenceCount, ref uint pFences);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///fence: VkFence->uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetFenceStatus(System.IntPtr device, uint fence);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///fenceCount: uint32_t->unsigned int
///pFences: VkFence*
///waitAll: VkBool32->uint32_t->unsigned int
///timeout: uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkWaitForFences(System.IntPtr device, uint fenceCount, ref uint pFences, uint waitAll, uint timeout);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkSemaphoreCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pSemaphore: VkSemaphore*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateSemaphore(System.IntPtr device, ref VkSemaphoreCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pSemaphore);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///semaphore: VkSemaphore->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroySemaphore(System.IntPtr device, uint semaphore, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkEventCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pEvent: VkEvent*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateEvent(System.IntPtr device, ref VkEventCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pEvent);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///event: VkEvent->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyEvent(System.IntPtr device, uint @event, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///event: VkEvent->uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetEventStatus(System.IntPtr device, uint @event);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///event: VkEvent->uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkSetEvent(System.IntPtr device, uint @event);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///event: VkEvent->uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkResetEvent(System.IntPtr device, uint @event);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkQueryPoolCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pQueryPool: VkQueryPool*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateQueryPool(System.IntPtr device, ref VkQueryPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pQueryPool);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///queryPool: VkQueryPool->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyQueryPool(System.IntPtr device, uint queryPool, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///queryPool: VkQueryPool->uint64_t->unsigned int
///firstQuery: uint32_t->unsigned int
///queryCount: uint32_t->unsigned int
///dataSize: size_t->unsigned int
///pData: void*
///stride: VkDeviceSize->uint64_t->unsigned int
///flags: VkQueryResultFlags->VkFlags->uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetQueryPoolResults(System.IntPtr device, uint queryPool, uint firstQuery, uint queryCount, System.IntPtr dataSize, System.IntPtr pData, uint stride, uint flags);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkBufferCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pBuffer: VkBuffer*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateBuffer(System.IntPtr device, ref VkBufferCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pBuffer);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///buffer: VkBuffer->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyBuffer(System.IntPtr device, uint buffer, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkBufferViewCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pView: VkBufferView*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateBufferView(System.IntPtr device, ref VkBufferViewCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pView);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///bufferView: VkBufferView->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyBufferView(System.IntPtr device, uint bufferView, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkImageCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pImage: VkImage*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateImage(System.IntPtr device, ref VkImageCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pImage);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///image: VkImage->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyImage(System.IntPtr device, uint image, ref VkAllocationCallbacks pAllocator);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///image: VkImage->uint64_t->unsigned int
///pSubresource: VkImageSubresource*
///pLayout: VkSubresourceLayout*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetImageSubresourceLayout(System.IntPtr device, uint image, ref VkImageSubresource pSubresource, ref VkSubresourceLayout pLayout);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkImageViewCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pView: VkImageView*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateImageView(System.IntPtr device, ref VkImageViewCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pView);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///imageView: VkImageView->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyImageView(System.IntPtr device, uint imageView, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkShaderModuleCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pShaderModule: VkShaderModule*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateShaderModule(System.IntPtr device, ref VkShaderModuleCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pShaderModule);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///shaderModule: VkShaderModule->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyShaderModule(System.IntPtr device, uint shaderModule, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkPipelineCacheCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pPipelineCache: VkPipelineCache*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreatePipelineCache(System.IntPtr device, ref VkPipelineCacheCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pPipelineCache);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///pipelineCache: VkPipelineCache->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyPipelineCache(System.IntPtr device, uint pipelineCache, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pipelineCache: VkPipelineCache->uint64_t->unsigned int
///pDataSize: size_t*
///pData: void*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetPipelineCacheData(System.IntPtr device, uint pipelineCache, ref uint pDataSize, System.IntPtr pData);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///dstCache: VkPipelineCache->uint64_t->unsigned int
///srcCacheCount: uint32_t->unsigned int
///pSrcCaches: VkPipelineCache*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkMergePipelineCaches(System.IntPtr device, uint dstCache, uint srcCacheCount, ref uint pSrcCaches);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pipelineCache: VkPipelineCache->uint64_t->unsigned int
///createInfoCount: uint32_t->unsigned int
///pCreateInfos: VkGraphicsPipelineCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pPipelines: VkPipeline*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateGraphicsPipelines(System.IntPtr device, uint pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo pCreateInfos, ref VkAllocationCallbacks pAllocator, ref uint pPipelines);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pipelineCache: VkPipelineCache->uint64_t->unsigned int
///createInfoCount: uint32_t->unsigned int
///pCreateInfos: VkComputePipelineCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pPipelines: VkPipeline*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateComputePipelines(System.IntPtr device, uint pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo pCreateInfos, ref VkAllocationCallbacks pAllocator, ref uint pPipelines);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///pipeline: VkPipeline->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyPipeline(System.IntPtr device, uint pipeline, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkPipelineLayoutCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pPipelineLayout: VkPipelineLayout*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreatePipelineLayout(System.IntPtr device, ref VkPipelineLayoutCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pPipelineLayout);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///pipelineLayout: VkPipelineLayout->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyPipelineLayout(System.IntPtr device, uint pipelineLayout, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkSamplerCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pSampler: VkSampler*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateSampler(System.IntPtr device, ref VkSamplerCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pSampler);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///sampler: VkSampler->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroySampler(System.IntPtr device, uint sampler, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkDescriptorSetLayoutCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pSetLayout: VkDescriptorSetLayout*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateDescriptorSetLayout(System.IntPtr device, ref VkDescriptorSetLayoutCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pSetLayout);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///descriptorSetLayout: VkDescriptorSetLayout->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyDescriptorSetLayout(System.IntPtr device, uint descriptorSetLayout, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkDescriptorPoolCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pDescriptorPool: VkDescriptorPool*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateDescriptorPool(System.IntPtr device, ref VkDescriptorPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pDescriptorPool);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///descriptorPool: VkDescriptorPool->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyDescriptorPool(System.IntPtr device, uint descriptorPool, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///descriptorPool: VkDescriptorPool->uint64_t->unsigned int
///flags: VkDescriptorPoolResetFlags->VkFlags->uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkResetDescriptorPool(System.IntPtr device, uint descriptorPool, uint flags);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pAllocateInfo: VkDescriptorSetAllocateInfo*
///pDescriptorSets: VkDescriptorSet*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkAllocateDescriptorSets(System.IntPtr device, ref VkDescriptorSetAllocateInfo pAllocateInfo, ref uint pDescriptorSets);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///descriptorPool: VkDescriptorPool->uint64_t->unsigned int
///descriptorSetCount: uint32_t->unsigned int
///pDescriptorSets: VkDescriptorSet*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkFreeDescriptorSets(System.IntPtr device, uint descriptorPool, uint descriptorSetCount, ref uint pDescriptorSets);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///descriptorWriteCount: uint32_t->unsigned int
///pDescriptorWrites: VkWriteDescriptorSet*
///descriptorCopyCount: uint32_t->unsigned int
///pDescriptorCopies: VkCopyDescriptorSet*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkUpdateDescriptorSets(System.IntPtr device, uint descriptorWriteCount, ref VkWriteDescriptorSet pDescriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet pDescriptorCopies);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkFramebufferCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pFramebuffer: VkFramebuffer*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateFramebuffer(System.IntPtr device, ref VkFramebufferCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pFramebuffer);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///framebuffer: VkFramebuffer->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyFramebuffer(System.IntPtr device, uint framebuffer, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkRenderPassCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pRenderPass: VkRenderPass*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateRenderPass(System.IntPtr device, ref VkRenderPassCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pRenderPass);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///renderPass: VkRenderPass->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyRenderPass(System.IntPtr device, uint renderPass, ref VkAllocationCallbacks pAllocator);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///renderPass: VkRenderPass->uint64_t->unsigned int
///pGranularity: VkExtent2D*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkGetRenderAreaGranularity(System.IntPtr device, uint renderPass, ref VkExtent2D pGranularity);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkCommandPoolCreateInfo*
///pAllocator: VkAllocationCallbacks*
///pCommandPool: VkCommandPool*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateCommandPool(System.IntPtr device, ref VkCommandPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pCommandPool);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///commandPool: VkCommandPool->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyCommandPool(System.IntPtr device, uint commandPool, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///commandPool: VkCommandPool->uint64_t->unsigned int
///flags: VkCommandPoolResetFlags->VkFlags->uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkResetCommandPool(System.IntPtr device, uint commandPool, uint flags);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pAllocateInfo: VkCommandBufferAllocateInfo*
///pCommandBuffers: VkCommandBuffer*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkAllocateCommandBuffers(System.IntPtr device, ref VkCommandBufferAllocateInfo pAllocateInfo, ref System.IntPtr pCommandBuffers);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///commandPool: VkCommandPool->uint64_t->unsigned int
///commandBufferCount: uint32_t->unsigned int
///pCommandBuffers: VkCommandBuffer*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkFreeCommandBuffers(System.IntPtr device, uint commandPool, uint commandBufferCount, ref System.IntPtr pCommandBuffers);

/// Return Type: VkResult
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///pBeginInfo: VkCommandBufferBeginInfo*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkBeginCommandBuffer(System.IntPtr commandBuffer, ref VkCommandBufferBeginInfo pBeginInfo);

/// Return Type: VkResult
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkEndCommandBuffer(System.IntPtr commandBuffer);

/// Return Type: VkResult
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///flags: VkCommandBufferResetFlags->VkFlags->uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkResetCommandBuffer(System.IntPtr commandBuffer, uint flags);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///pipelineBindPoint: VkPipelineBindPoint
///pipeline: VkPipeline->uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdBindPipeline(System.IntPtr commandBuffer, VkPipelineBindPoint pipelineBindPoint, uint pipeline);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///firstViewport: uint32_t->unsigned int
///viewportCount: uint32_t->unsigned int
///pViewports: VkViewport*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdSetViewport(System.IntPtr commandBuffer, uint firstViewport, uint viewportCount, ref VkViewport pViewports);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///firstScissor: uint32_t->unsigned int
///scissorCount: uint32_t->unsigned int
///pScissors: VkRect2D*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdSetScissor(System.IntPtr commandBuffer, uint firstScissor, uint scissorCount, ref VkRect2D pScissors);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///lineWidth: float
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdSetLineWidth(System.IntPtr commandBuffer, float lineWidth);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///depthBiasConstantFactor: float
///depthBiasClamp: float
///depthBiasSlopeFactor: float
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdSetDepthBias(System.IntPtr commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///blendConstants: float*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdSetBlendConstants(System.IntPtr commandBuffer, ref float blendConstants);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///minDepthBounds: float
///maxDepthBounds: float
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdSetDepthBounds(System.IntPtr commandBuffer, float minDepthBounds, float maxDepthBounds);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///faceMask: VkStencilFaceFlags->VkFlags->uint32_t->unsigned int
///compareMask: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdSetStencilCompareMask(System.IntPtr commandBuffer, uint faceMask, uint compareMask);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///faceMask: VkStencilFaceFlags->VkFlags->uint32_t->unsigned int
///writeMask: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdSetStencilWriteMask(System.IntPtr commandBuffer, uint faceMask, uint writeMask);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///faceMask: VkStencilFaceFlags->VkFlags->uint32_t->unsigned int
///reference: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdSetStencilReference(System.IntPtr commandBuffer, uint faceMask, uint reference);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///pipelineBindPoint: VkPipelineBindPoint
///layout: VkPipelineLayout->uint64_t->unsigned int
///firstSet: uint32_t->unsigned int
///descriptorSetCount: uint32_t->unsigned int
///pDescriptorSets: VkDescriptorSet*
///dynamicOffsetCount: uint32_t->unsigned int
///pDynamicOffsets: uint32_t*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdBindDescriptorSets(System.IntPtr commandBuffer, VkPipelineBindPoint pipelineBindPoint, uint layout, uint firstSet, uint descriptorSetCount, ref uint pDescriptorSets, uint dynamicOffsetCount, ref uint pDynamicOffsets);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///buffer: VkBuffer->uint64_t->unsigned int
///offset: VkDeviceSize->uint64_t->unsigned int
///indexType: VkIndexType
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdBindIndexBuffer(System.IntPtr commandBuffer, uint buffer, uint offset, VkIndexType indexType);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///firstBinding: uint32_t->unsigned int
///bindingCount: uint32_t->unsigned int
///pBuffers: VkBuffer*
///pOffsets: VkDeviceSize*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdBindVertexBuffers(System.IntPtr commandBuffer, uint firstBinding, uint bindingCount, ref uint pBuffers, ref uint pOffsets);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///vertexCount: uint32_t->unsigned int
///instanceCount: uint32_t->unsigned int
///firstVertex: uint32_t->unsigned int
///firstInstance: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdDraw(System.IntPtr commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///indexCount: uint32_t->unsigned int
///instanceCount: uint32_t->unsigned int
///firstIndex: uint32_t->unsigned int
///vertexOffset: int32_t->int
///firstInstance: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdDrawIndexed(System.IntPtr commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///buffer: VkBuffer->uint64_t->unsigned int
///offset: VkDeviceSize->uint64_t->unsigned int
///drawCount: uint32_t->unsigned int
///stride: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdDrawIndirect(System.IntPtr commandBuffer, uint buffer, uint offset, uint drawCount, uint stride);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///buffer: VkBuffer->uint64_t->unsigned int
///offset: VkDeviceSize->uint64_t->unsigned int
///drawCount: uint32_t->unsigned int
///stride: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdDrawIndexedIndirect(System.IntPtr commandBuffer, uint buffer, uint offset, uint drawCount, uint stride);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///x: uint32_t->unsigned int
///y: uint32_t->unsigned int
///z: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdDispatch(System.IntPtr commandBuffer, uint x, uint y, uint z);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///buffer: VkBuffer->uint64_t->unsigned int
///offset: VkDeviceSize->uint64_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdDispatchIndirect(System.IntPtr commandBuffer, uint buffer, uint offset);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///srcBuffer: VkBuffer->uint64_t->unsigned int
///dstBuffer: VkBuffer->uint64_t->unsigned int
///regionCount: uint32_t->unsigned int
///pRegions: VkBufferCopy*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdCopyBuffer(System.IntPtr commandBuffer, uint srcBuffer, uint dstBuffer, uint regionCount, ref VkBufferCopy pRegions);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///srcImage: VkImage->uint64_t->unsigned int
///srcImageLayout: VkImageLayout
///dstImage: VkImage->uint64_t->unsigned int
///dstImageLayout: VkImageLayout
///regionCount: uint32_t->unsigned int
///pRegions: VkImageCopy*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdCopyImage(System.IntPtr commandBuffer, uint srcImage, VkImageLayout srcImageLayout, uint dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageCopy pRegions);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///srcImage: VkImage->uint64_t->unsigned int
///srcImageLayout: VkImageLayout
///dstImage: VkImage->uint64_t->unsigned int
///dstImageLayout: VkImageLayout
///regionCount: uint32_t->unsigned int
///pRegions: VkImageBlit*
///filter: VkFilter
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdBlitImage(System.IntPtr commandBuffer, uint srcImage, VkImageLayout srcImageLayout, uint dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageBlit pRegions, VkFilter filter);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///srcBuffer: VkBuffer->uint64_t->unsigned int
///dstImage: VkImage->uint64_t->unsigned int
///dstImageLayout: VkImageLayout
///regionCount: uint32_t->unsigned int
///pRegions: VkBufferImageCopy*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdCopyBufferToImage(System.IntPtr commandBuffer, uint srcBuffer, uint dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkBufferImageCopy pRegions);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///srcImage: VkImage->uint64_t->unsigned int
///srcImageLayout: VkImageLayout
///dstBuffer: VkBuffer->uint64_t->unsigned int
///regionCount: uint32_t->unsigned int
///pRegions: VkBufferImageCopy*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdCopyImageToBuffer(System.IntPtr commandBuffer, uint srcImage, VkImageLayout srcImageLayout, uint dstBuffer, uint regionCount, ref VkBufferImageCopy pRegions);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///dstBuffer: VkBuffer->uint64_t->unsigned int
///dstOffset: VkDeviceSize->uint64_t->unsigned int
///dataSize: VkDeviceSize->uint64_t->unsigned int
///pData: uint32_t*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdUpdateBuffer(System.IntPtr commandBuffer, uint dstBuffer, uint dstOffset, uint dataSize, ref uint pData);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///dstBuffer: VkBuffer->uint64_t->unsigned int
///dstOffset: VkDeviceSize->uint64_t->unsigned int
///size: VkDeviceSize->uint64_t->unsigned int
///data: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdFillBuffer(System.IntPtr commandBuffer, uint dstBuffer, uint dstOffset, uint size, uint data);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///image: VkImage->uint64_t->unsigned int
///imageLayout: VkImageLayout
///pColor: VkClearColorValue*
///rangeCount: uint32_t->unsigned int
///pRanges: VkImageSubresourceRange*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdClearColorImage(System.IntPtr commandBuffer, uint image, VkImageLayout imageLayout, ref VkClearColorValue pColor, uint rangeCount, ref VkImageSubresourceRange pRanges);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///image: VkImage->uint64_t->unsigned int
///imageLayout: VkImageLayout
///pDepthStencil: VkClearDepthStencilValue*
///rangeCount: uint32_t->unsigned int
///pRanges: VkImageSubresourceRange*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdClearDepthStencilImage(System.IntPtr commandBuffer, uint image, VkImageLayout imageLayout, ref VkClearDepthStencilValue pDepthStencil, uint rangeCount, ref VkImageSubresourceRange pRanges);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///attachmentCount: uint32_t->unsigned int
///pAttachments: VkClearAttachment*
///rectCount: uint32_t->unsigned int
///pRects: VkClearRect*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdClearAttachments(System.IntPtr commandBuffer, uint attachmentCount, ref VkClearAttachment pAttachments, uint rectCount, ref VkClearRect pRects);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///srcImage: VkImage->uint64_t->unsigned int
///srcImageLayout: VkImageLayout
///dstImage: VkImage->uint64_t->unsigned int
///dstImageLayout: VkImageLayout
///regionCount: uint32_t->unsigned int
///pRegions: VkImageResolve*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdResolveImage(System.IntPtr commandBuffer, uint srcImage, VkImageLayout srcImageLayout, uint dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageResolve pRegions);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///event: VkEvent->uint64_t->unsigned int
///stageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdSetEvent(System.IntPtr commandBuffer, uint @event, uint stageMask);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///event: VkEvent->uint64_t->unsigned int
///stageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdResetEvent(System.IntPtr commandBuffer, uint @event, uint stageMask);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///eventCount: uint32_t->unsigned int
///pEvents: VkEvent*
///srcStageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
///dstStageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
///memoryBarrierCount: uint32_t->unsigned int
///pMemoryBarriers: VkMemoryBarrier*
///bufferMemoryBarrierCount: uint32_t->unsigned int
///pBufferMemoryBarriers: VkBufferMemoryBarrier*
///imageMemoryBarrierCount: uint32_t->unsigned int
///pImageMemoryBarriers: VkImageMemoryBarrier*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdWaitEvents(System.IntPtr commandBuffer, uint eventCount, ref uint pEvents, uint srcStageMask, uint dstStageMask, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///srcStageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
///dstStageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
///dependencyFlags: VkDependencyFlags->VkFlags->uint32_t->unsigned int
///memoryBarrierCount: uint32_t->unsigned int
///pMemoryBarriers: VkMemoryBarrier*
///bufferMemoryBarrierCount: uint32_t->unsigned int
///pBufferMemoryBarriers: VkBufferMemoryBarrier*
///imageMemoryBarrierCount: uint32_t->unsigned int
///pImageMemoryBarriers: VkImageMemoryBarrier*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdPipelineBarrier(System.IntPtr commandBuffer, uint srcStageMask, uint dstStageMask, uint dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///queryPool: VkQueryPool->uint64_t->unsigned int
///query: uint32_t->unsigned int
///flags: VkQueryControlFlags->VkFlags->uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdBeginQuery(System.IntPtr commandBuffer, uint queryPool, uint query, uint flags);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///queryPool: VkQueryPool->uint64_t->unsigned int
///query: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdEndQuery(System.IntPtr commandBuffer, uint queryPool, uint query);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///queryPool: VkQueryPool->uint64_t->unsigned int
///firstQuery: uint32_t->unsigned int
///queryCount: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdResetQueryPool(System.IntPtr commandBuffer, uint queryPool, uint firstQuery, uint queryCount);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///pipelineStage: VkPipelineStageFlagBits
///queryPool: VkQueryPool->uint64_t->unsigned int
///query: uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdWriteTimestamp(System.IntPtr commandBuffer, VkPipelineStageFlagBits pipelineStage, uint queryPool, uint query);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///queryPool: VkQueryPool->uint64_t->unsigned int
///firstQuery: uint32_t->unsigned int
///queryCount: uint32_t->unsigned int
///dstBuffer: VkBuffer->uint64_t->unsigned int
///dstOffset: VkDeviceSize->uint64_t->unsigned int
///stride: VkDeviceSize->uint64_t->unsigned int
///flags: VkQueryResultFlags->VkFlags->uint32_t->unsigned int
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdCopyQueryPoolResults(System.IntPtr commandBuffer, uint queryPool, uint firstQuery, uint queryCount, uint dstBuffer, uint dstOffset, uint stride, uint flags);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///layout: VkPipelineLayout->uint64_t->unsigned int
///stageFlags: VkShaderStageFlags->VkFlags->uint32_t->unsigned int
///offset: uint32_t->unsigned int
///size: uint32_t->unsigned int
///pValues: void*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdPushConstants(System.IntPtr commandBuffer, uint layout, uint stageFlags, uint offset, uint size, System.IntPtr pValues);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///pRenderPassBegin: VkRenderPassBeginInfo*
///contents: VkSubpassContents
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdBeginRenderPass(System.IntPtr commandBuffer, ref VkRenderPassBeginInfo pRenderPassBegin, VkSubpassContents contents);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///contents: VkSubpassContents
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdNextSubpass(System.IntPtr commandBuffer, VkSubpassContents contents);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdEndRenderPass(System.IntPtr commandBuffer);

/// Return Type: void
///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
///commandBufferCount: uint32_t->unsigned int
///pCommandBuffers: VkCommandBuffer*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkCmdExecuteCommands(System.IntPtr commandBuffer, uint commandBufferCount, ref System.IntPtr pCommandBuffers);

public enum VkColorSpaceKHR {
    
    /// VK_COLORSPACE_SRGB_NONLINEAR_KHR -> 0
    VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0,
    
    /// VK_COLORSPACE_BEGIN_RANGE -> VK_COLORSPACE_SRGB_NONLINEAR_KHR
    VK_COLORSPACE_BEGIN_RANGE = VkColorSpaceKHR.VK_COLORSPACE_SRGB_NONLINEAR_KHR,
    
    /// VK_COLORSPACE_END_RANGE -> VK_COLORSPACE_SRGB_NONLINEAR_KHR
    VK_COLORSPACE_END_RANGE = VkColorSpaceKHR.VK_COLORSPACE_SRGB_NONLINEAR_KHR,
    
    /// VK_COLORSPACE_RANGE_SIZE -> (VK_COLORSPACE_SRGB_NONLINEAR_KHR-VK_COLORSPACE_SRGB_NONLINEAR_KHR+1)
    VK_COLORSPACE_RANGE_SIZE = (VkColorSpaceKHR.VK_COLORSPACE_SRGB_NONLINEAR_KHR 
                - (VkColorSpaceKHR.VK_COLORSPACE_SRGB_NONLINEAR_KHR + 1)),
    
    /// VK_COLORSPACE_MAX_ENUM -> 0x7FFFFFFF
    VK_COLORSPACE_MAX_ENUM = 2147483647,
}

public enum VkPresentModeKHR {
    
    /// VK_PRESENT_MODE_IMMEDIATE_KHR -> 0
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
    
    /// VK_PRESENT_MODE_MAILBOX_KHR -> 1
    VK_PRESENT_MODE_MAILBOX_KHR = 1,
    
    /// VK_PRESENT_MODE_FIFO_KHR -> 2
    VK_PRESENT_MODE_FIFO_KHR = 2,
    
    /// VK_PRESENT_MODE_FIFO_RELAXED_KHR -> 3
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
    
    /// VK_PRESENT_MODE_BEGIN_RANGE -> VK_PRESENT_MODE_IMMEDIATE_KHR
    VK_PRESENT_MODE_BEGIN_RANGE = VkPresentModeKHR.VK_PRESENT_MODE_IMMEDIATE_KHR,
    
    /// VK_PRESENT_MODE_END_RANGE -> VK_PRESENT_MODE_FIFO_RELAXED_KHR
    VK_PRESENT_MODE_END_RANGE = VkPresentModeKHR.VK_PRESENT_MODE_FIFO_RELAXED_KHR,
    
    /// VK_PRESENT_MODE_RANGE_SIZE -> (VK_PRESENT_MODE_FIFO_RELAXED_KHR-VK_PRESENT_MODE_IMMEDIATE_KHR+1)
    VK_PRESENT_MODE_RANGE_SIZE = (VkPresentModeKHR.VK_PRESENT_MODE_FIFO_RELAXED_KHR 
                - (VkPresentModeKHR.VK_PRESENT_MODE_IMMEDIATE_KHR + 1)),
    
    /// VK_PRESENT_MODE_MAX_ENUM -> 0x7FFFFFFF
    VK_PRESENT_MODE_MAX_ENUM = 2147483647,
}

public enum VkSurfaceTransformFlagBitsKHR {
    
    /// VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR -> 0x00000001
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
    
    /// VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR -> 0x00000002
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2,
    
    /// VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR -> 0x00000004
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4,
    
    /// VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR -> 0x00000008
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8,
    
    /// VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR -> 0x00000010
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
    
    /// VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR -> 0x00000020
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32,
    
    /// VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR -> 0x00000040
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64,
    
    /// VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR -> 0x00000080
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128,
    
    /// VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR -> 0x00000100
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
}

public enum VkCompositeAlphaFlagBitsKHR {
    
    /// VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR -> 0x00000001
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
    
    /// VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR -> 0x00000002
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
    
    /// VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR -> 0x00000004
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
    
    /// VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR -> 0x00000008
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSurfaceCapabilitiesKHR {
    
    /// uint32_t->unsigned int
    public uint minImageCount;
    
    /// uint32_t->unsigned int
    public uint maxImageCount;
    
    /// VkExtent2D
    public VkExtent2D currentExtent;
    
    /// VkExtent2D
    public VkExtent2D minImageExtent;
    
    /// VkExtent2D
    public VkExtent2D maxImageExtent;
    
    /// uint32_t->unsigned int
    public uint maxImageArrayLayers;
    
    /// VkSurfaceTransformFlagsKHR->VkFlags->uint32_t->unsigned int
    public uint supportedTransforms;
    
    /// VkSurfaceTransformFlagBitsKHR
    public VkSurfaceTransformFlagBitsKHR currentTransform;
    
    /// VkCompositeAlphaFlagsKHR->VkFlags->uint32_t->unsigned int
    public uint supportedCompositeAlpha;
    
    /// VkImageUsageFlags->VkFlags->uint32_t->unsigned int
    public uint supportedUsageFlags;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSurfaceFormatKHR {
    
    /// VkFormat
    public VkFormat format;
    
    /// VkColorSpaceKHR
    public VkColorSpaceKHR colorSpace;
}

/// Return Type: void
///instance: VkInstance->VkInstance_T*
///surface: VkSurfaceKHR->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroySurfaceKHR(System.IntPtr instance, uint surface, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///queueFamilyIndex: uint32_t->unsigned int
///surface: VkSurfaceKHR->uint64_t->unsigned int
///pSupported: VkBool32*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetPhysicalDeviceSurfaceSupportKHR(System.IntPtr physicalDevice, uint queueFamilyIndex, uint surface, ref uint pSupported);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///surface: VkSurfaceKHR->uint64_t->unsigned int
///pSurfaceCapabilities: VkSurfaceCapabilitiesKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(System.IntPtr physicalDevice, uint surface, ref VkSurfaceCapabilitiesKHR pSurfaceCapabilities);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///surface: VkSurfaceKHR->uint64_t->unsigned int
///pSurfaceFormatCount: uint32_t*
///pSurfaceFormats: VkSurfaceFormatKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetPhysicalDeviceSurfaceFormatsKHR(System.IntPtr physicalDevice, uint surface, ref uint pSurfaceFormatCount, ref VkSurfaceFormatKHR pSurfaceFormats);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///surface: VkSurfaceKHR->uint64_t->unsigned int
///pPresentModeCount: uint32_t*
///pPresentModes: VkPresentModeKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetPhysicalDeviceSurfacePresentModesKHR(System.IntPtr physicalDevice, uint surface, ref uint pPresentModeCount, ref VkPresentModeKHR pPresentModes);

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkSwapchainCreateInfoKHR {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkSwapchainCreateFlagsKHR->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkSurfaceKHR->uint64_t->unsigned int
    public uint surface;
    
    /// uint32_t->unsigned int
    public uint minImageCount;
    
    /// VkFormat
    public VkFormat imageFormat;
    
    /// VkColorSpaceKHR
    public VkColorSpaceKHR imageColorSpace;
    
    /// VkExtent2D
    public VkExtent2D imageExtent;
    
    /// uint32_t->unsigned int
    public uint imageArrayLayers;
    
    /// VkImageUsageFlags->VkFlags->uint32_t->unsigned int
    public uint imageUsage;
    
    /// VkSharingMode
    public VkSharingMode imageSharingMode;
    
    /// uint32_t->unsigned int
    public uint queueFamilyIndexCount;
    
    /// uint32_t*
    public System.IntPtr pQueueFamilyIndices;
    
    /// VkSurfaceTransformFlagBitsKHR
    public VkSurfaceTransformFlagBitsKHR preTransform;
    
    /// VkCompositeAlphaFlagBitsKHR
    public VkCompositeAlphaFlagBitsKHR compositeAlpha;
    
    /// VkPresentModeKHR
    public VkPresentModeKHR presentMode;
    
    /// VkBool32->uint32_t->unsigned int
    public uint clipped;
    
    /// VkSwapchainKHR->uint64_t->unsigned int
    public uint oldSwapchain;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkPresentInfoKHR {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// uint32_t->unsigned int
    public uint waitSemaphoreCount;
    
    /// VkSemaphore*
    public System.IntPtr pWaitSemaphores;
    
    /// uint32_t->unsigned int
    public uint swapchainCount;
    
    /// VkSwapchainKHR*
    public System.IntPtr pSwapchains;
    
    /// uint32_t*
    public System.IntPtr pImageIndices;
    
    /// VkResult*
    public System.IntPtr pResults;
}

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///pCreateInfo: VkSwapchainCreateInfoKHR*
///pAllocator: VkAllocationCallbacks*
///pSwapchain: VkSwapchainKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateSwapchainKHR(System.IntPtr device, ref VkSwapchainCreateInfoKHR pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pSwapchain);

/// Return Type: void
///device: VkDevice->VkDevice_T*
///swapchain: VkSwapchainKHR->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroySwapchainKHR(System.IntPtr device, uint swapchain, ref VkAllocationCallbacks pAllocator);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///swapchain: VkSwapchainKHR->uint64_t->unsigned int
///pSwapchainImageCount: uint32_t*
///pSwapchainImages: VkImage*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetSwapchainImagesKHR(System.IntPtr device, uint swapchain, ref uint pSwapchainImageCount, ref uint pSwapchainImages);

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///swapchain: VkSwapchainKHR->uint64_t->unsigned int
///timeout: uint64_t->unsigned int
///semaphore: VkSemaphore->uint64_t->unsigned int
///fence: VkFence->uint64_t->unsigned int
///pImageIndex: uint32_t*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkAcquireNextImageKHR(System.IntPtr device, uint swapchain, uint timeout, uint semaphore, uint fence, ref uint pImageIndex);

/// Return Type: VkResult
///queue: VkQueue->VkQueue_T*
///pPresentInfo: VkPresentInfoKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkQueuePresentKHR(System.IntPtr queue, ref VkPresentInfoKHR pPresentInfo);

public enum VkDisplayPlaneAlphaFlagBitsKHR {
    
    /// VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR -> 0x00000001
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1,
    
    /// VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR -> 0x00000002
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2,
    
    /// VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR -> 0x00000004
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4,
    
    /// VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR -> 0x00000008
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8,
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDisplayPropertiesKHR {
    
    /// VkDisplayKHR->uint64_t->unsigned int
    public uint display;
    
    /// char*
    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)]
    public string displayName;
    
    /// VkExtent2D
    public VkExtent2D physicalDimensions;
    
    /// VkExtent2D
    public VkExtent2D physicalResolution;
    
    /// VkSurfaceTransformFlagsKHR->VkFlags->uint32_t->unsigned int
    public uint supportedTransforms;
    
    /// VkBool32->uint32_t->unsigned int
    public uint planeReorderPossible;
    
    /// VkBool32->uint32_t->unsigned int
    public uint persistentContent;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDisplayModeParametersKHR {
    
    /// VkExtent2D
    public VkExtent2D visibleRegion;
    
    /// uint32_t->unsigned int
    public uint refreshRate;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDisplayModePropertiesKHR {
    
    /// VkDisplayModeKHR->uint64_t->unsigned int
    public uint displayMode;
    
    /// VkDisplayModeParametersKHR
    public VkDisplayModeParametersKHR parameters;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDisplayModeCreateInfoKHR {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDisplayModeCreateFlagsKHR->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkDisplayModeParametersKHR
    public VkDisplayModeParametersKHR parameters;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDisplayPlaneCapabilitiesKHR {
    
    /// VkDisplayPlaneAlphaFlagsKHR->VkFlags->uint32_t->unsigned int
    public uint supportedAlpha;
    
    /// VkOffset2D
    public VkOffset2D minSrcPosition;
    
    /// VkOffset2D
    public VkOffset2D maxSrcPosition;
    
    /// VkExtent2D
    public VkExtent2D minSrcExtent;
    
    /// VkExtent2D
    public VkExtent2D maxSrcExtent;
    
    /// VkOffset2D
    public VkOffset2D minDstPosition;
    
    /// VkOffset2D
    public VkOffset2D maxDstPosition;
    
    /// VkExtent2D
    public VkExtent2D minDstExtent;
    
    /// VkExtent2D
    public VkExtent2D maxDstExtent;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDisplayPlanePropertiesKHR {
    
    /// VkDisplayKHR->uint64_t->unsigned int
    public uint currentDisplay;
    
    /// uint32_t->unsigned int
    public uint currentStackIndex;
}

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDisplaySurfaceCreateInfoKHR {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDisplaySurfaceCreateFlagsKHR->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// VkDisplayModeKHR->uint64_t->unsigned int
    public uint displayMode;
    
    /// uint32_t->unsigned int
    public uint planeIndex;
    
    /// uint32_t->unsigned int
    public uint planeStackIndex;
    
    /// VkSurfaceTransformFlagBitsKHR
    public VkSurfaceTransformFlagBitsKHR transform;
    
    /// float
    public float globalAlpha;
    
    /// VkDisplayPlaneAlphaFlagBitsKHR
    public VkDisplayPlaneAlphaFlagBitsKHR alphaMode;
    
    /// VkExtent2D
    public VkExtent2D imageExtent;
}

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///pPropertyCount: uint32_t*
///pProperties: VkDisplayPropertiesKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetPhysicalDeviceDisplayPropertiesKHR(System.IntPtr physicalDevice, ref uint pPropertyCount, ref VkDisplayPropertiesKHR pProperties);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///pPropertyCount: uint32_t*
///pProperties: VkDisplayPlanePropertiesKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(System.IntPtr physicalDevice, ref uint pPropertyCount, ref VkDisplayPlanePropertiesKHR pProperties);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///planeIndex: uint32_t->unsigned int
///pDisplayCount: uint32_t*
///pDisplays: VkDisplayKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetDisplayPlaneSupportedDisplaysKHR(System.IntPtr physicalDevice, uint planeIndex, ref uint pDisplayCount, ref uint pDisplays);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///display: VkDisplayKHR->uint64_t->unsigned int
///pPropertyCount: uint32_t*
///pProperties: VkDisplayModePropertiesKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetDisplayModePropertiesKHR(System.IntPtr physicalDevice, uint display, ref uint pPropertyCount, ref VkDisplayModePropertiesKHR pProperties);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///display: VkDisplayKHR->uint64_t->unsigned int
///pCreateInfo: VkDisplayModeCreateInfoKHR*
///pAllocator: VkAllocationCallbacks*
///pMode: VkDisplayModeKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateDisplayModeKHR(System.IntPtr physicalDevice, uint display, ref VkDisplayModeCreateInfoKHR pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pMode);

/// Return Type: VkResult
///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
///mode: VkDisplayModeKHR->uint64_t->unsigned int
///planeIndex: uint32_t->unsigned int
///pCapabilities: VkDisplayPlaneCapabilitiesKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkGetDisplayPlaneCapabilitiesKHR(System.IntPtr physicalDevice, uint mode, uint planeIndex, ref VkDisplayPlaneCapabilitiesKHR pCapabilities);

/// Return Type: VkResult
///instance: VkInstance->VkInstance_T*
///pCreateInfo: VkDisplaySurfaceCreateInfoKHR*
///pAllocator: VkAllocationCallbacks*
///pSurface: VkSurfaceKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateDisplayPlaneSurfaceKHR(System.IntPtr instance, ref VkDisplaySurfaceCreateInfoKHR pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pSurface);

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDisplayPresentInfoKHR {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkRect2D
    public VkRect2D srcRect;
    
    /// VkRect2D
    public VkRect2D dstRect;
    
    /// VkBool32->uint32_t->unsigned int
    public uint persistent;
}

/// Return Type: VkResult
///device: VkDevice->VkDevice_T*
///swapchainCount: uint32_t->unsigned int
///pCreateInfos: VkSwapchainCreateInfoKHR*
///pAllocator: VkAllocationCallbacks*
///pSwapchains: VkSwapchainKHR*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateSharedSwapchainsKHR(System.IntPtr device, uint swapchainCount, ref VkSwapchainCreateInfoKHR pCreateInfos, ref VkAllocationCallbacks pAllocator, ref uint pSwapchains);

public enum VkDebugReportObjectTypeEXT {
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT -> 0
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT -> 1
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT -> 2
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT -> 3
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT -> 4
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT -> 5
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT -> 6
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT -> 7
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT -> 8
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT -> 9
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT -> 10
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT -> 11
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT -> 12
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT -> 13
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT -> 14
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT -> 15
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT -> 16
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT -> 17
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT -> 18
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT -> 19
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT -> 20
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT -> 21
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT -> 22
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT -> 23
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT -> 24
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT -> 25
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT -> 26
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT -> 27
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    
    /// VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT -> 28
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28,
}

public enum VkDebugReportErrorEXT {
    
    /// VK_DEBUG_REPORT_ERROR_NONE_EXT -> 0
    VK_DEBUG_REPORT_ERROR_NONE_EXT = 0,
    
    /// VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT -> 1
    VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT = 1,
}

public enum VkDebugReportFlagBitsEXT {
    
    /// VK_DEBUG_REPORT_INFORMATION_BIT_EXT -> 0x00000001
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1,
    
    /// VK_DEBUG_REPORT_WARNING_BIT_EXT -> 0x00000002
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 2,
    
    /// VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT -> 0x00000004
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4,
    
    /// VK_DEBUG_REPORT_ERROR_BIT_EXT -> 0x00000008
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 8,
    
    /// VK_DEBUG_REPORT_DEBUG_BIT_EXT -> 0x00000010
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16,
}

/// Return Type: VkBool32->uint32_t->unsigned int
///flags: VkDebugReportFlagsEXT->VkFlags->uint32_t->unsigned int
///objectType: VkDebugReportObjectTypeEXT
///object: uint64_t->unsigned int
///location: size_t->unsigned int
///messageCode: int32_t->int
///pLayerPrefix: char*
///pMessage: char*
///pUserData: void*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate uint PFN_vkDebugReportCallbackEXT(uint flags, VkDebugReportObjectTypeEXT objectType, uint @object, System.IntPtr location, int messageCode, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pLayerPrefix, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pMessage, System.IntPtr pUserData);

[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct VkDebugReportCallbackCreateInfoEXT {
    
    /// VkStructureType
    public VkStructureType sType;
    
    /// void*
    public System.IntPtr pNext;
    
    /// VkDebugReportFlagsEXT->VkFlags->uint32_t->unsigned int
    public uint flags;
    
    /// PFN_vkDebugReportCallbackEXT
    public PFN_vkDebugReportCallbackEXT pfnCallback;
    
    /// void*
    public System.IntPtr pUserData;
}

/// Return Type: VkResult
///instance: VkInstance->VkInstance_T*
///pCreateInfo: VkDebugReportCallbackCreateInfoEXT*
///pAllocator: VkAllocationCallbacks*
///pCallback: VkDebugReportCallbackEXT*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate VkResult PFN_vkCreateDebugReportCallbackEXT(System.IntPtr instance, ref VkDebugReportCallbackCreateInfoEXT pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pCallback);

/// Return Type: void
///instance: VkInstance->VkInstance_T*
///callback: VkDebugReportCallbackEXT->uint64_t->unsigned int
///pAllocator: VkAllocationCallbacks*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDestroyDebugReportCallbackEXT(System.IntPtr instance, uint callback, ref VkAllocationCallbacks pAllocator);

/// Return Type: void
///instance: VkInstance->VkInstance_T*
///flags: VkDebugReportFlagsEXT->VkFlags->uint32_t->unsigned int
///objectType: VkDebugReportObjectTypeEXT
///object: uint64_t->unsigned int
///location: size_t->unsigned int
///messageCode: int32_t->int
///pLayerPrefix: char*
///pMessage: char*
[System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.StdCall)]
public delegate void PFN_vkDebugReportMessageEXT(System.IntPtr instance, uint flags, VkDebugReportObjectTypeEXT objectType, uint @object, System.IntPtr location, int messageCode, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pLayerPrefix, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pMessage);

public partial class NativeMethods {
    
    /// Return Type: unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="__threadid", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
public static extern  uint @__threadid() ;

    
    /// Return Type: uintptr_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="__threadhandle", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
public static extern  uint @__threadhandle() ;

    
    /// Return Type: VkResult
    ///pCreateInfo: VkInstanceCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pInstance: VkInstance*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateInstance", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateInstance(ref VkInstanceCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref System.IntPtr pInstance) ;

    
    /// Return Type: void
    ///instance: VkInstance->VkInstance_T*
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyInstance", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyInstance(System.IntPtr instance, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///instance: VkInstance->VkInstance_T*
    ///pPhysicalDeviceCount: uint32_t*
    ///pPhysicalDevices: VkPhysicalDevice*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkEnumeratePhysicalDevices", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkEnumeratePhysicalDevices(System.IntPtr instance, ref uint pPhysicalDeviceCount, ref System.IntPtr pPhysicalDevices) ;

    
    /// Return Type: void
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///pFeatures: VkPhysicalDeviceFeatures*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceFeatures", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetPhysicalDeviceFeatures(System.IntPtr physicalDevice, ref VkPhysicalDeviceFeatures pFeatures) ;

    
    /// Return Type: void
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///format: VkFormat
    ///pFormatProperties: VkFormatProperties*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceFormatProperties", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetPhysicalDeviceFormatProperties(System.IntPtr physicalDevice, VkFormat format, ref VkFormatProperties pFormatProperties) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///format: VkFormat
    ///type: VkImageType
    ///tiling: VkImageTiling
    ///usage: VkImageUsageFlags->VkFlags->uint32_t->unsigned int
    ///flags: VkImageCreateFlags->VkFlags->uint32_t->unsigned int
    ///pImageFormatProperties: VkImageFormatProperties*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceImageFormatProperties", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetPhysicalDeviceImageFormatProperties(System.IntPtr physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, uint usage, uint flags, ref VkImageFormatProperties pImageFormatProperties) ;

    
    /// Return Type: void
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///pProperties: VkPhysicalDeviceProperties*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceProperties", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetPhysicalDeviceProperties(System.IntPtr physicalDevice, ref VkPhysicalDeviceProperties pProperties) ;

    
    /// Return Type: void
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///pQueueFamilyPropertyCount: uint32_t*
    ///pQueueFamilyProperties: VkQueueFamilyProperties*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceQueueFamilyProperties", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetPhysicalDeviceQueueFamilyProperties(System.IntPtr physicalDevice, ref uint pQueueFamilyPropertyCount, ref VkQueueFamilyProperties pQueueFamilyProperties) ;

    
    /// Return Type: void
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///pMemoryProperties: VkPhysicalDeviceMemoryProperties*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceMemoryProperties", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetPhysicalDeviceMemoryProperties(System.IntPtr physicalDevice, ref VkPhysicalDeviceMemoryProperties pMemoryProperties) ;

    
    /// Return Type: PFN_vkVoidFunction
    ///instance: VkInstance->VkInstance_T*
    ///pName: char*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetInstanceProcAddr", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  PFN_vkVoidFunction vkGetInstanceProcAddr(System.IntPtr instance, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pName) ;

    
    /// Return Type: PFN_vkVoidFunction
    ///device: VkDevice->VkDevice_T*
    ///pName: char*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetDeviceProcAddr", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  PFN_vkVoidFunction vkGetDeviceProcAddr(System.IntPtr device, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pName) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///pCreateInfo: VkDeviceCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pDevice: VkDevice*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateDevice", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateDevice(System.IntPtr physicalDevice, ref VkDeviceCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref System.IntPtr pDevice) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyDevice", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyDevice(System.IntPtr device, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///pLayerName: char*
    ///pPropertyCount: uint32_t*
    ///pProperties: VkExtensionProperties*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkEnumerateInstanceExtensionProperties", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkEnumerateInstanceExtensionProperties([System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pLayerName, ref uint pPropertyCount, ref VkExtensionProperties pProperties) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///pLayerName: char*
    ///pPropertyCount: uint32_t*
    ///pProperties: VkExtensionProperties*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkEnumerateDeviceExtensionProperties", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkEnumerateDeviceExtensionProperties(System.IntPtr physicalDevice, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pLayerName, ref uint pPropertyCount, ref VkExtensionProperties pProperties) ;

    
    /// Return Type: VkResult
    ///pPropertyCount: uint32_t*
    ///pProperties: VkLayerProperties*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkEnumerateInstanceLayerProperties", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkEnumerateInstanceLayerProperties(ref uint pPropertyCount, ref VkLayerProperties pProperties) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///pPropertyCount: uint32_t*
    ///pProperties: VkLayerProperties*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkEnumerateDeviceLayerProperties", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkEnumerateDeviceLayerProperties(System.IntPtr physicalDevice, ref uint pPropertyCount, ref VkLayerProperties pProperties) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///queueFamilyIndex: uint32_t->unsigned int
    ///queueIndex: uint32_t->unsigned int
    ///pQueue: VkQueue*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetDeviceQueue", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetDeviceQueue(System.IntPtr device, uint queueFamilyIndex, uint queueIndex, ref System.IntPtr pQueue) ;

    
    /// Return Type: VkResult
    ///queue: VkQueue->VkQueue_T*
    ///submitCount: uint32_t->unsigned int
    ///pSubmits: VkSubmitInfo*
    ///fence: VkFence->uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkQueueSubmit", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkQueueSubmit(System.IntPtr queue, uint submitCount, ref VkSubmitInfo pSubmits, uint fence) ;

    
    /// Return Type: VkResult
    ///queue: VkQueue->VkQueue_T*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkQueueWaitIdle", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkQueueWaitIdle(System.IntPtr queue) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDeviceWaitIdle", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkDeviceWaitIdle(System.IntPtr device) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pAllocateInfo: VkMemoryAllocateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pMemory: VkDeviceMemory*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkAllocateMemory", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkAllocateMemory(System.IntPtr device, ref VkMemoryAllocateInfo pAllocateInfo, ref VkAllocationCallbacks pAllocator, ref uint pMemory) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///memory: VkDeviceMemory->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkFreeMemory", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkFreeMemory(System.IntPtr device, uint memory, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///memory: VkDeviceMemory->uint64_t->unsigned int
    ///offset: VkDeviceSize->uint64_t->unsigned int
    ///size: VkDeviceSize->uint64_t->unsigned int
    ///flags: VkMemoryMapFlags->VkFlags->uint32_t->unsigned int
    ///ppData: void**
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkMapMemory", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkMapMemory(System.IntPtr device, uint memory, uint offset, uint size, uint flags, ref System.IntPtr ppData) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///memory: VkDeviceMemory->uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkUnmapMemory", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkUnmapMemory(System.IntPtr device, uint memory) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///memoryRangeCount: uint32_t->unsigned int
    ///pMemoryRanges: VkMappedMemoryRange*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkFlushMappedMemoryRanges", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkFlushMappedMemoryRanges(System.IntPtr device, uint memoryRangeCount, ref VkMappedMemoryRange pMemoryRanges) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///memoryRangeCount: uint32_t->unsigned int
    ///pMemoryRanges: VkMappedMemoryRange*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkInvalidateMappedMemoryRanges", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkInvalidateMappedMemoryRanges(System.IntPtr device, uint memoryRangeCount, ref VkMappedMemoryRange pMemoryRanges) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///memory: VkDeviceMemory->uint64_t->unsigned int
    ///pCommittedMemoryInBytes: VkDeviceSize*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetDeviceMemoryCommitment", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetDeviceMemoryCommitment(System.IntPtr device, uint memory, ref uint pCommittedMemoryInBytes) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///buffer: VkBuffer->uint64_t->unsigned int
    ///memory: VkDeviceMemory->uint64_t->unsigned int
    ///memoryOffset: VkDeviceSize->uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkBindBufferMemory", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkBindBufferMemory(System.IntPtr device, uint buffer, uint memory, uint memoryOffset) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///image: VkImage->uint64_t->unsigned int
    ///memory: VkDeviceMemory->uint64_t->unsigned int
    ///memoryOffset: VkDeviceSize->uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkBindImageMemory", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkBindImageMemory(System.IntPtr device, uint image, uint memory, uint memoryOffset) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///buffer: VkBuffer->uint64_t->unsigned int
    ///pMemoryRequirements: VkMemoryRequirements*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetBufferMemoryRequirements", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetBufferMemoryRequirements(System.IntPtr device, uint buffer, ref VkMemoryRequirements pMemoryRequirements) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///image: VkImage->uint64_t->unsigned int
    ///pMemoryRequirements: VkMemoryRequirements*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetImageMemoryRequirements", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetImageMemoryRequirements(System.IntPtr device, uint image, ref VkMemoryRequirements pMemoryRequirements) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///image: VkImage->uint64_t->unsigned int
    ///pSparseMemoryRequirementCount: uint32_t*
    ///pSparseMemoryRequirements: VkSparseImageMemoryRequirements*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetImageSparseMemoryRequirements", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetImageSparseMemoryRequirements(System.IntPtr device, uint image, ref uint pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements pSparseMemoryRequirements) ;

    
    /// Return Type: void
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///format: VkFormat
    ///type: VkImageType
    ///samples: VkSampleCountFlagBits
    ///usage: VkImageUsageFlags->VkFlags->uint32_t->unsigned int
    ///tiling: VkImageTiling
    ///pPropertyCount: uint32_t*
    ///pProperties: VkSparseImageFormatProperties*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceSparseImageFormatProperties", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetPhysicalDeviceSparseImageFormatProperties(System.IntPtr physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, uint usage, VkImageTiling tiling, ref uint pPropertyCount, ref VkSparseImageFormatProperties pProperties) ;

    
    /// Return Type: VkResult
    ///queue: VkQueue->VkQueue_T*
    ///bindInfoCount: uint32_t->unsigned int
    ///pBindInfo: VkBindSparseInfo*
    ///fence: VkFence->uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkQueueBindSparse", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkQueueBindSparse(System.IntPtr queue, uint bindInfoCount, ref VkBindSparseInfo pBindInfo, uint fence) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkFenceCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pFence: VkFence*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateFence", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateFence(System.IntPtr device, ref VkFenceCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pFence) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///fence: VkFence->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyFence", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyFence(System.IntPtr device, uint fence, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///fenceCount: uint32_t->unsigned int
    ///pFences: VkFence*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkResetFences", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkResetFences(System.IntPtr device, uint fenceCount, ref uint pFences) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///fence: VkFence->uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetFenceStatus", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetFenceStatus(System.IntPtr device, uint fence) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///fenceCount: uint32_t->unsigned int
    ///pFences: VkFence*
    ///waitAll: VkBool32->uint32_t->unsigned int
    ///timeout: uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkWaitForFences", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkWaitForFences(System.IntPtr device, uint fenceCount, ref uint pFences, uint waitAll, uint timeout) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkSemaphoreCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pSemaphore: VkSemaphore*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateSemaphore", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateSemaphore(System.IntPtr device, ref VkSemaphoreCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pSemaphore) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///semaphore: VkSemaphore->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroySemaphore", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroySemaphore(System.IntPtr device, uint semaphore, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkEventCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pEvent: VkEvent*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateEvent", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateEvent(System.IntPtr device, ref VkEventCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pEvent) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///event: VkEvent->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyEvent", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyEvent(System.IntPtr device, uint @event, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///event: VkEvent->uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetEventStatus", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetEventStatus(System.IntPtr device, uint @event) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///event: VkEvent->uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkSetEvent", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkSetEvent(System.IntPtr device, uint @event) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///event: VkEvent->uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkResetEvent", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkResetEvent(System.IntPtr device, uint @event) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkQueryPoolCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pQueryPool: VkQueryPool*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateQueryPool", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateQueryPool(System.IntPtr device, ref VkQueryPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pQueryPool) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///queryPool: VkQueryPool->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyQueryPool", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyQueryPool(System.IntPtr device, uint queryPool, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///queryPool: VkQueryPool->uint64_t->unsigned int
    ///firstQuery: uint32_t->unsigned int
    ///queryCount: uint32_t->unsigned int
    ///dataSize: size_t->unsigned int
    ///pData: void*
    ///stride: VkDeviceSize->uint64_t->unsigned int
    ///flags: VkQueryResultFlags->VkFlags->uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetQueryPoolResults", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetQueryPoolResults(System.IntPtr device, uint queryPool, uint firstQuery, uint queryCount, [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.SysUInt)] uint dataSize, System.IntPtr pData, uint stride, uint flags) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkBufferCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pBuffer: VkBuffer*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateBuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateBuffer(System.IntPtr device, ref VkBufferCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pBuffer) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///buffer: VkBuffer->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyBuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyBuffer(System.IntPtr device, uint buffer, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkBufferViewCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pView: VkBufferView*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateBufferView", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateBufferView(System.IntPtr device, ref VkBufferViewCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pView) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///bufferView: VkBufferView->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyBufferView", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyBufferView(System.IntPtr device, uint bufferView, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkImageCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pImage: VkImage*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateImage", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateImage(System.IntPtr device, ref VkImageCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pImage) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///image: VkImage->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyImage", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyImage(System.IntPtr device, uint image, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///image: VkImage->uint64_t->unsigned int
    ///pSubresource: VkImageSubresource*
    ///pLayout: VkSubresourceLayout*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetImageSubresourceLayout", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetImageSubresourceLayout(System.IntPtr device, uint image, ref VkImageSubresource pSubresource, ref VkSubresourceLayout pLayout) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkImageViewCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pView: VkImageView*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateImageView", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateImageView(System.IntPtr device, ref VkImageViewCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pView) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///imageView: VkImageView->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyImageView", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyImageView(System.IntPtr device, uint imageView, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkShaderModuleCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pShaderModule: VkShaderModule*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateShaderModule", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateShaderModule(System.IntPtr device, ref VkShaderModuleCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pShaderModule) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///shaderModule: VkShaderModule->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyShaderModule", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyShaderModule(System.IntPtr device, uint shaderModule, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkPipelineCacheCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pPipelineCache: VkPipelineCache*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreatePipelineCache", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreatePipelineCache(System.IntPtr device, ref VkPipelineCacheCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pPipelineCache) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///pipelineCache: VkPipelineCache->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyPipelineCache", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyPipelineCache(System.IntPtr device, uint pipelineCache, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pipelineCache: VkPipelineCache->uint64_t->unsigned int
    ///pDataSize: size_t*
    ///pData: void*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPipelineCacheData", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetPipelineCacheData(System.IntPtr device, uint pipelineCache, ref uint pDataSize, System.IntPtr pData) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///dstCache: VkPipelineCache->uint64_t->unsigned int
    ///srcCacheCount: uint32_t->unsigned int
    ///pSrcCaches: VkPipelineCache*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkMergePipelineCaches", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkMergePipelineCaches(System.IntPtr device, uint dstCache, uint srcCacheCount, ref uint pSrcCaches) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pipelineCache: VkPipelineCache->uint64_t->unsigned int
    ///createInfoCount: uint32_t->unsigned int
    ///pCreateInfos: VkGraphicsPipelineCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pPipelines: VkPipeline*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateGraphicsPipelines", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateGraphicsPipelines(System.IntPtr device, uint pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo pCreateInfos, ref VkAllocationCallbacks pAllocator, ref uint pPipelines) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pipelineCache: VkPipelineCache->uint64_t->unsigned int
    ///createInfoCount: uint32_t->unsigned int
    ///pCreateInfos: VkComputePipelineCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pPipelines: VkPipeline*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateComputePipelines", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateComputePipelines(System.IntPtr device, uint pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo pCreateInfos, ref VkAllocationCallbacks pAllocator, ref uint pPipelines) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///pipeline: VkPipeline->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyPipeline", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyPipeline(System.IntPtr device, uint pipeline, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkPipelineLayoutCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pPipelineLayout: VkPipelineLayout*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreatePipelineLayout", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreatePipelineLayout(System.IntPtr device, ref VkPipelineLayoutCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pPipelineLayout) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///pipelineLayout: VkPipelineLayout->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyPipelineLayout", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyPipelineLayout(System.IntPtr device, uint pipelineLayout, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkSamplerCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pSampler: VkSampler*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateSampler", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateSampler(System.IntPtr device, ref VkSamplerCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pSampler) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///sampler: VkSampler->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroySampler", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroySampler(System.IntPtr device, uint sampler, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkDescriptorSetLayoutCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pSetLayout: VkDescriptorSetLayout*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateDescriptorSetLayout", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateDescriptorSetLayout(System.IntPtr device, ref VkDescriptorSetLayoutCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pSetLayout) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///descriptorSetLayout: VkDescriptorSetLayout->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyDescriptorSetLayout", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyDescriptorSetLayout(System.IntPtr device, uint descriptorSetLayout, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkDescriptorPoolCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pDescriptorPool: VkDescriptorPool*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateDescriptorPool", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateDescriptorPool(System.IntPtr device, ref VkDescriptorPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pDescriptorPool) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///descriptorPool: VkDescriptorPool->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyDescriptorPool", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyDescriptorPool(System.IntPtr device, uint descriptorPool, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///descriptorPool: VkDescriptorPool->uint64_t->unsigned int
    ///flags: VkDescriptorPoolResetFlags->VkFlags->uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkResetDescriptorPool", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkResetDescriptorPool(System.IntPtr device, uint descriptorPool, uint flags) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pAllocateInfo: VkDescriptorSetAllocateInfo*
    ///pDescriptorSets: VkDescriptorSet*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkAllocateDescriptorSets", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkAllocateDescriptorSets(System.IntPtr device, ref VkDescriptorSetAllocateInfo pAllocateInfo, ref uint pDescriptorSets) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///descriptorPool: VkDescriptorPool->uint64_t->unsigned int
    ///descriptorSetCount: uint32_t->unsigned int
    ///pDescriptorSets: VkDescriptorSet*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkFreeDescriptorSets", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkFreeDescriptorSets(System.IntPtr device, uint descriptorPool, uint descriptorSetCount, ref uint pDescriptorSets) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///descriptorWriteCount: uint32_t->unsigned int
    ///pDescriptorWrites: VkWriteDescriptorSet*
    ///descriptorCopyCount: uint32_t->unsigned int
    ///pDescriptorCopies: VkCopyDescriptorSet*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkUpdateDescriptorSets", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkUpdateDescriptorSets(System.IntPtr device, uint descriptorWriteCount, ref VkWriteDescriptorSet pDescriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet pDescriptorCopies) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkFramebufferCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pFramebuffer: VkFramebuffer*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateFramebuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateFramebuffer(System.IntPtr device, ref VkFramebufferCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pFramebuffer) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///framebuffer: VkFramebuffer->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyFramebuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyFramebuffer(System.IntPtr device, uint framebuffer, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkRenderPassCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pRenderPass: VkRenderPass*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateRenderPass", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateRenderPass(System.IntPtr device, ref VkRenderPassCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pRenderPass) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///renderPass: VkRenderPass->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyRenderPass", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyRenderPass(System.IntPtr device, uint renderPass, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///renderPass: VkRenderPass->uint64_t->unsigned int
    ///pGranularity: VkExtent2D*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetRenderAreaGranularity", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkGetRenderAreaGranularity(System.IntPtr device, uint renderPass, ref VkExtent2D pGranularity) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkCommandPoolCreateInfo*
    ///pAllocator: VkAllocationCallbacks*
    ///pCommandPool: VkCommandPool*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateCommandPool", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateCommandPool(System.IntPtr device, ref VkCommandPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pCommandPool) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///commandPool: VkCommandPool->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyCommandPool", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyCommandPool(System.IntPtr device, uint commandPool, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///commandPool: VkCommandPool->uint64_t->unsigned int
    ///flags: VkCommandPoolResetFlags->VkFlags->uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkResetCommandPool", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkResetCommandPool(System.IntPtr device, uint commandPool, uint flags) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pAllocateInfo: VkCommandBufferAllocateInfo*
    ///pCommandBuffers: VkCommandBuffer*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkAllocateCommandBuffers", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkAllocateCommandBuffers(System.IntPtr device, ref VkCommandBufferAllocateInfo pAllocateInfo, ref System.IntPtr pCommandBuffers) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///commandPool: VkCommandPool->uint64_t->unsigned int
    ///commandBufferCount: uint32_t->unsigned int
    ///pCommandBuffers: VkCommandBuffer*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkFreeCommandBuffers", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkFreeCommandBuffers(System.IntPtr device, uint commandPool, uint commandBufferCount, ref System.IntPtr pCommandBuffers) ;

    
    /// Return Type: VkResult
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///pBeginInfo: VkCommandBufferBeginInfo*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkBeginCommandBuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkBeginCommandBuffer(System.IntPtr commandBuffer, ref VkCommandBufferBeginInfo pBeginInfo) ;

    
    /// Return Type: VkResult
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkEndCommandBuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkEndCommandBuffer(System.IntPtr commandBuffer) ;

    
    /// Return Type: VkResult
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///flags: VkCommandBufferResetFlags->VkFlags->uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkResetCommandBuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkResetCommandBuffer(System.IntPtr commandBuffer, uint flags) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///pipelineBindPoint: VkPipelineBindPoint
    ///pipeline: VkPipeline->uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdBindPipeline", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdBindPipeline(System.IntPtr commandBuffer, VkPipelineBindPoint pipelineBindPoint, uint pipeline) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///firstViewport: uint32_t->unsigned int
    ///viewportCount: uint32_t->unsigned int
    ///pViewports: VkViewport*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdSetViewport", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdSetViewport(System.IntPtr commandBuffer, uint firstViewport, uint viewportCount, ref VkViewport pViewports) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///firstScissor: uint32_t->unsigned int
    ///scissorCount: uint32_t->unsigned int
    ///pScissors: VkRect2D*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdSetScissor", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdSetScissor(System.IntPtr commandBuffer, uint firstScissor, uint scissorCount, ref VkRect2D pScissors) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///lineWidth: float
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdSetLineWidth", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdSetLineWidth(System.IntPtr commandBuffer, float lineWidth) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///depthBiasConstantFactor: float
    ///depthBiasClamp: float
    ///depthBiasSlopeFactor: float
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdSetDepthBias", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdSetDepthBias(System.IntPtr commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///blendConstants: float*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdSetBlendConstants", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdSetBlendConstants(System.IntPtr commandBuffer, ref float blendConstants) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///minDepthBounds: float
    ///maxDepthBounds: float
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdSetDepthBounds", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdSetDepthBounds(System.IntPtr commandBuffer, float minDepthBounds, float maxDepthBounds) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///faceMask: VkStencilFaceFlags->VkFlags->uint32_t->unsigned int
    ///compareMask: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdSetStencilCompareMask", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdSetStencilCompareMask(System.IntPtr commandBuffer, uint faceMask, uint compareMask) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///faceMask: VkStencilFaceFlags->VkFlags->uint32_t->unsigned int
    ///writeMask: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdSetStencilWriteMask", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdSetStencilWriteMask(System.IntPtr commandBuffer, uint faceMask, uint writeMask) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///faceMask: VkStencilFaceFlags->VkFlags->uint32_t->unsigned int
    ///reference: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdSetStencilReference", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdSetStencilReference(System.IntPtr commandBuffer, uint faceMask, uint reference) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///pipelineBindPoint: VkPipelineBindPoint
    ///layout: VkPipelineLayout->uint64_t->unsigned int
    ///firstSet: uint32_t->unsigned int
    ///descriptorSetCount: uint32_t->unsigned int
    ///pDescriptorSets: VkDescriptorSet*
    ///dynamicOffsetCount: uint32_t->unsigned int
    ///pDynamicOffsets: uint32_t*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdBindDescriptorSets", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdBindDescriptorSets(System.IntPtr commandBuffer, VkPipelineBindPoint pipelineBindPoint, uint layout, uint firstSet, uint descriptorSetCount, ref uint pDescriptorSets, uint dynamicOffsetCount, ref uint pDynamicOffsets) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///buffer: VkBuffer->uint64_t->unsigned int
    ///offset: VkDeviceSize->uint64_t->unsigned int
    ///indexType: VkIndexType
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdBindIndexBuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdBindIndexBuffer(System.IntPtr commandBuffer, uint buffer, uint offset, VkIndexType indexType) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///firstBinding: uint32_t->unsigned int
    ///bindingCount: uint32_t->unsigned int
    ///pBuffers: VkBuffer*
    ///pOffsets: VkDeviceSize*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdBindVertexBuffers", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdBindVertexBuffers(System.IntPtr commandBuffer, uint firstBinding, uint bindingCount, ref uint pBuffers, ref uint pOffsets) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///vertexCount: uint32_t->unsigned int
    ///instanceCount: uint32_t->unsigned int
    ///firstVertex: uint32_t->unsigned int
    ///firstInstance: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdDraw", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdDraw(System.IntPtr commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///indexCount: uint32_t->unsigned int
    ///instanceCount: uint32_t->unsigned int
    ///firstIndex: uint32_t->unsigned int
    ///vertexOffset: int32_t->int
    ///firstInstance: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdDrawIndexed", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdDrawIndexed(System.IntPtr commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///buffer: VkBuffer->uint64_t->unsigned int
    ///offset: VkDeviceSize->uint64_t->unsigned int
    ///drawCount: uint32_t->unsigned int
    ///stride: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdDrawIndirect", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdDrawIndirect(System.IntPtr commandBuffer, uint buffer, uint offset, uint drawCount, uint stride) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///buffer: VkBuffer->uint64_t->unsigned int
    ///offset: VkDeviceSize->uint64_t->unsigned int
    ///drawCount: uint32_t->unsigned int
    ///stride: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdDrawIndexedIndirect", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdDrawIndexedIndirect(System.IntPtr commandBuffer, uint buffer, uint offset, uint drawCount, uint stride) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///x: uint32_t->unsigned int
    ///y: uint32_t->unsigned int
    ///z: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdDispatch", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdDispatch(System.IntPtr commandBuffer, uint x, uint y, uint z) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///buffer: VkBuffer->uint64_t->unsigned int
    ///offset: VkDeviceSize->uint64_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdDispatchIndirect", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdDispatchIndirect(System.IntPtr commandBuffer, uint buffer, uint offset) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///srcBuffer: VkBuffer->uint64_t->unsigned int
    ///dstBuffer: VkBuffer->uint64_t->unsigned int
    ///regionCount: uint32_t->unsigned int
    ///pRegions: VkBufferCopy*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdCopyBuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdCopyBuffer(System.IntPtr commandBuffer, uint srcBuffer, uint dstBuffer, uint regionCount, ref VkBufferCopy pRegions) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///srcImage: VkImage->uint64_t->unsigned int
    ///srcImageLayout: VkImageLayout
    ///dstImage: VkImage->uint64_t->unsigned int
    ///dstImageLayout: VkImageLayout
    ///regionCount: uint32_t->unsigned int
    ///pRegions: VkImageCopy*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdCopyImage", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdCopyImage(System.IntPtr commandBuffer, uint srcImage, VkImageLayout srcImageLayout, uint dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageCopy pRegions) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///srcImage: VkImage->uint64_t->unsigned int
    ///srcImageLayout: VkImageLayout
    ///dstImage: VkImage->uint64_t->unsigned int
    ///dstImageLayout: VkImageLayout
    ///regionCount: uint32_t->unsigned int
    ///pRegions: VkImageBlit*
    ///filter: VkFilter
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdBlitImage", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdBlitImage(System.IntPtr commandBuffer, uint srcImage, VkImageLayout srcImageLayout, uint dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageBlit pRegions, VkFilter filter) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///srcBuffer: VkBuffer->uint64_t->unsigned int
    ///dstImage: VkImage->uint64_t->unsigned int
    ///dstImageLayout: VkImageLayout
    ///regionCount: uint32_t->unsigned int
    ///pRegions: VkBufferImageCopy*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdCopyBufferToImage", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdCopyBufferToImage(System.IntPtr commandBuffer, uint srcBuffer, uint dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkBufferImageCopy pRegions) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///srcImage: VkImage->uint64_t->unsigned int
    ///srcImageLayout: VkImageLayout
    ///dstBuffer: VkBuffer->uint64_t->unsigned int
    ///regionCount: uint32_t->unsigned int
    ///pRegions: VkBufferImageCopy*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdCopyImageToBuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdCopyImageToBuffer(System.IntPtr commandBuffer, uint srcImage, VkImageLayout srcImageLayout, uint dstBuffer, uint regionCount, ref VkBufferImageCopy pRegions) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///dstBuffer: VkBuffer->uint64_t->unsigned int
    ///dstOffset: VkDeviceSize->uint64_t->unsigned int
    ///dataSize: VkDeviceSize->uint64_t->unsigned int
    ///pData: uint32_t*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdUpdateBuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdUpdateBuffer(System.IntPtr commandBuffer, uint dstBuffer, uint dstOffset, uint dataSize, ref uint pData) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///dstBuffer: VkBuffer->uint64_t->unsigned int
    ///dstOffset: VkDeviceSize->uint64_t->unsigned int
    ///size: VkDeviceSize->uint64_t->unsigned int
    ///data: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdFillBuffer", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdFillBuffer(System.IntPtr commandBuffer, uint dstBuffer, uint dstOffset, uint size, uint data) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///image: VkImage->uint64_t->unsigned int
    ///imageLayout: VkImageLayout
    ///pColor: VkClearColorValue*
    ///rangeCount: uint32_t->unsigned int
    ///pRanges: VkImageSubresourceRange*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdClearColorImage", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdClearColorImage(System.IntPtr commandBuffer, uint image, VkImageLayout imageLayout, ref VkClearColorValue pColor, uint rangeCount, ref VkImageSubresourceRange pRanges) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///image: VkImage->uint64_t->unsigned int
    ///imageLayout: VkImageLayout
    ///pDepthStencil: VkClearDepthStencilValue*
    ///rangeCount: uint32_t->unsigned int
    ///pRanges: VkImageSubresourceRange*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdClearDepthStencilImage", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdClearDepthStencilImage(System.IntPtr commandBuffer, uint image, VkImageLayout imageLayout, ref VkClearDepthStencilValue pDepthStencil, uint rangeCount, ref VkImageSubresourceRange pRanges) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///attachmentCount: uint32_t->unsigned int
    ///pAttachments: VkClearAttachment*
    ///rectCount: uint32_t->unsigned int
    ///pRects: VkClearRect*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdClearAttachments", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdClearAttachments(System.IntPtr commandBuffer, uint attachmentCount, ref VkClearAttachment pAttachments, uint rectCount, ref VkClearRect pRects) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///srcImage: VkImage->uint64_t->unsigned int
    ///srcImageLayout: VkImageLayout
    ///dstImage: VkImage->uint64_t->unsigned int
    ///dstImageLayout: VkImageLayout
    ///regionCount: uint32_t->unsigned int
    ///pRegions: VkImageResolve*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdResolveImage", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdResolveImage(System.IntPtr commandBuffer, uint srcImage, VkImageLayout srcImageLayout, uint dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageResolve pRegions) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///event: VkEvent->uint64_t->unsigned int
    ///stageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdSetEvent", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdSetEvent(System.IntPtr commandBuffer, uint @event, uint stageMask) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///event: VkEvent->uint64_t->unsigned int
    ///stageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdResetEvent", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdResetEvent(System.IntPtr commandBuffer, uint @event, uint stageMask) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///eventCount: uint32_t->unsigned int
    ///pEvents: VkEvent*
    ///srcStageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
    ///dstStageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
    ///memoryBarrierCount: uint32_t->unsigned int
    ///pMemoryBarriers: VkMemoryBarrier*
    ///bufferMemoryBarrierCount: uint32_t->unsigned int
    ///pBufferMemoryBarriers: VkBufferMemoryBarrier*
    ///imageMemoryBarrierCount: uint32_t->unsigned int
    ///pImageMemoryBarriers: VkImageMemoryBarrier*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdWaitEvents", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdWaitEvents(System.IntPtr commandBuffer, uint eventCount, ref uint pEvents, uint srcStageMask, uint dstStageMask, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///srcStageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
    ///dstStageMask: VkPipelineStageFlags->VkFlags->uint32_t->unsigned int
    ///dependencyFlags: VkDependencyFlags->VkFlags->uint32_t->unsigned int
    ///memoryBarrierCount: uint32_t->unsigned int
    ///pMemoryBarriers: VkMemoryBarrier*
    ///bufferMemoryBarrierCount: uint32_t->unsigned int
    ///pBufferMemoryBarriers: VkBufferMemoryBarrier*
    ///imageMemoryBarrierCount: uint32_t->unsigned int
    ///pImageMemoryBarriers: VkImageMemoryBarrier*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdPipelineBarrier", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdPipelineBarrier(System.IntPtr commandBuffer, uint srcStageMask, uint dstStageMask, uint dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///queryPool: VkQueryPool->uint64_t->unsigned int
    ///query: uint32_t->unsigned int
    ///flags: VkQueryControlFlags->VkFlags->uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdBeginQuery", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdBeginQuery(System.IntPtr commandBuffer, uint queryPool, uint query, uint flags) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///queryPool: VkQueryPool->uint64_t->unsigned int
    ///query: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdEndQuery", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdEndQuery(System.IntPtr commandBuffer, uint queryPool, uint query) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///queryPool: VkQueryPool->uint64_t->unsigned int
    ///firstQuery: uint32_t->unsigned int
    ///queryCount: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdResetQueryPool", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdResetQueryPool(System.IntPtr commandBuffer, uint queryPool, uint firstQuery, uint queryCount) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///pipelineStage: VkPipelineStageFlagBits
    ///queryPool: VkQueryPool->uint64_t->unsigned int
    ///query: uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdWriteTimestamp", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdWriteTimestamp(System.IntPtr commandBuffer, VkPipelineStageFlagBits pipelineStage, uint queryPool, uint query) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///queryPool: VkQueryPool->uint64_t->unsigned int
    ///firstQuery: uint32_t->unsigned int
    ///queryCount: uint32_t->unsigned int
    ///dstBuffer: VkBuffer->uint64_t->unsigned int
    ///dstOffset: VkDeviceSize->uint64_t->unsigned int
    ///stride: VkDeviceSize->uint64_t->unsigned int
    ///flags: VkQueryResultFlags->VkFlags->uint32_t->unsigned int
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdCopyQueryPoolResults", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdCopyQueryPoolResults(System.IntPtr commandBuffer, uint queryPool, uint firstQuery, uint queryCount, uint dstBuffer, uint dstOffset, uint stride, uint flags) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///layout: VkPipelineLayout->uint64_t->unsigned int
    ///stageFlags: VkShaderStageFlags->VkFlags->uint32_t->unsigned int
    ///offset: uint32_t->unsigned int
    ///size: uint32_t->unsigned int
    ///pValues: void*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdPushConstants", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdPushConstants(System.IntPtr commandBuffer, uint layout, uint stageFlags, uint offset, uint size, System.IntPtr pValues) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///pRenderPassBegin: VkRenderPassBeginInfo*
    ///contents: VkSubpassContents
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdBeginRenderPass", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdBeginRenderPass(System.IntPtr commandBuffer, ref VkRenderPassBeginInfo pRenderPassBegin, VkSubpassContents contents) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///contents: VkSubpassContents
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdNextSubpass", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdNextSubpass(System.IntPtr commandBuffer, VkSubpassContents contents) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdEndRenderPass", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdEndRenderPass(System.IntPtr commandBuffer) ;

    
    /// Return Type: void
    ///commandBuffer: VkCommandBuffer->VkCommandBuffer_T*
    ///commandBufferCount: uint32_t->unsigned int
    ///pCommandBuffers: VkCommandBuffer*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCmdExecuteCommands", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkCmdExecuteCommands(System.IntPtr commandBuffer, uint commandBufferCount, ref System.IntPtr pCommandBuffers) ;

    
    /// Return Type: void
    ///instance: VkInstance->VkInstance_T*
    ///surface: VkSurfaceKHR->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroySurfaceKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroySurfaceKHR(System.IntPtr instance, uint surface, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///queueFamilyIndex: uint32_t->unsigned int
    ///surface: VkSurfaceKHR->uint64_t->unsigned int
    ///pSupported: VkBool32*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceSurfaceSupportKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetPhysicalDeviceSurfaceSupportKHR(System.IntPtr physicalDevice, uint queueFamilyIndex, uint surface, ref uint pSupported) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///surface: VkSurfaceKHR->uint64_t->unsigned int
    ///pSurfaceCapabilities: VkSurfaceCapabilitiesKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceSurfaceCapabilitiesKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(System.IntPtr physicalDevice, uint surface, ref VkSurfaceCapabilitiesKHR pSurfaceCapabilities) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///surface: VkSurfaceKHR->uint64_t->unsigned int
    ///pSurfaceFormatCount: uint32_t*
    ///pSurfaceFormats: VkSurfaceFormatKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceSurfaceFormatsKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(System.IntPtr physicalDevice, uint surface, ref uint pSurfaceFormatCount, ref VkSurfaceFormatKHR pSurfaceFormats) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///surface: VkSurfaceKHR->uint64_t->unsigned int
    ///pPresentModeCount: uint32_t*
    ///pPresentModes: VkPresentModeKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceSurfacePresentModesKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(System.IntPtr physicalDevice, uint surface, ref uint pPresentModeCount, ref VkPresentModeKHR pPresentModes) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///pCreateInfo: VkSwapchainCreateInfoKHR*
    ///pAllocator: VkAllocationCallbacks*
    ///pSwapchain: VkSwapchainKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateSwapchainKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateSwapchainKHR(System.IntPtr device, ref VkSwapchainCreateInfoKHR pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pSwapchain) ;

    
    /// Return Type: void
    ///device: VkDevice->VkDevice_T*
    ///swapchain: VkSwapchainKHR->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroySwapchainKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroySwapchainKHR(System.IntPtr device, uint swapchain, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///swapchain: VkSwapchainKHR->uint64_t->unsigned int
    ///pSwapchainImageCount: uint32_t*
    ///pSwapchainImages: VkImage*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetSwapchainImagesKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetSwapchainImagesKHR(System.IntPtr device, uint swapchain, ref uint pSwapchainImageCount, ref uint pSwapchainImages) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///swapchain: VkSwapchainKHR->uint64_t->unsigned int
    ///timeout: uint64_t->unsigned int
    ///semaphore: VkSemaphore->uint64_t->unsigned int
    ///fence: VkFence->uint64_t->unsigned int
    ///pImageIndex: uint32_t*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkAcquireNextImageKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkAcquireNextImageKHR(System.IntPtr device, uint swapchain, uint timeout, uint semaphore, uint fence, ref uint pImageIndex) ;

    
    /// Return Type: VkResult
    ///queue: VkQueue->VkQueue_T*
    ///pPresentInfo: VkPresentInfoKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkQueuePresentKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkQueuePresentKHR(System.IntPtr queue, ref VkPresentInfoKHR pPresentInfo) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///pPropertyCount: uint32_t*
    ///pProperties: VkDisplayPropertiesKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceDisplayPropertiesKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(System.IntPtr physicalDevice, ref uint pPropertyCount, ref VkDisplayPropertiesKHR pProperties) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///pPropertyCount: uint32_t*
    ///pProperties: VkDisplayPlanePropertiesKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetPhysicalDeviceDisplayPlanePropertiesKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(System.IntPtr physicalDevice, ref uint pPropertyCount, ref VkDisplayPlanePropertiesKHR pProperties) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///planeIndex: uint32_t->unsigned int
    ///pDisplayCount: uint32_t*
    ///pDisplays: VkDisplayKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetDisplayPlaneSupportedDisplaysKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetDisplayPlaneSupportedDisplaysKHR(System.IntPtr physicalDevice, uint planeIndex, ref uint pDisplayCount, ref uint pDisplays) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///display: VkDisplayKHR->uint64_t->unsigned int
    ///pPropertyCount: uint32_t*
    ///pProperties: VkDisplayModePropertiesKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetDisplayModePropertiesKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetDisplayModePropertiesKHR(System.IntPtr physicalDevice, uint display, ref uint pPropertyCount, ref VkDisplayModePropertiesKHR pProperties) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///display: VkDisplayKHR->uint64_t->unsigned int
    ///pCreateInfo: VkDisplayModeCreateInfoKHR*
    ///pAllocator: VkAllocationCallbacks*
    ///pMode: VkDisplayModeKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateDisplayModeKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateDisplayModeKHR(System.IntPtr physicalDevice, uint display, ref VkDisplayModeCreateInfoKHR pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pMode) ;

    
    /// Return Type: VkResult
    ///physicalDevice: VkPhysicalDevice->VkPhysicalDevice_T*
    ///mode: VkDisplayModeKHR->uint64_t->unsigned int
    ///planeIndex: uint32_t->unsigned int
    ///pCapabilities: VkDisplayPlaneCapabilitiesKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetDisplayPlaneCapabilitiesKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetDisplayPlaneCapabilitiesKHR(System.IntPtr physicalDevice, uint mode, uint planeIndex, ref VkDisplayPlaneCapabilitiesKHR pCapabilities) ;

    
    /// Return Type: VkResult
    ///instance: VkInstance->VkInstance_T*
    ///pCreateInfo: VkDisplaySurfaceCreateInfoKHR*
    ///pAllocator: VkAllocationCallbacks*
    ///pSurface: VkSurfaceKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateDisplayPlaneSurfaceKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateDisplayPlaneSurfaceKHR(System.IntPtr instance, ref VkDisplaySurfaceCreateInfoKHR pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pSurface) ;

    
    /// Return Type: VkResult
    ///device: VkDevice->VkDevice_T*
    ///swapchainCount: uint32_t->unsigned int
    ///pCreateInfos: VkSwapchainCreateInfoKHR*
    ///pAllocator: VkAllocationCallbacks*
    ///pSwapchains: VkSwapchainKHR*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateSharedSwapchainsKHR", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateSharedSwapchainsKHR(System.IntPtr device, uint swapchainCount, ref VkSwapchainCreateInfoKHR pCreateInfos, ref VkAllocationCallbacks pAllocator, ref uint pSwapchains) ;

    
    /// Return Type: VkResult
    ///instance: VkInstance->VkInstance_T*
    ///pCreateInfo: VkDebugReportCallbackCreateInfoEXT*
    ///pAllocator: VkAllocationCallbacks*
    ///pCallback: VkDebugReportCallbackEXT*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkCreateDebugReportCallbackEXT", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkCreateDebugReportCallbackEXT(System.IntPtr instance, ref VkDebugReportCallbackCreateInfoEXT pCreateInfo, ref VkAllocationCallbacks pAllocator, ref uint pCallback) ;

    
    /// Return Type: void
    ///instance: VkInstance->VkInstance_T*
    ///callback: VkDebugReportCallbackEXT->uint64_t->unsigned int
    ///pAllocator: VkAllocationCallbacks*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDestroyDebugReportCallbackEXT", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDestroyDebugReportCallbackEXT(System.IntPtr instance, uint callback, ref VkAllocationCallbacks pAllocator) ;

    
    /// Return Type: void
    ///instance: VkInstance->VkInstance_T*
    ///flags: VkDebugReportFlagsEXT->VkFlags->uint32_t->unsigned int
    ///objectType: VkDebugReportObjectTypeEXT
    ///object: uint64_t->unsigned int
    ///location: size_t->unsigned int
    ///messageCode: int32_t->int
    ///pLayerPrefix: char*
    ///pMessage: char*
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDebugReportMessageEXT", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDebugReportMessageEXT(System.IntPtr instance, uint flags, VkDebugReportObjectTypeEXT objectType, uint @object, [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.SysUInt)] uint location, int messageCode, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pLayerPrefix, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pMessage) ;

    
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkGetQueryPoolResults", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  VkResult vkGetQueryPoolResults(System.IntPtr device, uint queryPool, uint firstQuery, uint queryCount, System.IntPtr dataSize, System.IntPtr pData, uint stride, uint flags) ;

    
    [System.Runtime.InteropServices.DllImportAttribute("vulkan-1.dll", EntryPoint="vkDebugReportMessageEXT", CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]
public static extern  void vkDebugReportMessageEXT(System.IntPtr instance, uint flags, VkDebugReportObjectTypeEXT objectType, uint @object, System.IntPtr location, int messageCode, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pLayerPrefix, [System.Runtime.InteropServices.InAttribute()] [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)] string pMessage) ;

}
