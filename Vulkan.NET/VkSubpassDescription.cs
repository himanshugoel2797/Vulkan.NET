//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class VkSubpassDescription : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VkSubpassDescription(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VkSubpassDescription obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VkSubpassDescription() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vulkanPINVOKE.delete_VkSubpassDescription(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_uint32_t flags {
    set {
      vulkanPINVOKE.VkSubpassDescription_flags_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkSubpassDescription_flags_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VkPipelineBindPoint pipelineBindPoint {
    set {
      vulkanPINVOKE.VkSubpassDescription_pipelineBindPoint_set(swigCPtr, (int)value);
    } 
    get {
      VkPipelineBindPoint ret = (VkPipelineBindPoint)vulkanPINVOKE.VkSubpassDescription_pipelineBindPoint_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t inputAttachmentCount {
    set {
      vulkanPINVOKE.VkSubpassDescription_inputAttachmentCount_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkSubpassDescription_inputAttachmentCount_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VkAttachmentReference pInputAttachments {
    set {
      vulkanPINVOKE.VkSubpassDescription_pInputAttachments_set(swigCPtr, VkAttachmentReference.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkSubpassDescription_pInputAttachments_get(swigCPtr);
      VkAttachmentReference ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkAttachmentReference(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t colorAttachmentCount {
    set {
      vulkanPINVOKE.VkSubpassDescription_colorAttachmentCount_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkSubpassDescription_colorAttachmentCount_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VkAttachmentReference pColorAttachments {
    set {
      vulkanPINVOKE.VkSubpassDescription_pColorAttachments_set(swigCPtr, VkAttachmentReference.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkSubpassDescription_pColorAttachments_get(swigCPtr);
      VkAttachmentReference ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkAttachmentReference(cPtr, false);
      return ret;
    } 
  }

  public VkAttachmentReference pResolveAttachments {
    set {
      vulkanPINVOKE.VkSubpassDescription_pResolveAttachments_set(swigCPtr, VkAttachmentReference.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkSubpassDescription_pResolveAttachments_get(swigCPtr);
      VkAttachmentReference ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkAttachmentReference(cPtr, false);
      return ret;
    } 
  }

  public VkAttachmentReference pDepthStencilAttachment {
    set {
      vulkanPINVOKE.VkSubpassDescription_pDepthStencilAttachment_set(swigCPtr, VkAttachmentReference.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkSubpassDescription_pDepthStencilAttachment_get(swigCPtr);
      VkAttachmentReference ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkAttachmentReference(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t preserveAttachmentCount {
    set {
      vulkanPINVOKE.VkSubpassDescription_preserveAttachmentCount_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkSubpassDescription_preserveAttachmentCount_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t pPreserveAttachments {
    set {
      vulkanPINVOKE.VkSubpassDescription_pPreserveAttachments_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkSubpassDescription_pPreserveAttachments_get(swigCPtr);
      SWIGTYPE_p_uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_uint32_t(cPtr, false);
      return ret;
    } 
  }

  public VkSubpassDescription() : this(vulkanPINVOKE.new_VkSubpassDescription(), true) {
  }

}
