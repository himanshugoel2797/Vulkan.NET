//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class VkStencilOpState : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VkStencilOpState(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VkStencilOpState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VkStencilOpState() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vulkanPINVOKE.delete_VkStencilOpState(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public VkStencilOp failOp {
    set {
      vulkanPINVOKE.VkStencilOpState_failOp_set(swigCPtr, (int)value);
    } 
    get {
      VkStencilOp ret = (VkStencilOp)vulkanPINVOKE.VkStencilOpState_failOp_get(swigCPtr);
      return ret;
    } 
  }

  public VkStencilOp passOp {
    set {
      vulkanPINVOKE.VkStencilOpState_passOp_set(swigCPtr, (int)value);
    } 
    get {
      VkStencilOp ret = (VkStencilOp)vulkanPINVOKE.VkStencilOpState_passOp_get(swigCPtr);
      return ret;
    } 
  }

  public VkStencilOp depthFailOp {
    set {
      vulkanPINVOKE.VkStencilOpState_depthFailOp_set(swigCPtr, (int)value);
    } 
    get {
      VkStencilOp ret = (VkStencilOp)vulkanPINVOKE.VkStencilOpState_depthFailOp_get(swigCPtr);
      return ret;
    } 
  }

  public VkCompareOp compareOp {
    set {
      vulkanPINVOKE.VkStencilOpState_compareOp_set(swigCPtr, (int)value);
    } 
    get {
      VkCompareOp ret = (VkCompareOp)vulkanPINVOKE.VkStencilOpState_compareOp_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t compareMask {
    set {
      vulkanPINVOKE.VkStencilOpState_compareMask_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkStencilOpState_compareMask_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t writeMask {
    set {
      vulkanPINVOKE.VkStencilOpState_writeMask_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkStencilOpState_writeMask_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t reference {
    set {
      vulkanPINVOKE.VkStencilOpState_reference_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkStencilOpState_reference_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VkStencilOpState() : this(vulkanPINVOKE.new_VkStencilOpState(), true) {
  }

}
