//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class VkGraphicsPipelineCreateInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VkGraphicsPipelineCreateInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VkGraphicsPipelineCreateInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VkGraphicsPipelineCreateInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vulkanPINVOKE.delete_VkGraphicsPipelineCreateInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public VkStructureType sType {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_sType_set(swigCPtr, (int)value);
    } 
    get {
      VkStructureType ret = (VkStructureType)vulkanPINVOKE.VkGraphicsPipelineCreateInfo_sType_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void pNext {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pNext_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pNext_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t flags {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_flags_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkGraphicsPipelineCreateInfo_flags_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t stageCount {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_stageCount_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkGraphicsPipelineCreateInfo_stageCount_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VkPipelineShaderStageCreateInfo pStages {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pStages_set(swigCPtr, VkPipelineShaderStageCreateInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pStages_get(swigCPtr);
      VkPipelineShaderStageCreateInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkPipelineShaderStageCreateInfo(cPtr, false);
      return ret;
    } 
  }

  public VkPipelineVertexInputStateCreateInfo pVertexInputState {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pVertexInputState_set(swigCPtr, VkPipelineVertexInputStateCreateInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pVertexInputState_get(swigCPtr);
      VkPipelineVertexInputStateCreateInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkPipelineVertexInputStateCreateInfo(cPtr, false);
      return ret;
    } 
  }

  public VkPipelineInputAssemblyStateCreateInfo pInputAssemblyState {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pInputAssemblyState_set(swigCPtr, VkPipelineInputAssemblyStateCreateInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pInputAssemblyState_get(swigCPtr);
      VkPipelineInputAssemblyStateCreateInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkPipelineInputAssemblyStateCreateInfo(cPtr, false);
      return ret;
    } 
  }

  public VkPipelineTessellationStateCreateInfo pTessellationState {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pTessellationState_set(swigCPtr, VkPipelineTessellationStateCreateInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pTessellationState_get(swigCPtr);
      VkPipelineTessellationStateCreateInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkPipelineTessellationStateCreateInfo(cPtr, false);
      return ret;
    } 
  }

  public VkPipelineViewportStateCreateInfo pViewportState {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pViewportState_set(swigCPtr, VkPipelineViewportStateCreateInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pViewportState_get(swigCPtr);
      VkPipelineViewportStateCreateInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkPipelineViewportStateCreateInfo(cPtr, false);
      return ret;
    } 
  }

  public VkPipelineRasterizationStateCreateInfo pRasterizationState {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pRasterizationState_set(swigCPtr, VkPipelineRasterizationStateCreateInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pRasterizationState_get(swigCPtr);
      VkPipelineRasterizationStateCreateInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkPipelineRasterizationStateCreateInfo(cPtr, false);
      return ret;
    } 
  }

  public VkPipelineMultisampleStateCreateInfo pMultisampleState {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pMultisampleState_set(swigCPtr, VkPipelineMultisampleStateCreateInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pMultisampleState_get(swigCPtr);
      VkPipelineMultisampleStateCreateInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkPipelineMultisampleStateCreateInfo(cPtr, false);
      return ret;
    } 
  }

  public VkPipelineDepthStencilStateCreateInfo pDepthStencilState {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pDepthStencilState_set(swigCPtr, VkPipelineDepthStencilStateCreateInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pDepthStencilState_get(swigCPtr);
      VkPipelineDepthStencilStateCreateInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkPipelineDepthStencilStateCreateInfo(cPtr, false);
      return ret;
    } 
  }

  public VkPipelineColorBlendStateCreateInfo pColorBlendState {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pColorBlendState_set(swigCPtr, VkPipelineColorBlendStateCreateInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pColorBlendState_get(swigCPtr);
      VkPipelineColorBlendStateCreateInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkPipelineColorBlendStateCreateInfo(cPtr, false);
      return ret;
    } 
  }

  public VkPipelineDynamicStateCreateInfo pDynamicState {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pDynamicState_set(swigCPtr, VkPipelineDynamicStateCreateInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = vulkanPINVOKE.VkGraphicsPipelineCreateInfo_pDynamicState_get(swigCPtr);
      VkPipelineDynamicStateCreateInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new VkPipelineDynamicStateCreateInfo(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint64_t layout {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_layout_set(swigCPtr, SWIGTYPE_p_uint64_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(vulkanPINVOKE.VkGraphicsPipelineCreateInfo_layout_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint64_t renderPass {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_renderPass_set(swigCPtr, SWIGTYPE_p_uint64_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(vulkanPINVOKE.VkGraphicsPipelineCreateInfo_renderPass_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t subpass {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_subpass_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(vulkanPINVOKE.VkGraphicsPipelineCreateInfo_subpass_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint64_t basePipelineHandle {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_basePipelineHandle_set(swigCPtr, SWIGTYPE_p_uint64_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(vulkanPINVOKE.VkGraphicsPipelineCreateInfo_basePipelineHandle_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_int32_t basePipelineIndex {
    set {
      vulkanPINVOKE.VkGraphicsPipelineCreateInfo_basePipelineIndex_set(swigCPtr, SWIGTYPE_p_int32_t.getCPtr(value));
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(vulkanPINVOKE.VkGraphicsPipelineCreateInfo_basePipelineIndex_get(swigCPtr), true);
      if (vulkanPINVOKE.SWIGPendingException.Pending) throw vulkanPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VkGraphicsPipelineCreateInfo() : this(vulkanPINVOKE.new_VkGraphicsPipelineCreateInfo(), true) {
  }

}
